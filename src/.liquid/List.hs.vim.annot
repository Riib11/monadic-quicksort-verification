1:1-1:1::List.$trModule :: "GHC.Types.Module"
52:1-52:7::List.length :: "forall a .\nx1:(List.List a) -> {VV : Natural.Natural | VV == length x1}"
52:22-52:26::Natural.Zero :: "{v : Natural.Natural | v == Zero}"
53:22-53:37::Natural.Suc :: "x1:Natural.Natural -> {v : Natural.Natural | lqdc##$select v == x1\n                                             && v == Suc x1}"
53:26-53:37::lq_anf$##7205759403792813547 :: "{v : Natural.Natural | v == length xs}"
53:34-53:36::xs :: "{v : (List.List a) | v == xs}"
61:1-61:7::List.append :: "forall a .\nx1:(List.List a) -> x2:(List.List a) -> {zs : (List.List a) | length zs == add (length x1) (length x2)}"
61:20-61:22::ys :: "(List.List a)"
61:25-61:27::ys :: "{v : (List.List a) | v == ys}"
62:25-62:46::List.Cons :: "{VV : forall a .\n      x1:a -> x2:(List.List a) -> {v : (List.List a) | tl v == x2\n                                                       && hd v == x1\n                                                       && list_size v == Suc (list_size x2)\n                                                       && v == Cons x1 x2} | VV == Cons}"
62:30-62:31::x :: "{VV : a | VV == x}"
62:32-62:46::lq_anf$##7205759403792813549 :: "{v : (List.List a) | length v == add (length xs) (length ys)\n                     && v == append xs ys}"
62:40-62:42::xs :: "{v : (List.List a) | v == xs}"
62:43-62:45::ys :: "{v : (List.List a) | v == ys}"