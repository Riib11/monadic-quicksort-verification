{-# LANGUAGE ExplicitForAll #-}
{-@ LIQUID "--typeclass" @-}
{-@ LIQUID "--reflection" @-}
{-@ LIQUID "--ple" @-}


module VOrder where


import           Liquid.ProofCombinators
import           Function
import           VList


-- IsOrdered terms
class IsOrdered a where

  -- interface

  {-@ leq :: a -> a -> Bool @-}
  leq :: a -> a -> Bool

  -- properties

  {-@ leq_reflexive :: x : a ->
        {leq x x} @-}
  leq_reflexive :: a -> Proof

  {-@ leq_transitive :: x : a -> y : a -> z : a ->
        {leq x y && leq y z => leq x z} @-}
  leq_transitive :: a -> a -> a -> Proof -> Proof -> Proof

  {-# MINIMAL leq, leq_reflexive, leq_transitive #-}


-- Sorted list
-- data SortedList a where
