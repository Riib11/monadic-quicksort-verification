module IsMonad where

import           Liquid.ProofCombinators
import           Function


{-@
data IsMonad m = IsMonad
  { vlift :: forall a . a -> m a
  , vbind :: forall a b . m a -> (a -> m b) -> m b
  , vseq :: forall a b . m1:m a -> m2:m b -> {m : m b | m = vbind m1 (vconst m2)}
  , kleisli :: forall a b c . f:(a -> m b) -> g:(b -> m c) -> x:a -> {m : m c | m = vbind (f x) g}
  , vbind_identity_right :: forall a . m:m a ->
      {vbind m vlift = m}
  , vbind_vlift :: forall a b . f:(a -> m b) -> x:a ->
      {vbind (vlift x) f = f x}
  , vbind_distribution :: forall a b c . m:m a -> f:(a -> m b) -> g:(b -> m c) ->
      {vbind (vbind m f) g = vbind m (kleisli f g)} }
@-}
data IsMonad m = IsMonad
  { vlift :: forall a . a -> m a
  , vbind :: forall a b . m a -> (a -> m b) -> m b
  , vseq :: forall a b . m a -> m b -> m b
  , kleisli :: forall a b c . (a -> m b) -> (b -> m c) -> a -> m c
  , vbind_identity_right :: forall a . m a -> Proof
  , vbind_vlift :: forall a b . (a -> m b) -> a -> Proof
  , vbind_distribution :: forall a b c . m a -> (a -> m b) -> (b -> m c) -> Proof
}
