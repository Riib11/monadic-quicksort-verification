(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Natural.Natural 0)) ((par () (Natural.Zero (Natural.Suc (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 Natural.Natural))))))
(declare-datatypes ((List.List 1)) ((par (T0) (List.Nil (List.Cons (List.hd T0) (List.tl (List.List T0)))))))
(declare-datatypes ((Liquid.ProofCombinators.QED 0)) ((par () (Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit))))
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.List.init () Int)
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun lq_tmp$36$x$35$$35$748 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Liquid.ProofCombinators.axiomExt () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Generics.SSym () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Generics.$36$WSNoSourceStrictness () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$731 () Int)
(declare-fun GHC.Generics.SSourceUnpack () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Generics.$36$WSNoSourceUnpackedness () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$775 () Int)
(declare-fun GHC.Generics.$36$WUDouble () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Generics.SJust () Int)
(declare-fun GHC.Generics.$36$WSRightAssociative () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Generics.$36$WSSourceLazy () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Generics.SInfix () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Generics.SPrefix () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Generics.UWord () Int)
(declare-fun Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun GHC.Generics.SDecidedLazy () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Generics.$36$WSNotAssociative () Int)
(declare-fun GHC.Generics.$36$WSSourceNoUnpack () Int)
(declare-fun GHC.Generics.UInt () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun GHC.Real.C$58$Fractional () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Generics.UAddr () Int)
(declare-fun GHC.Generics.SNothing () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Generics.SNotAssociative () Int)
(declare-fun GHC.Generics.SSourceNoUnpack () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun Natural.mul () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Generics.$36$WUAddr () Int)
(declare-fun ds_d5bx () (List.List Int))
(declare-fun GHC.Generics.UFloat () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun GHC.Generics.$36$WSDecidedStrict () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Generics.$36$WSFalse () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.List.filter () Int)
(declare-fun GHC.Generics.$36$WSInfix () Int)
(declare-fun fromJust () Int)
(declare-fun xs$35$$35$a59P () (List.List Int))
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun ds_d5bm () (List.List Int))
(declare-fun GHC.Generics.$36$WSDecidedLazy () Int)
(declare-fun papp7 () Int)
(declare-fun Liquid.ProofCombinators.impossible () Int)
(declare-fun VV$35$$35$F$35$$35$11 () (List.List Int))
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.Generics.SNoSourceStrictness () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Generics.$36$WSSourceUnpack () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun Liquid.ProofCombinators.withProof () Int)
(declare-fun x$35$$35$a59L () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Generics.SNoSourceUnpackedness () Int)
(declare-fun GHC.Generics.SDecidedUnpack () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK () (List.List Int))
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lit$36$List () Str)
(declare-fun Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL () (List.List Int))
(declare-fun x$35$$35$a59O () Int)
(declare-fun isJust () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun List.append () Int)
(declare-fun GHC.Generics.$36$WSDecidedUnpack () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun prop () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Generics.SLeftAssociative () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Generics.$36$WUChar () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Generics.$36$WSSourceStrict () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun lq_tmp$36$x$35$$35$632 () (List.List Int))
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.Generics.SDecidedStrict () Int)
(declare-fun list_size () Int)
(declare-fun List.length () Int)
(declare-fun Liquid.ProofCombinators.$63$ () Int)
(declare-fun lq_tmp$36$x$35$$35$755 () Int)
(declare-fun Liquid.ProofCombinators.isAdmit () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Generics.$36$WSTrue () Int)
(declare-fun GHC.Generics.$36$WUFloat () Int)
(declare-fun GHC.Generics.SFalse () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lit$36$$39$Cons () Str)
(declare-fun GHC.Generics.STrue () Int)
(declare-fun GHC.Generics.SSourceStrict () Int)
(declare-fun GHC.Generics.$36$WUInt () Int)
(declare-fun GHC.Generics.UChar () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Generics.$36$WSNothing () Int)
(declare-fun xs$35$$35$a59M () (List.List Int))
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Generics.$36$WUWord () Int)
(declare-fun GHC.Generics.SSourceLazy () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Generics.$36$WSJust () Int)
(declare-fun GHC.Generics.SRightAssociative () Int)
(declare-fun GHC.Generics.$36$WSPrefix () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Generics.UDouble () Int)
(declare-fun Natural.add () Int)
(declare-fun GHC.Generics.$36$WSLeftAssociative () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lit$36$$39$Nil () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun ys$35$$35$a59N () (List.List Int))
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Generics.$36$WSSym () Int)
(declare-fun GHC.Real.C$58$Integral () Int)
(declare-fun VV$35$$35$F$35$$35$16 () (List.List Int))
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$45 (Int Natural.Natural) (_ BitVec 32))
(declare-fun apply$35$$35$29 (Int Liquid.ProofCombinators.QED) Bool)
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$13 (Int Bool) Natural.Natural)
(declare-fun apply$35$$35$18 (Int Str) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$6 (Int Int) Natural.Natural)
(declare-fun apply$35$$35$15 (Int Str) Bool)
(declare-fun apply$35$$35$19 (Int Str) (List.List Int))
(declare-fun apply$35$$35$42 (Int Natural.Natural) Int)
(declare-fun apply$35$$35$9 (Int Bool) Str)
(declare-fun apply$35$$35$5 (Int Int) (List.List Int))
(declare-fun apply$35$$35$17 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$28 (Int Liquid.ProofCombinators.QED) Int)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$33 (Int Liquid.ProofCombinators.QED) (List.List Int))
(declare-fun apply$35$$35$48 (Int Natural.Natural) Natural.Natural)
(declare-fun apply$35$$35$32 (Int Liquid.ProofCombinators.QED) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$41 (Int (List.List Int)) Natural.Natural)
(declare-fun apply$35$$35$43 (Int Natural.Natural) Bool)
(declare-fun apply$35$$35$31 (Int Liquid.ProofCombinators.QED) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) Int)
(declare-fun apply$35$$35$47 (Int Natural.Natural) (List.List Int))
(declare-fun apply$35$$35$30 (Int Liquid.ProofCombinators.QED) Str)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) Natural.Natural)
(declare-fun apply$35$$35$36 (Int (List.List Int)) Bool)
(declare-fun apply$35$$35$12 (Int Bool) (List.List Int))
(declare-fun apply$35$$35$11 (Int Bool) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) (List.List Int))
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$35 (Int (List.List Int)) Int)
(declare-fun apply$35$$35$4 (Int Int) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$20 (Int Str) Natural.Natural)
(declare-fun apply$35$$35$16 (Int Str) Str)
(declare-fun apply$35$$35$40 (Int (List.List Int)) (List.List Int))
(declare-fun apply$35$$35$8 (Int Bool) Bool)
(declare-fun apply$35$$35$39 (Int (List.List Int)) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$46 (Int Natural.Natural) Liquid.ProofCombinators.QED)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$38 (Int (List.List Int)) (_ BitVec 32))
(declare-fun apply$35$$35$34 (Int Liquid.ProofCombinators.QED) Natural.Natural)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$37 (Int (List.List Int)) Str)
(declare-fun apply$35$$35$7 (Int Bool) Int)
(declare-fun apply$35$$35$44 (Int Natural.Natural) Str)
(declare-fun coerce$35$$35$45 (Natural.Natural) (_ BitVec 32))
(declare-fun coerce$35$$35$29 (Liquid.ProofCombinators.QED) Bool)
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$13 (Bool) Natural.Natural)
(declare-fun coerce$35$$35$18 (Str) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$6 (Int) Natural.Natural)
(declare-fun coerce$35$$35$15 (Str) Bool)
(declare-fun coerce$35$$35$19 (Str) (List.List Int))
(declare-fun coerce$35$$35$42 (Natural.Natural) Int)
(declare-fun coerce$35$$35$9 (Bool) Str)
(declare-fun coerce$35$$35$5 (Int) (List.List Int))
(declare-fun coerce$35$$35$17 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$28 (Liquid.ProofCombinators.QED) Int)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$33 (Liquid.ProofCombinators.QED) (List.List Int))
(declare-fun coerce$35$$35$48 (Natural.Natural) Natural.Natural)
(declare-fun coerce$35$$35$32 (Liquid.ProofCombinators.QED) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$41 ((List.List Int)) Natural.Natural)
(declare-fun coerce$35$$35$43 (Natural.Natural) Bool)
(declare-fun coerce$35$$35$31 (Liquid.ProofCombinators.QED) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) Int)
(declare-fun coerce$35$$35$47 (Natural.Natural) (List.List Int))
(declare-fun coerce$35$$35$30 (Liquid.ProofCombinators.QED) Str)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) Natural.Natural)
(declare-fun coerce$35$$35$36 ((List.List Int)) Bool)
(declare-fun coerce$35$$35$12 (Bool) (List.List Int))
(declare-fun coerce$35$$35$11 (Bool) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) (List.List Int))
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$35 ((List.List Int)) Int)
(declare-fun coerce$35$$35$4 (Int) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$20 (Str) Natural.Natural)
(declare-fun coerce$35$$35$16 (Str) Str)
(declare-fun coerce$35$$35$40 ((List.List Int)) (List.List Int))
(declare-fun coerce$35$$35$8 (Bool) Bool)
(declare-fun coerce$35$$35$39 ((List.List Int)) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$46 (Natural.Natural) Liquid.ProofCombinators.QED)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$38 ((List.List Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$34 (Liquid.ProofCombinators.QED) Natural.Natural)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$37 ((List.List Int)) Str)
(declare-fun coerce$35$$35$7 (Bool) Int)
(declare-fun coerce$35$$35$44 (Natural.Natural) Str)
(declare-fun smt_lambda$35$$35$45 (Natural.Natural (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$29 (Liquid.ProofCombinators.QED Bool) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$13 (Bool Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$18 (Str Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$6 (Int Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$15 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$19 (Str (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$42 (Natural.Natural Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$5 (Int (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$17 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$28 (Liquid.ProofCombinators.QED Int) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$33 (Liquid.ProofCombinators.QED (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$48 (Natural.Natural Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$32 (Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$41 ((List.List Int) Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$43 (Natural.Natural Bool) Int)
(declare-fun smt_lambda$35$$35$31 (Liquid.ProofCombinators.QED (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str Int) Int)
(declare-fun smt_lambda$35$$35$47 (Natural.Natural (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$30 (Liquid.ProofCombinators.QED Str) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$36 ((List.List Int) Bool) Int)
(declare-fun smt_lambda$35$$35$12 (Bool (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$11 (Bool Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$35 ((List.List Int) Int) Int)
(declare-fun smt_lambda$35$$35$4 (Int Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$20 (Str Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$16 (Str Str) Int)
(declare-fun smt_lambda$35$$35$40 ((List.List Int) (List.List Int)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$39 ((List.List Int) Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$46 (Natural.Natural Liquid.ProofCombinators.QED) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$38 ((List.List Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$34 (Liquid.ProofCombinators.QED Natural.Natural) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$37 ((List.List Int) Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$44 (Natural.Natural Str) Int)
(declare-fun lam_arg$35$$35$1$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$2$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$3$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$4$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$5$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$6$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$7$35$$35$42 () Natural.Natural)
(declare-fun lam_arg$35$$35$1$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$2$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$3$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$4$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$5$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$6$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$7$35$$35$28 () Liquid.ProofCombinators.QED)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$2$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$3$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$4$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$5$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$6$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$7$35$$35$35 () (List.List Int))
(declare-fun lam_arg$35$$35$1$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$21 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$7 () Bool)











(assert (distinct Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit))


(assert (distinct lit$36$$39$Nil lit$36$$39$Cons lit$36$List lit$36$main))



(assert (distinct GHC.Types.True GHC.Types.False))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$List) 4))
(assert (= (strLen lit$36$$39$Cons) 5))
(assert (= (strLen lit$36$$39$Nil) 4))
(push 1)
(assert (and GHC.Types.True (and (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true)) (and (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false)) (and (= (is-Natural.Zero Natural.Zero) true) (= (is-Natural.Suc Natural.Zero) false) (= (is-Natural.Suc Natural.Zero) false) (= (is-Natural.Zero Natural.Zero) true)) (and (= VV$35$$35$F$35$$35$16 ys$35$$35$a59N) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (is-Natural.Suc Natural.Zero) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) ds_d5bm)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))) (= (ite (is-List.Nil ds_d5bm) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) Natural.Zero) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (is-List.Cons lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) false) (= (is-List.Cons (as List.Nil (List.List Int))) false) (= (is-Natural.Zero Natural.Zero) true) (= (apply$35$$35$41 (as list_size Int) (as List.Nil (List.List Int))) Natural.Zero) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$41 (as List.length Int) ds_d5bm) Natural.Zero) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false) (= (is-List.Nil (as List.Nil (List.List Int))) true) (= (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) Natural.Zero) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false) (= (apply$35$$35$41 (as List.length Int) VV$35$$35$F$35$$35$16) (ite (is-List.Nil VV$35$$35$F$35$$35$16) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$16))))) (= (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))) (= (apply$35$$35$41 (as List.length Int) ds_d5bm) (ite (is-List.Nil ds_d5bm) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))))) (= (is-List.Nil lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) true)) (and (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (is-Natural.Suc Natural.Zero) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (is-List.Cons (as List.Nil (List.List Int))) false) (= (is-Natural.Zero Natural.Zero) true) (= (apply$35$$35$41 (as list_size Int) (as List.Nil (List.List Int))) Natural.Zero) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false) (= (is-List.Nil (as List.Nil (List.List Int))) true) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false)) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (and (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (= (is-List.Nil lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) true) (= (is-List.Cons lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) false) (= (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) Natural.Zero) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK (as List.Nil (List.List Int))) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK (as List.Nil (List.List Int))) (= (is-List.Nil lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) true) (= (is-List.Cons lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) false) (= (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) Natural.Zero) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK (as List.Nil (List.List Int)))) (not GHC.Types.False)))
(push 1)
(assert (not (= (apply$35$$35$41 (as List.length Int) VV$35$$35$F$35$$35$16) (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) ds_d5bm)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and GHC.Types.True (and (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true)) (and (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false)) (and (= (is-Natural.Zero Natural.Zero) true) (= (is-Natural.Suc Natural.Zero) false) (= (is-Natural.Suc Natural.Zero) false) (= (is-Natural.Zero Natural.Zero) true)) (and (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (is-Natural.Suc Natural.Zero) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (is-List.Cons (as List.Nil (List.List Int))) false) (= (is-Natural.Zero Natural.Zero) true) (= (apply$35$$35$41 (as list_size Int) (as List.Nil (List.List Int))) Natural.Zero) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false) (= (is-List.Nil (as List.Nil (List.List Int))) true) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false)) (and (= (is-List.Nil VV$35$$35$F$35$$35$11) false) (= (List.tl VV$35$$35$F$35$$35$11) lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL) (= (List.hd VV$35$$35$F$35$$35$11) x$35$$35$a59O) (= (List.tl VV$35$$35$F$35$$35$11) lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL) (= (List.hd VV$35$$35$F$35$$35$11) x$35$$35$a59O) (= (is-List.Cons VV$35$$35$F$35$$35$11) true) (= (apply$35$$35$41 (as list_size Int) VV$35$$35$F$35$$35$11) (Natural.Suc (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL))) (= VV$35$$35$F$35$$35$11 ((as List.Cons (List.List Int)) x$35$$35$a59O lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL)) (= VV$35$$35$F$35$$35$11 ((as List.Cons (List.List Int)) x$35$$35$a59O lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL)) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.Admit) true) (= (is-Natural.Suc Natural.Zero) false) (= (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))) (ite (is-Natural.Zero (ite (is-List.Nil (List.tl ds_d5bm)) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl (List.tl ds_d5bm)))))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 (ite (is-List.Nil (List.tl ds_d5bm)) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl (List.tl ds_d5bm))))))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))))))) (= (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)) (ite (is-List.Nil (List.tl VV$35$$35$F$35$$35$11)) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl (List.tl VV$35$$35$F$35$$35$11)))))) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.QED) true) (= (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)) (ite (is-List.Nil (List.tl ds_d5bm)) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl (List.tl ds_d5bm)))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (is-Liquid.ProofCombinators.QED Liquid.ProofCombinators.Admit) false) (= (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) ds_d5bm)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) (= (is-Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) false) (= (is-List.Cons (as List.Nil (List.List Int))) false) (= (is-Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) false) (= (is-Natural.Zero Natural.Zero) true) (= (apply$35$$35$41 (as list_size Int) (as List.Nil (List.List Int))) Natural.Zero) (= (apply$35$$35$41 (as List.length Int) xs$35$$35$a59P) (ite (is-List.Nil xs$35$$35$a59P) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl xs$35$$35$a59P))))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) xs$35$$35$a59P)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)) (ite (is-Natural.Zero (ite (is-List.Nil xs$35$$35$a59P) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl xs$35$$35$a59P))))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 (ite (is-List.Nil xs$35$$35$a59P) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl xs$35$$35$a59P)))))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))))))) (= (ite (is-List.Nil VV$35$$35$F$35$$35$11) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) (= (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11))) (= (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))))) (= (lqdc$35$$35$$36$select$35$$35$Natural.Suc$35$$35$1 (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (= (ite (is-List.Nil ds_d5bm) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.QED) false) (= (is-List.Nil (as List.Nil (List.List Int))) true) (= (apply$35$$35$41 (as List.length Int) lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL) (ite (is-List.Nil lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL))))) (= (is-Natural.Suc (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) true) (= (is-Natural.Suc (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) true) (= (is-Natural.Suc (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) true) (= (apply$35$$35$41 (as List.length Int) VV$35$$35$F$35$$35$11) (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))) (= (apply$35$$35$29 Liquid.ProofCombinators.isAdmit Liquid.ProofCombinators.Admit) true) (= (apply$35$$35$41 (as List.length Int) ds_d5bm) (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (= (ite (is-Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) (= (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) ds_d5bm)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)) (ite (is-Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm)))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))) (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N)))))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (is-Liquid.ProofCombinators.Admit Liquid.ProofCombinators.QED) false) (= (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))) (= (is-Natural.Zero (Natural.Suc (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))) (ite (is-List.Nil ys$35$$35$a59N) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ys$35$$35$a59N))))))) false) (= (apply$35$$35$41 (as List.length Int) ds_d5bm) (ite (is-List.Nil ds_d5bm) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl ds_d5bm))))) (= (apply$35$$35$41 (as List.length Int) VV$35$$35$F$35$$35$11) (ite (is-List.Nil VV$35$$35$F$35$$35$11) Natural.Zero (Natural.Suc (apply$35$$35$41 (as List.length Int) (List.tl VV$35$$35$F$35$$35$11)))))) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (and (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ds_d5bm) (= (is-List.Nil lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) false) (= (List.tl lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) xs$35$$35$a59P) (= (List.hd lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) x$35$$35$a59O) (= (List.tl lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) xs$35$$35$a59P) (= (List.hd lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) x$35$$35$a59O) (= (is-List.Cons lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) true) (= (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) (Natural.Suc (apply$35$$35$41 (as list_size Int) xs$35$$35$a59P))) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ((as List.Cons (List.List Int)) x$35$$35$a59O xs$35$$35$a59P)) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ((as List.Cons (List.List Int)) x$35$$35$a59O xs$35$$35$a59P)) (= (is-List.Nil lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) false) (= (List.tl lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) xs$35$$35$a59P) (= (List.hd lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) x$35$$35$a59O) (= (List.tl lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) xs$35$$35$a59P) (= (List.hd lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) x$35$$35$a59O) (= (is-List.Cons lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) true) (= (apply$35$$35$41 (as list_size Int) lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK) (Natural.Suc (apply$35$$35$41 (as list_size Int) xs$35$$35$a59P))) (= lq_anf$36$$35$$35$7205759403792813548$35$$35$d5bK ((as List.Cons (List.List Int)) x$35$$35$a59O xs$35$$35$a59P))) (and (= (apply$35$$35$41 (as List.length Int) lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL) (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) xs$35$$35$a59P)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N))) (= lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL (apply$35$$35$40 (apply$35$$35$35 (as List.append Int) xs$35$$35$a59P) ys$35$$35$a59N)) (= lq_anf$36$$35$$35$7205759403792813549$35$$35$d5bL (apply$35$$35$40 (apply$35$$35$35 (as List.append Int) xs$35$$35$a59P) ys$35$$35$a59N))) (not GHC.Types.False)))
(push 1)
(assert (not (= (apply$35$$35$41 (as List.length Int) VV$35$$35$F$35$$35$11) (apply$35$$35$48 (apply$35$$35$42 Natural.add (apply$35$$35$41 (as List.length Int) ds_d5bm)) (apply$35$$35$41 (as List.length Int) ys$35$$35$a59N)))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
