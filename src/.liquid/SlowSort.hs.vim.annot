1:1-1:1::SlowSort.$trModule :: "GHC.Types.Module"
25:1-25:9::SlowSort.slowsort :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(IsOrdered.IsOrdered b) -> x3:(VList.VList b) -> {VV : a (VList.VList b) | VV == slowsort x1 x2 x3\n                                                                                                                && VV == kleisli (isMonad x1) (permute x1) (mguardBy x1 (isSorted x2)) x3}"
25:10-25:21::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
25:22-25:26::iOrd :: "(IsOrdered.IsOrdered a)"
25:29-25:68::lq_anf$##7205759403792843622 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute isMonadPlus x1}"
25:38-25:46::_ :: "{VV : forall a .\n      x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute isMonadPlus x1} | VV == permute isMonadPlus\n                                                                                    && VV == permute_}"
25:47-25:68::lq_anf$##7205759403792843623 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == mguardBy isMonadPlus isSorted_ x1\n                                               && v == vseq (isMonad isMonadPlus) (mguard isMonadPlus (isSorted_ x1)) (vlift (isMonad isMonadPlus) x1)}"
25:58-25:67::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrd x1}"
27:3-27:12::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrd x1}"
27:15-27:28::SlowSort.isSorted :: "forall a .\nx1:(IsOrdered.IsOrdered a) -> x2:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted x1 x2}"
27:24-27:28::iOrd :: "{v : (IsOrdered.IsOrdered a) | v == iOrd}"
28:3-28:11::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute isMonadPlus x1}"
28:15-28:34::SlowSort.permute :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == permute x1 x2}"
28:23-28:34::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
29:3-29:12::mguardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == mguardBy isMonadPlus x1 x3\n                                               && v == vseq (isMonad isMonadPlus) (mguard isMonadPlus (x1 x3)) (vlift (isMonad isMonadPlus) x3)}"
29:15-29:35::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == mguardBy isMonadPlus x1 x3\n                                               && v == vseq (isMonad isMonadPlus) (mguard isMonadPlus (x1 x3)) (vlift (isMonad isMonadPlus) x3)}"
29:24-29:35::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
30:3-30:11::kleisli_ :: "forall a b c .\nx1:(a -> d b) -> x3:(b -> d c) -> x5:a -> {v : d c | v == kleisli isMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind isMonad_) x1 x3 x5}"
30:15-30:31::_ :: "x1:(a -> b c) -> x3:(c -> b d) -> x5:a -> {v : b d | v == kleisli isMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind isMonad_) x1 x3 x5}"
30:23-30:31::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
31:3-31:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
31:18-31:37::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
31:26-31:37::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
37:1-37:8::SlowSort.permute :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == permute x1 x2}"
37:9-37:20::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
37:27-37:37::lq_anf$##7205759403792843614 :: "{v : (VList.VList a) | vlength v == Zero\n                       && v == Nil}"
37:34-37:37::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == Nil} | VV == Nil}"
39:3-39:9::vlift_ :: "forall a . a -> b a"
39:12-39:26::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_}"
39:18-39:26::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
40:3-40:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
40:14-40:33::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
40:22-40:33::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
42:3-42:14::lq_anf$##7205759403792843615 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split isMonadPlus xs\n                                            && v == split_ xs}"
42:11-42:13::xs :: "{v : (VList.VList a) | v == xs}"
43:26-43:64::VList.vappend :: "{VV : forall a .\n      x1:(VList.VList a) -> x2:(VList.VList a) -> {v : (VList.VList a) | v == vappend x1 x2} | VV == vappend}"
43:28-43:30::ys :: "(VList.VList a)"
43:31-43:33::zs :: "(VList.VList a)"
43:45-43:47::ys :: "{v : (VList.VList a) | v == ys}"
43:48-43:63::lq_anf$##7205759403792843617 :: "{v : (VList.VList a) | v == vappend xs zs}"
43:57-43:59::xs :: "{v : (VList.VList a) | v == xs}"
43:60-43:62::zs :: "{v : (VList.VList a) | v == zs}"
44:25-44:38::lq_anf$##7205759403792843619 :: "{v : a (VList.VList b) | v == permute isMonadPlus ys\n                         && v == permute_ ys}"
44:35-44:37::ys :: "{v : (VList.VList a) | v == ys}"
45:25-45:38::lq_anf$##7205759403792843620 :: "{v : a (VList.VList b) | v == permute isMonadPlus zs\n                         && v == permute_ zs}"
45:35-45:37::zs :: "{v : (VList.VList a) | v == zs}"
48:3-48:9::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
48:15-48:29::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad_}"
48:21-48:29::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
49:3-49:9::split_ :: "forall a .\nx1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split isMonadPlus x1}"
49:14-49:31::SlowSort.split :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split x1 x2}"
49:20-49:31::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
50:3-50:11::vliftF2_ :: "forall a b c .\nx1:(a -> b -> c) -> x4:d a -> x5:d b -> {v : d c | v == vliftF2 isMonad_ x1 x4 x5\n                                                   && v == vbind isMonad_ x4 lam x##a5Pn : a##xo . vbind isMonad_ x5 lam y##a5Po : b##xo . vlift isMonad_ (x1 x##a5Pn y##a5Po)}"
50:15-50:31::_ :: "x1:(a -> b -> c) -> x4:d a -> x5:d b -> {v : d c | v == vliftF2 isMonad_ x1 x4 x5\n                                                   && v == vbind isMonad_ x4 lam x##a5Pn : a##xo . vbind isMonad_ x5 lam y##a5Po : b##xo . vlift isMonad_ (x1 x##a5Pn y##a5Po)}"
50:23-50:31::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
51:3-51:11::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute isMonadPlus x1}"
51:14-51:33::SlowSort.permute :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == permute x1 x2}"
51:22-51:33::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
52:3-52:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
52:17-52:36::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
52:25-52:36::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
58:1-58:9::SlowSort.isSorted :: "forall a .\nx1:(IsOrdered.IsOrdered a) -> x2:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted x1 x2}"
58:10-58:14::iOrd :: "(IsOrdered.IsOrdered a)"
58:29-58:33::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
59:29-59:45::lq_anf$##7205759403792843593 :: "GHC.Types.Bool"
59:34-59:42::lq_anf$##7205759403792843592 :: "a -> GHC.Types.Bool"
59:40-59:41::x :: "{VV : a | VV == x}"
59:43-59:45::xs :: "{v : (VList.VList a) | v == xs}"
59:49-59:61::lq_anf$##7205759403792843594 :: "{v : GHC.Types.Bool | v == isSorted iOrd xs\n                      && v == isSorted_ xs}"
59:59-59:61::xs :: "{v : (VList.VList a) | v == xs}"
61:3-61:7::leq_ :: "a -> a -> GHC.Types.Bool"
61:15-61:23::_ :: "a -> a -> GHC.Types.Bool"
61:19-61:23::iOrd :: "{v : (IsOrdered.IsOrdered a) | v == iOrd}"
62:3-62:12::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrd x1}"
62:15-62:28::SlowSort.isSorted :: "forall a .\nx1:(IsOrdered.IsOrdered a) -> x2:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted x1 x2}"
62:24-62:28::iOrd :: "{v : (IsOrdered.IsOrdered a) | v == iOrd}"
68:1-68:16::SlowSort.isSortedBetween :: "forall a .\nx1:(IsOrdered.IsOrdered a) -> x2:a -> x3:((VList.VList a), (VList.VList a)) -> {VV : GHC.Types.Bool | VV == isSortedBetween x1 x2 x3\n                                                                                                      && VV == (vall lam y##abar : a##xo . leq x1 y##abar x2 (lqdc##$select x3)\n                                                                                                                && vall lam z##abas : a##xo . leq x1 x2 z##abas (lqdc##$select x3))}"
68:17-68:21::iOrd :: "(IsOrdered.IsOrdered a)"
68:22-68:23::x :: "a"
69:3-69:27::lq_anf$##7205759403792837363 :: "GHC.Types.Bool"
69:8-69:24::_ :: "{v : GHC.Types.Bool | v == leq_ y x}"
69:10-69:11::y :: "a"
69:20-69:21::y :: "{VV : a | VV == y}"
69:22-69:23::x :: "{VV : a | VV == x}"
69:25-69:27::ys :: "{v : (VList.VList a) | v == ys}"
69:31-69:55::lq_anf$##7205759403792837365 :: "GHC.Types.Bool"
69:36-69:52::_ :: "{v : GHC.Types.Bool | v == leq_ x z}"
69:38-69:39::z :: "a"
69:48-69:49::x :: "{VV : a | VV == x}"
69:50-69:51::z :: "{VV : a | VV == z}"
69:53-69:55::zs :: "{v : (VList.VList a) | v == zs}"
70:9-70:13::leq_ :: "a -> a -> GHC.Types.Bool"
70:16-70:24::_ :: "a -> a -> GHC.Types.Bool"
70:20-70:24::iOrd :: "{v : (IsOrdered.IsOrdered a) | v == iOrd}"
76:1-76:6::SlowSort.split :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split x1 x2}"
76:7-76:18::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
76:25-76:42::vlift_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_\n                            && VV == vlift_}"
76:32-76:42::lq_anf$##7205759403792843603 :: "((VList.VList a), (VList.VList a))"
76:33-76:36::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == Nil} | VV == Nil}"
76:38-76:41::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == Nil} | VV == Nil}"
78:3-78:9::vlift_ :: "forall a . a -> b a"
78:12-78:26::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_}"
78:18-78:26::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
79:3-79:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
79:14-79:33::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
79:22-79:33::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
81:3-81:14::lq_anf$##7205759403792843604 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split isMonadPlus xs\n                                            && v == split_ xs}"
81:11-81:13::xs :: "{v : (VList.VList a) | v == xs}"
82:3-82:74::lq_anf$##7205759403792843605 :: "((VList.VList a), (VList.VList a))"
82:17-82:73::vmadd_ :: "{VV : forall a . b a -> b a -> b a | VV == vmadd isMonadPlus\n                                     && VV == vmadd_}"
82:24-82:48::lq_anf$##7205759403792843608 :: "a ((VList.VList b), (VList.VList b))"
82:32-82:47::lq_anf$##7205759403792843607 :: "{v : ((VList.VList a), (VList.VList a)) | x_Tuple22 v == zs\n                                          && lqdc##$select v == zs\n                                          && snd v == zs}"
82:33-82:42::lq_anf$##7205759403792843606 :: "{v : (VList.VList a) | tl v == ys\n                       && hd v == x\n                       && vlength v == Suc (vlength ys)\n                       && v == Cons x ys}"
82:38-82:39::x :: "{VV : a | VV == x}"
82:40-82:42::ys :: "{v : (VList.VList a) | v == ys}"
82:44-82:46::zs :: "{v : (VList.VList a) | v == zs}"
82:49-82:73::lq_anf$##7205759403792843611 :: "a ((VList.VList b), (VList.VList b))"
82:57-82:72::lq_anf$##7205759403792843610 :: "{v : ((VList.VList a), (VList.VList a)) | x_Tuple21 v == ys\n                                          && lqdc##$select v == ys\n                                          && fst v == ys}"
82:58-82:60::ys :: "{v : (VList.VList a) | v == ys}"
82:62-82:71::lq_anf$##7205759403792843609 :: "{v : (VList.VList a) | tl v == zs\n                       && hd v == x\n                       && vlength v == Suc (vlength zs)\n                       && v == Cons x zs}"
82:67-82:68::x :: "{VV : a | VV == x}"
82:69-82:71::zs :: "{v : (VList.VList a) | v == zs}"
84:3-84:9::split_ :: "forall a .\nx1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split isMonadPlus x1}"
84:12-84:29::SlowSort.split :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split x1 x2}"
84:18-84:29::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
85:3-85:9::vmadd_ :: "forall a . b a -> b a -> b a"
85:13-85:30::_ :: "{VV : forall a . b a -> b a -> b a | VV == vmadd isMonadPlus}"
85:19-85:30::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
86:3-86:9::vlift_ :: "forall a . a -> b a"
86:13-86:27::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_}"
86:19-86:27::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
87:3-87:9::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
87:13-87:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad_}"
87:19-87:27::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
88:3-88:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
88:15-88:34::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
88:23-88:34::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"