1:1-1:1::IsMonadPlus.$trModule :: "GHC.Types.Module"
41:1-41:10::IsMonadPlus.raw_vmaddF :: "forall a b c .\nx1:(forall a .\n    a a -> a a -> a a) -> x4:(b -> a c) -> x6:(b -> a c) -> x8:b -> {VV : a c | VV == raw_vmaddF x1 x4 x6 x8\n                                                                                && VV == x1 (x4 x8) (x6 x8)}"
41:11-41:19::raw_vmadd :: "forall a . b a -> b a -> b a"
41:20-41:21::f :: "a -> b c"
41:22-41:23::g :: "a -> b c"
41:24-41:25::x :: "a"
41:37-41:42::lq_anf$##7205759403792820684 :: "{v : a b | v == f x}"
41:40-41:41::x :: "{VV : a | VV == x}"
41:43-41:48::lq_anf$##7205759403792820685 :: "{v : a b | v == g x}"
41:46-41:47::x :: "{VV : a | VV == x}"
51:1-51:6::IsMonadPlus.vmaddF :: "forall a b c .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(b -> a c) -> x4:(b -> a c) -> x6:b -> {VV : a c | VV == vmaddF x1 x2 x4 x6\n                                                                                        && VV == raw_vmaddF (vmadd x1) x2 x4 x6}"
51:7-51:10::iMP :: "(IsMonadPlus.IsMonadPlus a)"
51:13-51:28::IsMonadPlus.raw_vmaddF :: "{VV : forall a b c .\n      x1:(forall a .\n          a a -> a a -> a a) -> x4:(b -> a c) -> x6:(b -> a c) -> x8:b -> {v : a c | v == raw_vmaddF x1 x4 x6 x8\n                                                                                     && v == x1 (x4 x8) (x6 x8)} | VV == raw_vmaddF}"
51:23-51:28::vmadd_ :: "{VV : forall a . b a -> b a -> b a | VV == vmadd iMP\n                                     && VV == vmadd_}"
51:35-51:40::vmadd_ :: "forall a . b a -> b a -> b a"
51:43-51:51::_ :: "{VV : forall a . b a -> b a -> b a | VV == vmadd iMP}"
51:48-51:51::iMP :: "{v : (IsMonadPlus.IsMonadPlus a) | v == iMP}"
57:1-57:7::IsMonadPlus.mguard :: "forall a .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:GHC.Types.Bool -> {VV : a () | VV == mguard x1 x2\n                                                                    && VV == (if x2 then vlift (isMonad x1) () else vepsilon x1)}"
57:8-57:19::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
57:20-57:21::b :: "GHC.Types.Bool"
57:24-57:58::lq_anf$##7205759403792823380 :: "{v : GHC.Types.Bool | v == b}"
57:27-57:28::_ :: "{v : GHC.Types.Bool | v == b}"
57:34-57:43::vlift_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_\n                            && VV == vlift_}"
57:41-57:43::GHC.Tuple.() :: "{v : () | v == ()}"
57:49-57:58::_ :: "{VV : forall a .\n      {v : b a | v == vepsilon isMonadPlus\n                 && v == vepsilon_} | VV == vepsilon isMonadPlus\n                                      && VV == vepsilon_}"
59:3-59:9::vlift_ :: "forall a . a -> b a"
59:15-59:29::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_}"
59:21-59:29::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
60:3-60:12::vepsilon_ :: "forall a . {v : b a | v == vepsilon isMonadPlus}"
60:15-60:35::_ :: "{VV : forall a .\n      {v : b a | v == vepsilon isMonadPlus} | VV == vepsilon isMonadPlus}"
60:24-60:35::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
61:3-61:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
61:15-61:34::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
61:23-61:34::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
67:1-67:9::IsMonadPlus.mguardBy :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:(b -> GHC.Types.Bool) -> x4:b -> {VV : a b | VV == mguardBy x1 x2 x4\n                                                                                  && VV == vseq (isMonad x1) (mguard x1 (x2 x4)) (vlift (isMonad x1) x4)}"
67:10-67:21::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
67:22-67:23::p :: "a -> GHC.Types.Bool"
67:24-67:25::x :: "a"
67:28-67:60::vseq_ :: "{VV : forall a b .\n      x1:c a -> x2:c b -> {v : c b | v == vseq isMonad_ x1 x2\n                                     && v == vbind isMonad_ x1 (vconst x2)} | VV == vseq isMonad_\n                                                                              && VV == vseq_}"
67:34-67:49::lq_anf$##7205759403792823382 :: "a ()"
67:43-67:48::lq_anf$##7205759403792823381 :: "{v : GHC.Types.Bool | v == p x}"
67:46-67:47::x :: "{VV : a | VV == x}"
67:50-67:60::lq_anf$##7205759403792823383 :: "{v : a b | v == vlift_ x}"
67:58-67:59::x :: "{VV : a | VV == x}"
69:3-69:8::vseq_ :: "forall a b .\nx1:c a -> x2:c b -> {v : c b | v == vseq isMonad_ x1 x2\n                               && v == vbind isMonad_ x1 (vconst x2)}"
69:14-69:27::_ :: "x1:a b -> x2:a c -> {v : a c | v == vseq isMonad_ x1 x2\n                               && v == vbind isMonad_ x1 (vconst x2)}"
69:19-69:27::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
70:3-70:10::mguard_ :: "x1:GHC.Types.Bool -> {v : a () | v == mguard isMonadPlus x1\n                                 && v == (if x1 then vlift (isMonad isMonadPlus) () else vepsilon isMonadPlus)}"
70:14-70:32::_ :: "x1:GHC.Types.Bool -> {v : a () | v == mguard isMonadPlus x1\n                                 && v == (if x1 then vlift (isMonad isMonadPlus) () else vepsilon isMonadPlus)}"
70:21-70:32::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
71:3-71:9::vlift_ :: "forall a . a -> b a"
71:14-71:28::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad_}"
71:20-71:28::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus\n                           && v == isMonad_}"
72:3-72:11::isMonad_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
72:14-72:33::_ :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
72:22-72:33::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
91:1-91:27::IsMonadPlus.vbind_monotonic_refinement :: "forall a b c .\nx1:(IsMonadPlus.IsMonadPlus c) -> x2:c c -> x3:c c -> x4:(c -> c c) -> {VV : () | vmadd x1 x2 x3 == x3 => vmadd x1 (vbind (isMonad x1) x2 x4) (vbind (isMonad x1) x3 x4) == vbind (isMonad x1) x3 x4}"
105:1-105:22::IsMonadPlus.isMCommutative_mguard :: "forall a b c .\nx1:(IsMonadPlus.IsMonadPlus c) -> x2:GHC.Types.Bool -> x3:c c -> x4:(c -> c) -> {VV : () | vliftF2 (isMonad x1) (vconstF x4) (mguard x1 x2) x3 == vliftF2 (isMonad x1) (vflip (vconstF x4)) x3 (mguard x1 x2)}"
110:1-110:11::IsMonadPlus.mguard_and :: "forall a .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:GHC.Types.Bool -> x3:GHC.Types.Bool -> {VV : a () | VV == mguard_and x1 x2 x3\n                                                                                         && VV == mguard x1 (vand x2 x3)}"
110:12-110:23::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
110:24-110:26::b1 :: "GHC.Types.Bool"
110:27-110:29::b2 :: "GHC.Types.Bool"
110:39-110:50::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
110:51-110:63::lq_anf$##7205759403792823384 :: "{v : GHC.Types.Bool | v == vand b1 b2\n                      && v == (if b1 then b2 else false)}"
110:57-110:59::b1 :: "{v : GHC.Types.Bool | v == b1}"
110:60-110:62::b2 :: "{v : GHC.Types.Bool | v == b2}"
121:1-121:16::IsMonadPlus.mguard_and_vseq :: "forall a .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:GHC.Types.Bool -> x3:GHC.Types.Bool -> {VV : () | mguard_and x1 x2 x3 == vseq (isMonad x1) (mguard x1 x2) (mguard x1 x3)}"
128:1-128:16::IsMonadPlus.mguard_disjoint :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus a) -> x2:GHC.Types.Bool -> x3:a b -> x4:a b -> {VV : a b | VV == mguard_disjoint x1 x2 x3 x4\n                                                                                       && VV == vmadd x1 (vseq (isMonad x1) (mguard x1 x2) x3) (vseq (isMonad x1) (mguard x1 (vnot x2)) x3)}"
128:17-128:28::isMonadPlus :: "(IsMonadPlus.IsMonadPlus a)"
128:29-128:30::b :: "GHC.Types.Bool"
128:31-128:33::m1 :: "a b"
128:34-128:36::m2 :: "a b"
129:3-129:14::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
130:3-130:57::lq_anf$##7205759403792823387 :: "a b"
130:9-130:30::lq_anf$##7205759403792823385 :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
130:18-130:29::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
130:31-130:53::lq_anf$##7205759403792823386 :: "{v : a () | v == mguard isMonadPlus b\n            && v == (if b then vlift (isMonad isMonadPlus) () else vepsilon isMonadPlus)}"
130:39-130:50::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
130:51-130:52::b :: "{v : GHC.Types.Bool | v == b}"
130:54-130:56::m1 :: "{v : a b | v == m1}"
131:3-131:64::lq_anf$##7205759403792823391 :: "a b"
131:9-131:30::lq_anf$##7205759403792823388 :: "{v : (IsMonad.IsMonad a) | v == isMonad isMonadPlus}"
131:18-131:29::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
131:31-131:60::lq_anf$##7205759403792823390 :: "a ()"
131:39-131:50::isMonadPlus :: "{v : (IsMonadPlus.IsMonadPlus a) | v == isMonadPlus}"
131:51-131:59::lq_anf$##7205759403792823389 :: "{v : GHC.Types.Bool | v == vnot b\n                      && v == (if b then false else true)}"
131:57-131:58::b :: "{v : GHC.Types.Bool | v == b}"
131:61-131:63::m1 :: "{v : a b | v == m1}"
144:1-144:23::IsMonadPlus.mguard_disjoint_branch :: "forall a b .\nx1:(IsMonadPlus.IsMonadPlus b) -> x2:GHC.Types.Bool -> x3:b b -> x4:b b -> {VV : () | vmadd x1 (mguard_disjoint x1 x2 x3 x4) (vbranch x2 x3 x4) == vbranch x2 x3 x4}"