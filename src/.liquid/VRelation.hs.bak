module Relation where

import           Liquid.ProofCombinators


-- RelationN is an N-ary relation.
-- RelationN' is a homogenous N-ary relation.

{-@ type Predicate a = a -> Bool @-}
type Predicate a = a -> Bool
{-@ type Relation a b = a -> b -> Bool @-}
type Relation a b = a -> b -> Bool
{-@ type RelationD a = Relation a a @-}
type RelationD a = Relation a a
{-@ type Relation3 a b c = a -> b -> c -> Bool @-}
type Relation3 a b c = a -> b -> c -> Bool
{-@ type Relation3D a = Relation3 a a a @-}
type Relation3D a = Relation3 a a a


-- Predicates.
-- NOTE. Predicate parameters must be capitalized.

{-@ predicate IsReflexive R  X     = R X X @-}
{-@ predicate IsSymmetric R  X Y   = R X Y => R Y X @-}
{-@ predicate IsTransitive R X Y Z = R X Y => R Y Z => R X Y @-}
