1:1-1:1::VIdentity.$trModule :: "GHC.Types.Module"
19:1-19:15::VIdentity.vmap_VIdentity :: "forall a b .\nx1:(a -> b) -> x3:(VIdentity.VIdentity a) -> {VV : (VIdentity.VIdentity b) | VV == vmap_VIdentity x1 x3\n                                                                             && VV == VIdentity (x1 (lqdc##$select x3))}"
19:16-19:17::f :: "a -> b"
19:34-19:49::VIdentity.VIdentity :: "{VV : forall a .\n      x1:a -> {v : (VIdentity.VIdentity a) | lqdc##$select v == x1\n                                             && v == VIdentity x1} | VV == VIdentity}"
19:44-19:49::lq_anf$##7205759403792826453 :: "{VV : a | VV == f x}"
19:47-19:48::x :: "{VV : a | VV == x}"
27:1-27:19::VIdentity.vmap_vid_VIdentity :: "forall a .\nx1:(VIdentity.VIdentity a) -> {VV : () | vmap_VIdentity vid x1 == vid x1}"
27:20-27:21::x :: "(VIdentity.VIdentity a)"
32:1-32:20::VIdentity.isFunctor_VIdentity :: "{VV : (IsFunctor.IsFunctor VIdentity.VIdentity) | VV == isFunctor_VIdentity\n                                                  && VV == IsFunctor vmap_VIdentity vmap_vid_VIdentity}"
33:22-33:36::VIdentity.vmap_VIdentity :: "{VV : forall a b .\n      x1:(a -> b) -> x3:(VIdentity.VIdentity a) -> {v : (VIdentity.VIdentity b) | v == vmap_VIdentity x1 x3\n                                                                                  && v == VIdentity (x1 (lqdc##$select x3))} | VV == vmap_VIdentity}"
33:49-33:67::VIdentity.vmap_vid_VIdentity :: "{VV : forall a .\n      x1:(VIdentity.VIdentity a) -> {v : () | vmap_VIdentity vid x1 == vid x1} | VV == vmap_vid_VIdentity}"
38:1-38:16::VIdentity.vlift_VIdentity :: "forall a .\nx1:a -> {VV : (VIdentity.VIdentity a) | VV == vlift_VIdentity x1\n                                        && VV == VIdentity x1}"
44:1-44:16::VIdentity.vbind_VIdentity :: "forall a b .\nx1:(VIdentity.VIdentity a) -> x2:(a -> (VIdentity.VIdentity b)) -> {VV : (VIdentity.VIdentity b) | VV == vbind_VIdentity x1 x2\n                                                                                                   && VV == x2 (lqdc##$select x1)}"
44:31-44:32::k :: "a -> (VIdentity.VIdentity b)"
44:35-44:38::k :: "a -> (VIdentity.VIdentity b)"
44:37-44:38::x :: "{VV : a | VV == x}"
53:1-53:24::VIdentity.vbind_correct_VIdentity :: "forall a b .\nx1:(VIdentity.VIdentity a) -> x2:(a -> b) -> {VV : () | vbind_VIdentity x1 (vcomp vlift_VIdentity x2) == vmap isFunctor_VIdentity x2 x1}"
61:1-61:25::VIdentity.vbind_identity_VIdentity :: "forall a .\nx1:(VIdentity.VIdentity a) -> {VV : () | vbind_VIdentity x1 vlift_VIdentity == x1}"
70:1-70:22::VIdentity.vbind_vlift_VIdentity :: "forall a b .\nx1:(a -> (VIdentity.VIdentity b)) -> x3:a -> {VV : () | vbind_VIdentity (vlift_VIdentity x3) x1 == x1 x3}"
83:1-83:22::VIdentity.vbind_vbind_VIdentity :: "forall a b c .\nx1:(VIdentity.VIdentity a) -> x2:(a -> (VIdentity.VIdentity b)) -> x4:(b -> (VIdentity.VIdentity c)) -> {VV : () | vbind_VIdentity (vbind_VIdentity x1 x2) x4 == vbind_VIdentity x1 (raw_kleisli vbind_VIdentity x2 x4)}"
88:1-88:18::VIdentity.isMonad_VIdentity :: "{VV : (IsMonad.IsMonad VIdentity.VIdentity) | VV == isMonad_VIdentity\n                                              && VV == IsMonad isFunctor_VIdentity vlift_VIdentity vbind_VIdentity vbind_correct_VIdentity vbind_identity_VIdentity vbind_vlift_VIdentity vbind_vbind_VIdentity}"
89:22-89:41::VIdentity.isFunctor_VIdentity :: "{v : (IsFunctor.IsFunctor VIdentity.VIdentity) | v == isFunctor_VIdentity\n                                                 && v == IsFunctor vmap_VIdentity vmap_vid_VIdentity}"
90:22-90:37::VIdentity.vbind_VIdentity :: "{VV : forall a b .\n      x1:(VIdentity.VIdentity a) -> x2:(a -> (VIdentity.VIdentity b)) -> {v : (VIdentity.VIdentity b) | v == vbind_VIdentity x1 x2\n                                                                                                        && v == x2 (lqdc##$select x1)} | VV == vbind_VIdentity}"
91:22-91:37::VIdentity.vlift_VIdentity :: "{VV : forall a .\n      x1:a -> {v : (VIdentity.VIdentity a) | v == vlift_VIdentity x1\n                                             && v == VIdentity x1} | VV == vlift_VIdentity}"
92:22-92:45::VIdentity.vbind_correct_VIdentity :: "{VV : forall a b .\n      x1:(VIdentity.VIdentity a) -> x2:(a -> b) -> {v : () | vbind_VIdentity x1 (vcomp vlift_VIdentity x2) == vmap isFunctor_VIdentity x2 x1} | VV == vbind_correct_VIdentity}"
93:22-93:46::VIdentity.vbind_identity_VIdentity :: "{VV : forall a .\n      x1:(VIdentity.VIdentity a) -> {v : () | vbind_VIdentity x1 vlift_VIdentity == x1} | VV == vbind_identity_VIdentity}"
94:22-94:43::VIdentity.vbind_vlift_VIdentity :: "{VV : forall a b .\n      x1:(a -> (VIdentity.VIdentity b)) -> x3:a -> {v : () | vbind_VIdentity (vlift_VIdentity x3) x1 == x1 x3} | VV == vbind_vlift_VIdentity}"
95:22-95:43::VIdentity.vbind_vbind_VIdentity :: "{VV : forall a b c .\n      x1:(VIdentity.VIdentity a) -> x2:(a -> (VIdentity.VIdentity b)) -> x4:(b -> (VIdentity.VIdentity c)) -> {v : () | vbind_VIdentity (vbind_VIdentity x1 x2) x4 == vbind_VIdentity x1 (raw_kleisli vbind_VIdentity x2 x4)} | VV == vbind_vbind_VIdentity}"