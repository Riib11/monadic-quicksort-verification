1:1-1:1::VBool.$trModule :: "GHC.Types.Module"
10:1-10:5::VBool.vand :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {VV : GHC.Types.Bool | VV == vand x1 x2\n                                                                 && VV == (if x1 then x2 else false)}"
10:6-10:8::b1 :: "GHC.Types.Bool"
10:9-10:11::b2 :: "GHC.Types.Bool"
10:17-10:19::_ :: "{v : GHC.Types.Bool | v == b1}"
10:25-10:27::b2 :: "{v : GHC.Types.Bool | v == b2}"
10:33-10:38::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
14:1-14:5::VBool.vnot :: "x1:GHC.Types.Bool -> {VV : GHC.Types.Bool | VV == vnot x1\n                                            && VV == (if x1 then false else true)}"
14:6-14:7::b :: "GHC.Types.Bool"
14:13-14:14::_ :: "{v : GHC.Types.Bool | v == b}"
14:20-14:25::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
14:31-14:35::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
19:1-19:8::VBool.vbranch :: "forall a .\nx1:GHC.Types.Bool -> x2:a -> x3:a -> {VV : a | VV == vbranch x1 x2 x3\n                                               && VV == (if x1 then x2 else x3)}"
19:9-19:10::b :: "GHC.Types.Bool"
19:11-19:12::x :: "a"
19:13-19:14::y :: "a"
19:20-19:21::_ :: "{v : GHC.Types.Bool | v == b}"
19:27-19:28::x :: "{VV : a | VV == x}"
19:34-19:35::y :: "{VV : a | VV == y}"