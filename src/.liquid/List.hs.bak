module List where

import           Prelude                 hiding ( head
                                                , tail
                                                , all
                                                , length
                                                , (++)
                                                , (+)
                                                )

import           Liquid.ProofCombinators

import           Natural


{-
For some reason, it won't let me name the fields "head" and "tail".
Gives this error:

  /Users/henry/Documents/Projects/monadic-quicksort-verification/src/List.hs:15:21-35: Error: Illegal type specification for `List.Cons`

   15 | data List a = Nil | Cons a (List a)
                            ^^^^^^^^^^^^^^^

       List.Cons :: forall a .
                    head:a -> tail:(List.List a) -> {VV : (List.List a) | tail VV == tail
                                                                          && head VV == head}
       Sort Error in Refinement: {VV : (List.List a##a3h6) | ((is$List.Nil VV <=> false)
                                                              && tail VV == tail##List.Cons
                                                              && head VV == head##List.Cons
                                                              && tail VV == tail##List.Cons
                                                              && head VV == head##List.Cons
                                                              && (is$List.Cons VV <=> true))}
       Cannot unify fix$36$$91$$93$ with List.List in expression: tail VV
  make: *** [check] Error 2
-}
{-@
data List a = Nil | Cons {hd::a, tl::List a}
@-}
data List a = Nil | Cons a (List a)


{-@
measure list_size :: forall a . List a -> Natural
list_size Nil = Zero
list_size (Cons _ xs) = Suc (list_size xs)
@-}


{-@ reflect length @-}
length :: forall a . List a -> Natural
length Nil         = Zero
length (Cons x xs) = Suc (length xs)



{-@
append :: forall a . xs:List a -> ys:List a -> {zs : List a | length zs = add (length xs) (length ys)}
@-}
append :: forall a . List a -> List a -> List a
append Nil         ys = ys
append (Cons x xs) ys = Cons x (append xs ys)
