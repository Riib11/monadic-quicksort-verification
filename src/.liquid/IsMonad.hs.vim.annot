1:1-1:1::IsMonad.$trModule :: "GHC.Types.Module"
44:1-44:12::IsMonad.raw_kleisli :: "forall a b c d .\nx1:(forall a b .\n    a a -> (a -> a b) -> a b) -> x5:(b -> a c) -> x7:(c -> a d) -> x9:b -> {VV : a d | VV == raw_kleisli x1 x5 x7 x9\n                                                                                       && VV == x1 (x5 x9) x7}"
44:13-44:22::raw_vbind :: "forall a b . c a -> (a -> c b) -> c b"
44:23-44:24::f :: "a -> b c"
44:25-44:26::g :: "a -> b c"
44:27-44:28::x :: "a"
44:41-44:46::lq_anf$##7205759403792816590 :: "{v : a b | v == f x}"
44:44-44:45::x :: "{VV : a | VV == x}"
44:47-44:48::g :: "a -> b c"
55:1-55:8::IsMonad.kleisli :: "forall a b c d .\nx1:(IsMonad.IsMonad a) -> x2:(b -> a c) -> x4:(c -> a d) -> x6:b -> {VV : a d | VV == kleisli x1 x2 x4 x6\n                                                                                && VV == raw_kleisli (vbind x1) x2 x4 x6}"
55:9-55:16::isMonad :: "(IsMonad.IsMonad a)"
55:31-55:46::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad}"
55:38-55:45::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
61:1-61:5::IsMonad.vseq :: "forall a b c .\nx1:(IsMonad.IsMonad a) -> x2:a b -> x3:a c -> {VV : a c | VV == vseq x1 x2 x3\n                                                          && VV == vbind x1 x2 (vconst x3)}"
61:6-61:13::isMonad :: "(IsMonad.IsMonad a)"
61:14-61:16::m1 :: "a b"
61:17-61:19::m2 :: "a b"
61:29-61:36::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
61:38-61:40::m1 :: "{v : a b | v == m1}"
61:41-61:52::lq_anf$##7205759403792821428 :: "x1:a -> {v : b c | v == vconst m2 x1\n                   && v == m2}"
61:49-61:51::m2 :: "{v : a b | v == m2}"
67:1-67:13::IsMonad.vseq_epsilon :: "forall a .\nx1:(IsMonad.IsMonad a) -> {VV : a () | VV == vseq_epsilon x1\n                                       && VV == vlift x1 vunit}"
67:14-67:21::isMonad :: "(IsMonad.IsMonad a)"
67:30-67:37::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
67:38-67:43::VUnit.vunit :: "{v : () | v == vunit\n          && v == ()}"
76:1-76:19::IsMonad.vseq_identity_left :: "forall a .\nx1:(IsMonad.IsMonad a) -> x2:a () -> {VV : () | vseq x1 (vseq_epsilon x1) x2 == x2}"
76:20-76:27::isMonad :: "(IsMonad.IsMonad a)"
76:28-76:29::m :: "a ()"
77:3-77:24::lq_anf$##7205759403792821429 :: "{v : a () | v == vseq isMonad vseq_epsilon_ m\n            && v == vbind isMonad vseq_epsilon_ (vconst m)\n            && v == vseq_ vseq_epsilon_ m}"
77:9-77:22::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon isMonad\n            && v == vlift isMonad vunit\n            && v == vseq_epsilon_}"
77:23-77:24::m :: "{v : a () | v == m}"
78:9-78:41::lq_anf$##7205759403792821432 :: "a ()"
78:16-78:30::lq_anf$##7205759403792821430 :: "{v : a () | v == vlift_ vunit}"
78:24-78:29::VUnit.vunit :: "{v : () | v == vunit\n          && v == ()}"
78:31-78:41::lq_anf$##7205759403792821431 :: "x1:() -> {v : a () | v == vconst m x1\n                     && v == m}"
78:39-78:40::m :: "{v : a () | v == m}"
79:9-79:23::lq_anf$##7205759403792821434 :: "{v : a () | v == vconst m vunit\n            && v == m}"
79:16-79:17::m :: "{v : a () | v == m}"
79:18-79:23::VUnit.vunit :: "{v : () | v == vunit\n          && v == ()}"
80:9-80:38::lq_anf$##7205759403792821437 :: "()"
80:22-80:32::lq_anf$##7205759403792821436 :: "x1:() -> {v : a () | v == vconst m x1\n                     && v == m}"
80:30-80:31::m :: "{v : a () | v == m}"
80:33-80:38::VUnit.vunit :: "{v : () | v == vunit\n          && v == ()}"
81:9-81:10::m :: "{v : a () | v == m}"
82:9-82:12::Liquid.ProofCombinators.QED :: "{v : Liquid.ProofCombinators.QED | (isAdmit v <=> false)\n                                   && v == QED}"
84:3-84:8::vseq_ :: "forall a b .\nx1:c a -> x2:c b -> {v : c b | v == vseq isMonad x1 x2\n                               && v == vbind isMonad x1 (vconst x2)}"
84:19-84:31::_ :: "x1:a b -> x2:a c -> {v : a c | v == vseq isMonad x1 x2\n                               && v == vbind isMonad x1 (vconst x2)}"
84:24-84:31::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
85:3-85:16::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon isMonad\n            && v == vlift isMonad vunit}"
85:19-85:39::_ :: "{v : a () | v == vseq_epsilon isMonad\n            && v == vlift isMonad vunit}"
85:32-85:39::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
86:3-86:9::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
86:19-86:32::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad}"
86:25-86:32::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
87:3-87:9::vlift_ :: "forall a . a -> b a"
87:19-87:32::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad}"
87:25-87:32::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
88:3-88:15::vbind_vlift_ :: "forall a b .\nk:(a -> c b) -> x:a -> {v : () | vbind isMonad (vlift isMonad x) k == k x}"
88:19-88:38::_ :: "{VV : forall a b .\n      k:(a -> c b) -> x:a -> {v : () | vbind isMonad (vlift isMonad x) k == k x} | VV == vbind_vlift isMonad}"
88:31-88:38::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
97:1-97:20::IsMonad.vseq_identity_right :: "forall a b .\nx1:(IsMonad.IsMonad a) -> x2:a () -> {VV : () | vseq x1 x2 (vseq_epsilon x1) == x2}"
97:21-97:28::isMonad :: "(IsMonad.IsMonad a)"
97:29-97:30::m :: "a ()"
120:1-120:14::IsMonad.vseq_identity :: "forall a b .\nx1:(IsMonad.IsMonad a) -> x2:a () -> {VV : () | vseq x1 (vseq_epsilon x1) x2 == x2\n                                                && vseq x1 x2 (vseq_epsilon x1) == x2}"
120:15-120:22::isMonad :: "(IsMonad.IsMonad a)"
120:23-120:24::m :: "a ()"
129:1-129:7::IsMonad.vliftF :: "forall a b c .\nx1:(IsMonad.IsMonad a) -> x2:(b -> c) -> x4:a b -> {VV : a c | VV == vliftF x1 x2 x4\n                                                               && VV == vbind x1 x4 lam x##a5Pg : b##xo . vlift x1 (x2 x##a5Pg)}"
129:8-129:15::isMonad :: "(IsMonad.IsMonad a)"
129:16-129:17::f :: "a -> b"
129:18-129:19::m :: "a b"
129:22-129:51::lq_anf$##7205759403792816594 :: "a -> b c"
129:29-129:30::m :: "{v : a b | v == m}"
129:31-129:51::vlift' :: "{VV : forall a . a -> b a | VV == vlift isMonad\n                            && VV == vlift'}"
129:33-129:34::x :: "a"
129:45-129:50::lq_anf$##7205759403792816593 :: "{VV : a | VV == f x}"
129:48-129:49::x :: "{VV : a | VV == x}"
131:3-131:9::vlift' :: "forall a . a -> b a"
131:12-131:25::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad}"
131:18-131:25::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
132:3-132:9::vbind' :: "forall a b . c a -> (a -> c b) -> c b"
132:12-132:25::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad}"
132:18-132:25::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
139:1-139:8::IsMonad.vliftF2 :: "forall a b c d .\nx1:(IsMonad.IsMonad a) -> x2:(b -> c -> d) -> x5:a b -> x6:a c -> {VV : a d | VV == vliftF2 x1 x2 x5 x6\n                                                                              && VV == vbind x1 x5 lam x##a5Pn : b##xo . vbind x1 x6 lam y##a5Po : c##xo . vlift x1 (x2 x##a5Pn y##a5Po)}"
139:9-139:16::isMonad :: "(IsMonad.IsMonad a)"
139:17-139:18::f :: "a -> b -> c"
139:19-139:21::ma :: "a b"
139:22-139:24::mb :: "a b"
140:3-140:5::ma :: "{v : a b | v == ma}"
141:3-141:43::lq_anf$##7205759403792816596 :: "a -> b c"
141:5-141:6::x :: "a"
141:17-141:19::mb :: "{v : a b | v == mb}"
141:20-141:42::vlift' :: "{VV : forall a . a -> b a | VV == vlift isMonad\n                            && VV == vlift'}"
141:22-141:23::y :: "a"
141:34-141:41::lq_anf$##7205759403792816595 :: "{VV : a | VV == f x y}"
141:37-141:38::x :: "{VV : a | VV == x}"
141:39-141:40::y :: "{VV : a | VV == y}"
143:3-143:9::vlift' :: "forall a . a -> b a"
143:12-143:25::_ :: "{VV : forall a . a -> b a | VV == vlift isMonad}"
143:18-143:25::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"
144:3-144:9::vbind' :: "forall a b . c a -> (a -> c b) -> c b"
144:12-144:25::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind isMonad}"
144:18-144:25::isMonad :: "{v : (IsMonad.IsMonad a) | v == isMonad}"