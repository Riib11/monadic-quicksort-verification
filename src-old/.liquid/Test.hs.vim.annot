1:1-1:1::$trModule :: "GHC.Types.Module"
12:1-12:8::lappend :: "forall a .\nx1:(Test.LList a) -> x2:(Test.LList a) -> {VV : (Test.LList a) | VV == lappend x1 x2}"
12:14-12:16::ys :: "(Test.LList a)"
12:19-12:21::ys :: "{v : (Test.LList a) | v == ys}"
13:27-13:50::LCons :: "{VV : forall a .\n      x1:a -> x2:(Test.LList a) -> {v : (Test.LList a) | LCons##lqdc##$select v == x2\n                                                         && LCons##lqdc##$select v == x1\n                                                         && v == LCons x1 x2} | VV == LCons}"
13:33-13:34::x :: "{VV : a | VV == x}"
13:35-13:50::lq_anf$##7205759403792835697 :: "{v : (Test.LList a) | v == lappend xs ys}"
13:44-13:46::xs :: "{v : (Test.LList a) | v == xs}"
13:47-13:49::ys :: "{v : (Test.LList a) | v == ys}"
18:1-18:7::llist1 :: "forall a .\nx1:a -> {VV : (Test.LList a) | VV == llist1 x1\n                               && VV == LCons x1 LNil}"
18:8-18:9::x :: "a"
18:18-18:19::x :: "{VV : a | VV == x}"
18:20-18:24::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
22:1-22:11::lsingleton :: "forall a .\nx1:a -> {VV : (Test.LList a) | VV == lsingleton x1\n                               && VV == llist1 x1}"
27:1-27:7::llist2 :: "forall a .\nx1:a -> x2:a -> {VV : (Test.LList a) | VV == llist2 x1 x2\n                                       && VV == lappend (llist1 x1) (llist1 x2)}"
27:8-27:9::x :: "a"
27:10-27:11::y :: "a"
27:14-27:22::lq_anf$##7205759403792835702 :: "{v : (Test.LList a) | v == llist1 x\n                      && v == LCons x LNil}"
27:21-27:22::x :: "{VV : a | VV == x}"
27:33-27:41::lq_anf$##7205759403792835703 :: "{v : (Test.LList a) | v == llist1 y\n                      && v == LCons y LNil}"
27:40-27:41::y :: "{VV : a | VV == y}"
33:1-33:6::lbind :: "forall a b .\nx1:(Test.LList a) -> x2:(a -> (Test.LList b)) -> {VV : (Test.LList b) | VV == lbind x1 x2}"
33:12-33:13::f :: "a -> (Test.LList b)"
33:16-33:20::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
34:24-34:27::lq_anf$##7205759403792835699 :: "{v : (Test.LList a) | v == f x}"
34:26-34:27::x :: "{VV : a | VV == x}"
34:38-34:48::lq_anf$##7205759403792835700 :: "{v : (Test.LList a) | v == lbind xs f}"
34:44-34:46::xs :: "{v : (Test.LList a) | v == xs}"
34:47-34:48::f :: "a -> (Test.LList b)"
39:1-39:5::lmap :: "forall a b .\nx1:(a -> b) -> x3:(Test.LList a) -> {VV : (Test.LList b) | VV == lmap x1 x3}"
39:6-39:7::f :: "a -> b"
39:15-39:19::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
40:23-40:46::LCons :: "{VV : forall a .\n      x1:a -> x2:(Test.LList a) -> {v : (Test.LList a) | LCons##lqdc##$select v == x2\n                                                         && LCons##lqdc##$select v == x1\n                                                         && v == LCons x1 x2} | VV == LCons}"
40:29-40:34::lq_anf$##7205759403792835739 :: "{VV : a | VV == f x}"
40:32-40:33::x :: "{VV : a | VV == x}"
40:35-40:46::lq_anf$##7205759403792835740 :: "{v : (Test.LList a) | v == lmap f xs}"
40:41-40:42::f :: "a -> b"
40:43-40:45::xs :: "{v : (Test.LList a) | v == xs}"
45:1-45:5::lzip :: "forall a b c .\nx1:(a -> b -> c) -> x4:(Test.LList a) -> x5:(Test.LList b) -> {VV : (Test.LList c) | VV == lzip x1 x4 x5\n                                                                                     && VV == lbind x4 lam x##aaQA : a##xo . lbind x5 lam y##aaQB : b##xo . llist1 (x1 x##aaQA y##aaQB)}"
45:6-45:7::f :: "a -> b -> c"
45:8-45:10::xs :: "(Test.LList a)"
45:11-45:13::ys :: "(Test.LList a)"
45:22-45:24::xs :: "{v : (Test.LList a) | v == xs}"
45:25-45:64::lq_anf$##7205759403792835705 :: "a -> (Test.LList b)"
45:27-45:28::x :: "a"
45:38-45:40::ys :: "{v : (Test.LList a) | v == ys}"
45:41-45:63::llist1 :: "{VV : forall a .\n      x1:a -> {v : (Test.LList a) | v == llist1 x1\n                                    && v == LCons x1 LNil} | VV == llist1}"
45:43-45:44::y :: "a"
45:55-45:62::lq_anf$##7205759403792835704 :: "{VV : a | VV == f x y}"
45:58-45:59::x :: "{VV : a | VV == x}"
45:60-45:61::y :: "{VV : a | VV == y}"
50:1-50:6::split :: "forall a .\nx1:(Test.LList a) -> {VV : (Test.LList ((Test.LList a), (Test.LList a))) | VV == split x1}"
50:14-50:33::llist1 :: "{VV : forall a .\n      x1:a -> {v : (Test.LList a) | v == llist1 x1\n                                    && v == LCons x1 LNil} | VV == llist1}"
50:21-50:33::lq_anf$##7205759403792835710 :: "((Test.LList a), (Test.LList a))"
50:22-50:26::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
50:28-50:32::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
52:3-52:11::lq_anf$##7205759403792835711 :: "{v : (Test.LList ((Test.LList a), (Test.LList a))) | v == split xs}"
52:9-52:11::xs :: "{v : (Test.LList a) | v == xs}"
54:7-54:30::lq_anf$##7205759403792835715 :: "(Test.LList ((Test.LList a), (Test.LList a)))"
54:14-54:30::lq_anf$##7205759403792835714 :: "{v : ((Test.LList a), (Test.LList a)) | x_Tuple22 v == zs\n                                        && lqdc##$select v == zs\n                                        && snd v == zs}"
54:15-54:25::lq_anf$##7205759403792835713 :: "{v : (Test.LList a) | LCons##lqdc##$select v == ys\n                      && LCons##lqdc##$select v == x\n                      && v == LCons x ys}"
54:21-54:22::x :: "{VV : a | VV == x}"
54:23-54:25::ys :: "{v : (Test.LList a) | v == ys}"
54:27-54:29::zs :: "{v : (Test.LList a) | v == zs}"
54:41-54:64::lq_anf$##7205759403792835718 :: "(Test.LList ((Test.LList a), (Test.LList a)))"
54:48-54:64::lq_anf$##7205759403792835717 :: "{v : ((Test.LList a), (Test.LList a)) | x_Tuple21 v == ys\n                                        && lqdc##$select v == ys\n                                        && fst v == ys}"
54:49-54:51::ys :: "{v : (Test.LList a) | v == ys}"
54:53-54:63::lq_anf$##7205759403792835716 :: "{v : (Test.LList a) | LCons##lqdc##$select v == zs\n                      && LCons##lqdc##$select v == x\n                      && v == LCons x zs}"
54:59-54:60::x :: "{VV : a | VV == x}"
54:61-54:63::zs :: "{v : (Test.LList a) | v == zs}"
59:1-59:8::permute :: "forall a .\nx1:(Test.LList a) -> {VV : (Test.LList (Test.LList a)) | VV == permute x1}"
59:16-59:27::lq_anf$##7205759403792835729 :: "{v : (Test.LList a) | v == LNil}"
59:23-59:27::_ :: "{VV : forall a . {v : (Test.LList a) | v == LNil} | VV == LNil}"
60:24-60:42::permute_LCons :: "forall a .\nx1:a -> x2:(Test.LList a) -> {VV : (Test.LList (Test.LList a)) | VV == permute_LCons x1 x2\n                                                                 && VV == lbind (split x2) (permute_LCons_f1 x1)}"
60:38-60:39::x :: "{VV : a | VV == x}"
60:40-60:42::xs :: "{v : (Test.LList a) | v == xs}"
65:1-65:14::permute_LCons :: "forall a .\nx1:a -> x2:(Test.LList a) -> {VV : (Test.LList (Test.LList a)) | VV == permute_LCons x1 x2\n                                                                 && VV == lbind (split x2) (permute_LCons_f1 x1)}"
65:15-65:16::x :: "a"
65:17-65:19::xs :: "(Test.LList a)"
65:22-65:30::lq_anf$##7205759403792835726 :: "{v : (Test.LList ((Test.LList a), (Test.LList a))) | v == split xs}"
65:28-65:30::xs :: "{v : (Test.LList a) | v == xs}"
65:39-65:59::lq_anf$##7205759403792835727 :: "x1:((Test.LList a), (Test.LList a)) -> {VV : (Test.LList (Test.LList a)) | VV == permute_LCons_f1 x x1\n                                                                           && VV == lzip (permute_LCons_f2 x) (permute (lqdc##$select x1)) (permute (lqdc##$select x1))}"
65:57-65:58::x :: "{VV : a | VV == x}"
70:1-70:17::permute_LCons_f1 :: "forall a .\nx1:a -> x2:((Test.LList a), (Test.LList a)) -> {VV : (Test.LList (Test.LList a)) | VV == permute_LCons_f1 x1 x2\n                                                                                   && VV == lzip (permute_LCons_f2 x1) (permute (lqdc##$select x2)) (permute (lqdc##$select x2))}"
70:18-70:19::x :: "a"
70:31-70:82::lzip :: "{VV : forall a b c .\n      x1:(a -> b -> c) -> x4:(Test.LList a) -> x5:(Test.LList b) -> {v : (Test.LList c) | v == lzip x1 x4 x5\n                                                                                          && v == lbind x4 lam x##aaQA : a##xo . lbind x5 lam y##aaQB : b##xo . llist1 (x1 x##aaQA y##aaQB)} | VV == lzip}"
70:36-70:56::lq_anf$##7205759403792835723 :: "x1:(Test.LList a) -> x2:(Test.LList a) -> {v : (Test.LList a) | v == permute_LCons_f2 x x1 x2\n                                                                && v == lappend (lappend x1 (llist1 x)) x2}"
70:54-70:55::x :: "{VV : a | VV == x}"
70:57-70:69::lq_anf$##7205759403792835724 :: "{VV : (Test.LList (Test.LList a)) | VV == permute ys}"
70:66-70:68::ys :: "{v : (Test.LList a) | v == ys}"
70:70-70:82::lq_anf$##7205759403792835725 :: "{VV : (Test.LList (Test.LList a)) | VV == permute zs}"
70:79-70:81::zs :: "{v : (Test.LList a) | v == zs}"
75:1-75:17::permute_LCons_f2 :: "forall a .\nx1:a -> x2:(Test.LList a) -> x3:(Test.LList a) -> {VV : (Test.LList a) | VV == permute_LCons_f2 x1 x2 x3\n                                                                         && VV == lappend (lappend x2 (llist1 x1)) x3}"
75:18-75:19::x :: "a"
75:20-75:23::ys' :: "(Test.LList a)"
75:24-75:27::zs' :: "(Test.LList a)"
75:30-75:33::ys' :: "{v : (Test.LList a) | v == ys'}"
75:44-75:52::lq_anf$##7205759403792835720 :: "{v : (Test.LList a) | v == llist1 x\n                      && v == LCons x LNil}"
75:51-75:52::x :: "{VV : a | VV == x}"
75:63-75:66::zs' :: "{v : (Test.LList a) | v == zs'}"
83:1-83:20::permute_LCons_check :: "forall a .\nx1:a -> x2:(Test.LList a) -> {VV : () | permute (LCons x1 x2) == lbind (split x2) (permute_LCons_f1 x1)}"
83:21-83:22::x :: "a"
83:23-83:25::xs :: "(Test.LList a)"
84:3-84:23::lq_anf$##7205759403792835731 :: "(Test.LList (Test.LList a))"
84:11-84:23::lq_anf$##7205759403792835730 :: "{v : (Test.LList a) | LCons##lqdc##$select v == xs\n                      && LCons##lqdc##$select v == x\n                      && v == LCons x xs}"
84:18-84:19::x :: "{VV : a | VV == x}"
84:20-84:22::xs :: "{v : (Test.LList a) | v == xs}"
85:9-85:27::lq_anf$##7205759403792835732 :: "{v : (Test.LList (Test.LList a)) | v == permute_LCons x xs\n                                   && v == lbind (split xs) (permute_LCons_f1 x)}"
85:23-85:24::x :: "{VV : a | VV == x}"
85:25-85:27::xs :: "{v : (Test.LList a) | v == xs}"
86:9-86:17::lq_anf$##7205759403792835734 :: "{v : (Test.LList ((Test.LList a), (Test.LList a))) | v == split xs}"
86:15-86:17::xs :: "{v : (Test.LList a) | v == xs}"
86:26-86:46::lq_anf$##7205759403792835735 :: "x1:((Test.LList a), (Test.LList a)) -> {v : (Test.LList (Test.LList a)) | v == permute_LCons_f1 x x1\n                                                                          && v == lzip (permute_LCons_f2 x) (permute (lqdc##$select x1)) (permute (lqdc##$select x1))}"
86:44-86:45::x :: "{VV : a | VV == x}"
87:9-87:12::QED :: "{v : Language.Haskell.Liquid.Equational.QED | v == QED}"