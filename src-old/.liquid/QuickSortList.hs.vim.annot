1:1-1:1::$trModule :: "GHC.Types.Module"
26:1-26:25::slowsort_VCons_expansion :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:b -> x3:(VList.VList b) -> {VV : a (VList.VList b) | VV == slowsort_VCons_expansion x1 x2 x3\n                                                                                                                 && VV == vbind (iMonad (lqdc##$select x1)) (split (lqdc##$select x1) x3) lam ds_d9AX : (Tuple (VList.VList a##a9oo) (VList.VList a##a9oo)) . vseq (iMonad (lqdc##$select x1)) (guard (lqdc##$select x1) (vall lam x##a9fc : b##xo . vleq (lqdc##$select x1) x##a9fc x2 (lqdc##$select ds_d9AX)\n                                                                                                                                                                                                                                                                                                                          && vall (vleq (lqdc##$select x1) x2) (lqdc##$select ds_d9AX))) (vbind (iMonad (lqdc##$select x1)) (vbind (iMonad (lqdc##$select x1)) (permute (lqdc##$select x1) (lqdc##$select ds_d9AX)) (guardBy (lqdc##$select x1) (isSorted (lqdc##$select x1)))) lam ys'##a9fd : (VList.VList a##a9oo) . vbind (iMonad (lqdc##$select x1)) (vbind (iMonad (lqdc##$select x1)) (permute (lqdc##$select x1) (lqdc##$select ds_d9AX)) (guardBy (lqdc##$select x1) (isSorted (lqdc##$select x1)))) lam zs'##a9fe : (VList.VList a##a9oo) . vlift (iMonad (lqdc##$select x1)) (vappend ys'##a9fd (vappend (vsingleton x2) zs'##a9fe)))}"
26:49-26:50::p :: "a"
26:51-26:53::xs :: "(VList.VList a)"
27:3-27:12::lq_anf$##7205759403792830536 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split iMonadPlus xs\n                                            && v == split_ xs}"
27:10-27:12::xs :: "{v : (VList.VList a) | v == xs}"
28:5-28:62::lq_anf$##7205759403792830543 :: "a ()"
28:13-28:61::lq_anf$##7205759403792830542 :: "GHC.Types.Bool"
28:14-28:39::lq_anf$##7205759403792830539 :: "GHC.Types.Bool"
28:19-28:36::_ :: "{v : GHC.Types.Bool | v == vleq_ x p}"
28:21-28:22::x :: "a"
28:32-28:33::x :: "{VV : a | VV == x}"
28:34-28:35::p :: "{VV : a | VV == p}"
28:37-28:39::ys :: "{v : (VList.VList a) | v == ys}"
28:43-28:60::lq_anf$##7205759403792830541 :: "GHC.Types.Bool"
28:48-28:57::lq_anf$##7205759403792830540 :: "a -> GHC.Types.Bool"
28:55-28:56::p :: "{VV : a | VV == p}"
28:58-28:60::zs :: "{v : (VList.VList a) | v == zs}"
29:12-29:48::lq_anf$##7205759403792830546 :: "a (VList.VList b)"
29:13-29:24::lq_anf$##7205759403792830544 :: "{v : a (VList.VList b) | v == permute iMonadPlus ys\n                         && v == permute_ ys}"
29:22-29:24::ys :: "{v : (VList.VList a) | v == ys}"
29:29-29:47::lq_anf$##7205759403792830545 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
29:38-29:47::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
30:21-30:24::ys' :: "(VList.VList a)"
31:22-31:58::lq_anf$##7205759403792830549 :: "a (VList.VList b)"
31:23-31:34::lq_anf$##7205759403792830547 :: "{v : a (VList.VList b) | v == permute iMonadPlus zs\n                         && v == permute_ zs}"
31:32-31:34::zs :: "{v : (VList.VList a) | v == zs}"
31:39-31:57::lq_anf$##7205759403792830548 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
31:48-31:57::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
32:31-32:34::zs' :: "(VList.VList a)"
33:39-33:81::lq_anf$##7205759403792830552 :: "(VList.VList a)"
33:48-33:51::ys' :: "{v : (VList.VList a) | v == ys'}"
33:52-33:80::lq_anf$##7205759403792830551 :: "(VList.VList a)"
33:61-33:75::lq_anf$##7205759403792830550 :: "{v : (VList.VList a) | v == vsingleton p\n                       && v == VCons p VNil}"
33:73-33:74::p :: "{VV : a | VV == p}"
33:76-33:79::zs' :: "{v : (VList.VList a) | v == zs'}"
38:5-38:10::vseq_ :: "forall a b .\nx1:c a -> x2:c b -> {v : c b | v == vseq iMonad_ x1 x2\n                               && v == vbind iMonad_ x1 (vconst x2)}"
38:13-38:25::_ :: "x1:a b -> x2:a c -> {v : a c | v == vseq iMonad_ x1 x2\n                               && v == vbind iMonad_ x1 (vconst x2)}"
38:18-38:25::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
39:5-39:9::>> :: "{VV : forall a b .\n      x1:c a -> x2:c b -> {v : c b | v == vseq iMonad_ x1 x2\n                                     && v == vbind iMonad_ x1 (vconst x2)} | VV == vseq iMonad_\n                                                                             && VV == vseq_}"
39:12-39:17::_ :: "{VV : forall a b .\n      x1:c a -> x2:c b -> {v : c b | v == vseq iMonad_ x1 x2\n                                     && v == vbind iMonad_ x1 (vconst x2)} | VV == vseq iMonad_\n                                                                             && VV == vseq_}"
40:5-40:11::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
40:14-40:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
40:20-40:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
41:5-41:10::>>= :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
41:13-41:19::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
45:5-45:11::vlift_ :: "forall a . a -> b a"
45:14-45:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
45:20-45:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
46:5-46:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
46:15-46:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
46:22-46:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
48:5-48:11::split_ :: "forall a .\nx1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
48:14-48:30::_ :: "x1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
48:20-48:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
49:5-49:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
49:16-49:34::_ :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
49:24-49:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
50:5-50:11::guard_ :: "x1:GHC.Types.Bool -> {v : a () | v == guard iMonadPlus x1\n                                 && v == (if x1 then vlift (iMonad iMonadPlus) () else vmpepsilon iMonadPlus)}"
50:14-50:30::_ :: "x1:GHC.Types.Bool -> {v : a () | v == guard iMonadPlus x1\n                                 && v == (if x1 then vlift (iMonad iMonadPlus) () else vmpepsilon iMonadPlus)}"
50:20-50:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
51:5-51:13::guardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
51:16-51:34::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
51:24-51:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
53:5-53:10::vleq_ :: "a -> a -> GHC.Types.Bool"
53:13-53:26::_ :: "a -> a -> GHC.Types.Bool"
53:18-53:26::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
54:5-54:14::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
54:17-54:34::_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
54:26-54:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
62:1-62:5::tmp1 :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:b -> x3:(VList.VList b) -> {VV : a (VList.VList b) | VV == tmp1 x1 x2 x3\n                                                                                                                 && VV == vbind (iMonad (lqdc##$select x1)) (permute (lqdc##$select x1) (VCons x2 x3)) (guardBy (lqdc##$select x1) (isSorted (lqdc##$select x1)))}"
62:29-62:30::p :: "a"
62:31-62:33::xs :: "(VList.VList a)"
63:3-63:24::lq_anf$##7205759403792830533 :: "a (VList.VList b)"
63:12-63:24::lq_anf$##7205759403792830532 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == p\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons p xs}"
63:19-63:20::p :: "{VV : a | VV == p}"
63:21-63:23::xs :: "{v : (VList.VList a) | v == xs}"
63:29-63:47::lq_anf$##7205759403792830534 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
63:38-63:47::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
77:5-77:11::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
77:14-77:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
77:20-77:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
78:5-78:10::>>= :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
78:13-78:19::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
83:5-83:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
83:15-83:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
83:22-83:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
86:5-86:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
86:16-86:34::_ :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
86:24-86:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
88:5-88:13::guardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
88:16-88:34::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
88:24-88:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
91:5-91:14::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
91:17-91:34::_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
91:26-91:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
135:1-135:16::tmp_permute_Nil :: "forall a .\nx1:(VMonadPlus.VMonadPlus a) -> {VV : () | permute x1 VNil == vlift (iMonad x1) VNil}"
135:17-135:27::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
136:3-136:16::lq_anf$##7205759403792830558 :: "a (VList.VList (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))"
136:12-136:16::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
137:9-137:20::lq_anf$##7205759403792830560 :: "a (VList.VList (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))"
137:16-137:20::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
138:9-138:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
140:5-140:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
140:16-140:34::_ :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
140:24-140:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
141:5-141:11::vlift_ :: "forall a . a -> b a"
141:14-141:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
141:20-141:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
142:5-142:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
142:15-142:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
142:22-142:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
218:1-218:33::slowsort_VCons_expansion_correct :: "forall a b .\n((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> b -> (VList.VList b) -> ()"
218:57-218:58::p :: "a"
218:59-218:61::xs :: "(VList.VList a)"
219:3-219:25::lq_anf$##7205759403792830515 :: "a (VList.VList b)"
219:13-219:25::lq_anf$##7205759403792830514 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == p\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons p xs}"
219:20-219:21::p :: "{VV : a | VV == p}"
219:22-219:24::xs :: "{v : (VList.VList a) | v == xs}"
221:9-221:57::lq_anf$##7205759403792830519 :: "a (VList.VList b)"
221:10-221:18::_ :: "{VV : forall a .\n      x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1} | VV == permute iMonadPlus\n                                                                                   && VV == permute_}"
221:23-221:43::lq_anf$##7205759403792830517 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
221:33-221:42::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
221:45-221:57::lq_anf$##7205759403792830518 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == p\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons p xs}"
221:52-221:53::p :: "{VV : a | VV == p}"
221:54-221:56::xs :: "{v : (VList.VList a) | v == xs}"
223:9-223:70::lq_anf$##7205759403792830524 :: "a (VList.VList b)"
223:21-223:27::vbind_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
223:28-223:36::_ :: "{VV : forall a .\n      x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1} | VV == permute iMonadPlus\n                                                                                   && VV == permute_}"
223:37-223:57::lq_anf$##7205759403792830522 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
223:47-223:56::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
223:58-223:70::lq_anf$##7205759403792830523 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == p\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons p xs}"
223:65-223:66::p :: "{VV : a | VV == p}"
223:67-223:69::xs :: "{v : (VList.VList a) | v == xs}"
225:9-225:30::lq_anf$##7205759403792830527 :: "a (VList.VList b)"
225:18-225:30::lq_anf$##7205759403792830526 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == p\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons p xs}"
225:25-225:26::p :: "{VV : a | VV == p}"
225:27-225:29::xs :: "{v : (VList.VList a) | v == xs}"
225:35-225:53::lq_anf$##7205759403792830528 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
225:44-225:53::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
226:9-226:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
230:5-230:11::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
230:14-230:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
230:20-230:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
231:5-231:10::>>= :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
231:13-231:19::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_\n                                              && VV == vbind_}"
233:5-233:10::>=> :: "{VV : forall a b c .\n      x1:(a -> d b) -> x3:(b -> d c) -> x5:a -> {v : d c | v == kleisli iMonad_ x1 x3 x5\n                                                           && v == raw_kleisli (vbind iMonad_) x1 x3 x5} | VV == kleisli iMonad_\n                                                                                                           && VV == kleisli_}"
233:13-233:21::_ :: "{VV : forall a b c .\n      x1:(a -> d b) -> x3:(b -> d c) -> x5:a -> {v : d c | v == kleisli iMonad_ x1 x3 x5\n                                                           && v == raw_kleisli (vbind iMonad_) x1 x3 x5} | VV == kleisli iMonad_\n                                                                                                           && VV == kleisli_}"
234:5-234:13::kleisli_ :: "forall a b c .\nx1:(a -> d b) -> x3:(b -> d c) -> x5:a -> {v : d c | v == kleisli iMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind iMonad_) x1 x3 x5}"
234:16-234:31::_ :: "x1:(a -> b c) -> x3:(c -> b d) -> x5:a -> {v : b d | v == kleisli iMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind iMonad_) x1 x3 x5}"
234:24-234:31::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
236:5-236:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
236:15-236:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
236:22-236:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
239:5-239:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
239:16-239:34::_ :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
239:24-239:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
241:5-241:13::guardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
241:16-241:34::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
241:24-241:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
244:5-244:14::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
244:17-244:34::_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
244:26-244:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
246:5-246:14::slowsort_ :: "(VList.VList a) -> b (VList.VList a)"
246:17-246:48::_ :: "(VList.VList a) -> b (VList.VList a)"
246:26-246:48::lq_anf$##7205759403792830513 :: "{v : ((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) | x_Tuple22 v == iOrdered\n                                                          && x_Tuple21 v == iMonadPlus\n                                                          && lqdc##$select v == iOrdered\n                                                          && lqdc##$select v == iMonadPlus\n                                                          && snd v == iOrdered\n                                                          && fst v == iMonadPlus\n                                                          && v == (,) iMonadPlus iOrdered}"
246:27-246:37::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
246:39-246:47::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
347:1-347:24::partition_specification :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:b -> x3:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == partition_specification x1 x2 x3\n                                                                                                                                    && VV == vbind (iMonad (lqdc##$select x1)) (split (lqdc##$select x1) x3) (guardBy (lqdc##$select x1) lam ds_d9AJ : (Tuple (VList.VList a##a9mN) (VList.VList a##a9mN)) . isSortedBetween (lqdc##$select x1) x2 ((,) (lqdc##$select ds_d9AJ) (lqdc##$select ds_d9AJ)))}"
347:48-347:49::x :: "a"
347:50-347:52::xs :: "(VList.VList a)"
349:5-349:16::lq_anf$##7205759403792830563 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split iMonadPlus xs\n                                            && v == split_ xs}"
349:13-349:15::xs :: "{v : (VList.VList a) | v == xs}"
350:5-350:58::lq_anf$##7205759403792830567 :: "((VList.VList a), (VList.VList a)) -> b ((VList.VList a), (VList.VList a))"
350:15-350:57::lq_anf$##7205759403792830564 :: "((VList.VList a), (VList.VList a))"
350:29-350:56::isSortedBetween_ :: "x1:a -> x2:((VList.VList a), (VList.VList a)) -> {v : GHC.Types.Bool | v == isSortedBetween iOrdered x1 x2\n                                                                       && v == isSorted iOrdered (vappend (lqdc##$select x2) (vappend (vsingleton x1) (lqdc##$select x2)))}"
350:46-350:47::x :: "{VV : a | VV == x}"
350:48-350:56::lq_anf$##7205759403792830565 :: "{v : ((VList.VList a), (VList.VList a)) | x_Tuple22 v == zs\n                                          && x_Tuple21 v == ys\n                                          && lqdc##$select v == zs\n                                          && lqdc##$select v == ys\n                                          && snd v == zs\n                                          && fst v == ys\n                                          && v == (,) ys zs}"
350:49-350:51::ys :: "{v : (VList.VList a) | v == ys}"
350:53-350:55::zs :: "{v : (VList.VList a) | v == zs}"
352:5-352:11::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
352:14-352:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
352:20-352:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
353:5-353:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
353:15-353:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
353:22-353:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
354:5-354:21::isSortedBetween_ :: "x1:a -> x2:((VList.VList a), (VList.VList a)) -> {v : GHC.Types.Bool | v == isSortedBetween iOrdered x1 x2\n                                                                       && v == isSorted iOrdered (vappend (lqdc##$select x2) (vappend (vsingleton x1) (lqdc##$select x2)))}"
354:24-354:48::_ :: "x1:a -> x2:((VList.VList a), (VList.VList a)) -> {v : GHC.Types.Bool | v == isSortedBetween iOrdered x1 x2\n                                                                       && v == isSorted iOrdered (vappend (lqdc##$select x2) (vappend (vsingleton x1) (lqdc##$select x2)))}"
354:40-354:48::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
355:5-355:11::split_ :: "forall a .\nx1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
355:14-355:30::_ :: "x1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
355:20-355:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
356:5-356:13::guardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
356:16-356:34::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
356:24-356:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
371:1-371:11::partition' :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:b -> x3:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == partition' x1 x2 x3\n                                                                                                                                    && VV == vlift (iMonad (lqdc##$select x1)) (partition (lqdc##$select x1) x2 x3)}"
371:35-371:36::x :: "a"
371:37-371:39::xs :: "(VList.VList a)"
371:42-371:66::vlift_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_\n                            && VV == vlift_}"
371:49-371:66::lq_anf$##7205759403792830598 :: "{v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x xs\n                                          && v == partition_ x xs}"
371:61-371:62::x :: "{VV : a | VV == x}"
371:63-371:65::xs :: "{v : (VList.VList a) | v == xs}"
373:5-373:11::vlift_ :: "forall a . a -> b a"
373:14-373:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
373:20-373:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
374:5-374:15::partition_ :: "x1:a -> x2:(VList.VList a) -> {v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x1 x2}"
374:18-374:36::partition :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> {VV : ((VList.VList a), (VList.VList a)) | VV == partition x1 x2 x3}"
374:28-374:36::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
375:5-375:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
375:15-375:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
375:22-375:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
385:1-385:32::partition_specification_correct :: "forall a b .\n((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> b -> (VList.VList b) -> ()"
385:56-385:57::x :: "a"
385:58-385:60::xs :: "(VList.VList a)"
385:63-385:65::() :: "{v : () | v == ()}"
404:1-404:30::quicksort_VCons_specification :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:b -> x3:(VList.VList b) -> {VV : a (VList.VList b) | VV == quicksort_VCons_specification x1 x2 x3\n                                                                                                                 && VV == vbind (iMonad (lqdc##$select x1)) (vlift (iMonad (lqdc##$select x1)) (partition (lqdc##$select x1) x2 x3)) lam ds_d9Ah : (Tuple (VList.VList a##a9ld) (VList.VList a##a9ld)) . vbind (iMonad (lqdc##$select x1)) (slowsort ((,) (lqdc##$select x1) (lqdc##$select x1)) (lqdc##$select ds_d9Ah)) lam ys'##a9gw : (VList.VList a##a9ld) . vbind (iMonad (lqdc##$select x1)) (slowsort ((,) (lqdc##$select x1) (lqdc##$select x1)) (lqdc##$select ds_d9Ah)) lam zs'##a9gx : (VList.VList a##a9ld) . vlift (iMonad (lqdc##$select x1)) (vappend ys'##a9gw (vappend (vsingleton x2) zs'##a9gx))}"
404:54-404:55::x :: "a"
404:56-404:58::xs :: "(VList.VList a)"
406:5-406:31::lq_anf$##7205759403792830587 :: "a ((VList.VList b), (VList.VList b))"
406:13-406:30::lq_anf$##7205759403792830586 :: "{v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x xs\n                                          && v == partition_ x xs}"
406:25-406:26::x :: "{VV : a | VV == x}"
406:27-406:29::xs :: "{v : (VList.VList a) | v == xs}"
409:11-409:25::lq_anf$##7205759403792830589 :: "{v : a (VList.VList b) | v == slowsort_ ys}"
409:22-409:24::ys :: "{v : (VList.VList a) | v == ys}"
410:14-410:17::ys' :: "(VList.VList a)"
412:17-412:31::lq_anf$##7205759403792830590 :: "{v : a (VList.VList b) | v == slowsort_ zs}"
412:28-412:30::zs :: "{v : (VList.VList a) | v == zs}"
413:17-413:76::vlift_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_\n                            && VV == vlift_}"
413:19-413:22::zs' :: "(VList.VList a)"
413:33-413:75::lq_anf$##7205759403792830593 :: "(VList.VList a)"
413:42-413:45::ys' :: "{v : (VList.VList a) | v == ys'}"
413:46-413:74::lq_anf$##7205759403792830592 :: "(VList.VList a)"
413:55-413:69::lq_anf$##7205759403792830591 :: "{v : (VList.VList a) | v == vsingleton x\n                       && v == VCons x VNil}"
413:67-413:68::x :: "{VV : a | VV == x}"
413:70-413:73::zs' :: "{v : (VList.VList a) | v == zs'}"
417:5-417:14::slowsort_ :: "(VList.VList a) -> b (VList.VList a)"
417:17-417:48::_ :: "(VList.VList a) -> b (VList.VList a)"
417:26-417:48::lq_anf$##7205759403792830585 :: "{v : ((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) | x_Tuple22 v == iOrdered\n                                                          && x_Tuple21 v == iMonadPlus\n                                                          && lqdc##$select v == iOrdered\n                                                          && lqdc##$select v == iMonadPlus\n                                                          && snd v == iOrdered\n                                                          && fst v == iMonadPlus\n                                                          && v == (,) iMonadPlus iOrdered}"
417:27-417:37::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
417:39-417:47::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
418:5-418:15::partition_ :: "x1:a -> x2:(VList.VList a) -> {v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x1 x2}"
418:18-418:36::partition :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> {VV : ((VList.VList a), (VList.VList a)) | VV == partition x1 x2 x3}"
418:28-418:36::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
419:5-419:11::vlift_ :: "forall a . a -> b a"
419:14-419:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
419:20-419:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
420:5-420:11::vbind_ :: "forall a b . c a -> (a -> c b) -> c b"
420:14-420:27::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
420:20-420:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
421:5-421:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
421:15-421:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
421:22-421:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
434:1-434:19::divide_and_conquer :: "forall a b .\n((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> b -> (VList.VList b) -> ()"
434:43-434:44::x :: "a"
434:45-434:47::xs :: "(VList.VList a)"
434:50-434:52::() :: "{v : () | v == ()}"
440:1-440:10::partition :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> {VV : ((VList.VList a), (VList.VList a)) | VV == partition x1 x2 x3}"
440:11-440:19::iOrdered :: "(VOrdered.VOrdered a)"
440:20-440:22::x' :: "a"
440:30-440:42::lq_anf$##7205759403792830572 :: "{v : (VList.VList a) | vlength v == Zero\n                       && v == VNil}"
440:31-440:35::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
440:37-440:41::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
442:8-442:10::ys :: "(VList.VList a)"
442:12-442:14::zs :: "(VList.VList a)"
442:18-442:41::partition :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> {VV : ((VList.VList a), (VList.VList a)) | VV == partition x1 x2 x3}"
442:28-442:36::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
442:37-442:38::x :: "{VV : a | VV == x}"
442:39-442:41::xs :: "{v : (VList.VList a) | v == xs}"
443:10-443:20::lq_anf$##7205759403792830573 :: "{v : GHC.Types.Bool | v == vleq_ x x'}"
443:16-443:17::x :: "{VV : a | VV == x}"
443:18-443:20::x' :: "{VV : a | VV == x'}"
443:26-443:42::(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && lqdc##$select v == x1\n                                                                                           && snd v == x2\n                                                                                           && fst v == x1\n                                                                                           && v == (,) x1 x2} | VV == (,)}"
443:27-443:37::lq_anf$##7205759403792830576 :: "{v : (VList.VList a) | VCons##lqdc##$select v == ys\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength ys)\n                       && v == VCons x ys}"
443:33-443:34::x :: "{VV : a | VV == x}"
443:35-443:37::ys :: "{v : (VList.VList a) | v == ys}"
443:39-443:41::zs :: "{v : (VList.VList a) | v == zs}"
443:48-443:64::(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && lqdc##$select v == x1\n                                                                                           && snd v == x2\n                                                                                           && fst v == x1\n                                                                                           && v == (,) x1 x2} | VV == (,)}"
443:49-443:51::ys :: "{v : (VList.VList a) | v == ys}"
443:53-443:63::lq_anf$##7205759403792830575 :: "{v : (VList.VList a) | VCons##lqdc##$select v == zs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength zs)\n                       && v == VCons x zs}"
443:59-443:60::x :: "{VV : a | VV == x}"
443:61-443:63::zs :: "{v : (VList.VList a) | v == zs}"
445:5-445:10::vleq_ :: "a -> a -> GHC.Types.Bool"
445:13-445:26::_ :: "a -> a -> GHC.Types.Bool"
445:18-445:26::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
454:1-454:10::quicksort :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:(VList.VList a) -> {VV : (VList.VList a) | VV == quicksort x1 x2}"
454:11-454:19::iOrdered :: "(VOrdered.VOrdered a)"
454:27-454:31::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
456:8-456:10::ys :: "(VList.VList a)"
456:18-456:33::lq_anf$##7205759403792830578 :: "{v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x xs\n                                          && v == partition_ x xs}"
456:29-456:30::x :: "{VV : a | VV == x}"
456:31-456:33::xs :: "{v : (VList.VList a) | v == xs}"
457:15-457:30::lq_anf$##7205759403792830580 :: "{v : (VList.VList a) | v == quicksort iOrdered ys\n                       && v == quicksort_ ys}"
457:27-457:29::ys :: "{v : (VList.VList a) | v == ys}"
457:31-457:71::lq_anf$##7205759403792830583 :: "(VList.VList a)"
457:40-457:54::lq_anf$##7205759403792830581 :: "{v : (VList.VList a) | v == vsingleton x\n                       && v == VCons x VNil}"
457:52-457:53::x :: "{VV : a | VV == x}"
457:55-457:70::lq_anf$##7205759403792830582 :: "{v : (VList.VList a) | v == quicksort iOrdered ys\n                       && v == quicksort_ ys}"
457:67-457:69::ys :: "{v : (VList.VList a) | v == ys}"
459:5-459:15::partition_ :: "x1:a -> x2:(VList.VList a) -> {v : ((VList.VList a), (VList.VList a)) | v == partition iOrdered x1 x2}"
459:18-459:36::partition :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> {VV : ((VList.VList a), (VList.VList a)) | VV == partition x1 x2 x3}"
459:28-459:36::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
460:5-460:15::quicksort_ :: "x1:(VList.VList a) -> {v : (VList.VList a) | v == quicksort iOrdered x1}"
460:18-460:36::quicksort :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:(VList.VList a) -> {VV : (VList.VList a) | VV == quicksort x1 x2}"
460:28-460:36::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"