1:1-1:1::$trModule :: "GHC.Types.Module"
14:1-14:6::vzero :: "{VV : VNat.VNat | VV == Zero}"
18:1-18:5::vone :: "{VV : VNat.VNat | VV == Suc Zero}"
18:12-18:16::Zero :: "{v : VNat.VNat | v == Zero}"
22:1-22:5::vtwo :: "{VV : VNat.VNat | VV == Suc (Suc Zero)}"
22:12-22:16::vone :: "{v : VNat.VNat | v == Suc Zero\n                 && v == vone}"
27:1-27:5::vadd :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : VNat.VNat | VV == vadd x1 x2}"
27:11-27:12::n :: "VNat.VNat"
27:15-27:16::n :: "{v : VNat.VNat | v == n}"
28:18-28:32::Suc :: "x1:VNat.VNat -> {v : VNat.VNat | lqdc##$select v == x1\n                                 && v == Suc x1}"
28:22-28:32::lq_anf$##7205759403792808531 :: "{v : VNat.VNat | v == vadd m n}"
28:28-28:29::m :: "{v : VNat.VNat | v == m}"
28:30-28:31::n :: "{v : VNat.VNat | v == n}"
36:1-36:20::vadd_identity_right :: "x1:VNat.VNat -> {VV : () | vadd x1 Zero == x1}"
36:28-36:30::() :: "{v : () | v == ()}"
41:3-41:20::lq_anf$##7205759403792808534 :: "VNat.VNat"
41:8-41:15::lq_anf$##7205759403792808533 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
41:13-41:14::n :: "{v : VNat.VNat | v == n}"
41:16-41:20::Zero :: "{v : VNat.VNat | v == Zero}"
42:9-42:26::lq_anf$##7205759403792808536 :: "VNat.VNat"
42:13-42:26::lq_anf$##7205759403792808535 :: "{v : VNat.VNat | v == vadd n Zero}"
42:19-42:20::n :: "{v : VNat.VNat | v == n}"
42:21-42:25::Zero :: "{v : VNat.VNat | v == Zero}"
43:9-43:40::lq_anf$##7205759403792808540 :: "VNat.VNat"
43:10-43:15::lq_anf$##7205759403792808538 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
43:14-43:15::n :: "{v : VNat.VNat | v == n}"
43:18-43:39::lq_anf$##7205759403792808539 :: "{v : () | vadd n Zero == n\n          && v == vadd_identity_right n}"
43:38-43:39::n :: "{v : VNat.VNat | v == n}"
44:9-44:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
51:1-51:15::vadd_Suc_right :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : () | vadd x1 (Suc x2) == Suc (vadd x1 x2)}"
51:21-51:22::n :: "VNat.VNat"
52:3-52:20::lq_anf$##7205759403792808544 :: "VNat.VNat"
52:8-52:12::Zero :: "{v : VNat.VNat | v == Zero}"
52:13-52:20::lq_anf$##7205759403792808543 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
52:18-52:19::n :: "{v : VNat.VNat | v == n}"
53:9-53:14::lq_anf$##7205759403792808545 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
53:13-53:14::n :: "{v : VNat.VNat | v == n}"
53:17-53:44::lq_anf$##7205759403792808548 :: "()"
53:37-53:44::lq_anf$##7205759403792808547 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
53:42-53:43::n :: "{v : VNat.VNat | v == n}"
54:9-54:52::lq_anf$##7205759403792808553 :: "VNat.VNat"
54:10-54:27::lq_anf$##7205759403792808551 :: "VNat.VNat"
54:14-54:27::lq_anf$##7205759403792808550 :: "{v : VNat.VNat | v == vadd Zero n}"
54:20-54:24::Zero :: "{v : VNat.VNat | v == Zero}"
54:25-54:26::n :: "{v : VNat.VNat | v == n}"
54:30-54:51::lq_anf$##7205759403792808552 :: "{v : () | vadd n Zero == n\n          && v == vadd_identity_right n}"
54:50-54:51::n :: "{v : VNat.VNat | v == n}"
55:9-55:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
57:3-57:23::lq_anf$##7205759403792808557 :: "VNat.VNat"
57:8-57:15::lq_anf$##7205759403792808555 :: "{v : VNat.VNat | lqdc##$select v == m\n                 && v == Suc m}"
57:13-57:14::m :: "{v : VNat.VNat | v == m}"
57:16-57:23::lq_anf$##7205759403792808556 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
57:21-57:22::n :: "{v : VNat.VNat | v == n}"
58:9-58:29::lq_anf$##7205759403792808560 :: "VNat.VNat"
58:13-58:29::lq_anf$##7205759403792808559 :: "VNat.VNat"
58:19-58:20::m :: "{v : VNat.VNat | v == m}"
58:21-58:28::lq_anf$##7205759403792808558 :: "{v : VNat.VNat | lqdc##$select v == n\n                 && v == Suc n}"
58:26-58:27::n :: "{v : VNat.VNat | v == n}"
59:9-59:52::lq_anf$##7205759403792808566 :: "VNat.VNat"
59:10-59:30::lq_anf$##7205759403792808564 :: "VNat.VNat"
59:14-59:30::lq_anf$##7205759403792808563 :: "VNat.VNat"
59:19-59:29::lq_anf$##7205759403792808562 :: "{v : VNat.VNat | v == vadd m n}"
59:25-59:26::m :: "{v : VNat.VNat | v == m}"
59:27-59:28::n :: "{v : VNat.VNat | v == n}"
59:33-59:51::lq_anf$##7205759403792808565 :: "{v : () | vadd m (Suc n) == Suc (vadd m n)\n          && v == vadd_Suc_right m n}"
59:48-59:49::m :: "{v : VNat.VNat | v == m}"
59:50-59:51::n :: "{v : VNat.VNat | v == n}"
60:9-60:29::lq_anf$##7205759403792808570 :: "VNat.VNat"
60:13-60:29::lq_anf$##7205759403792808569 :: "VNat.VNat"
60:19-60:26::lq_anf$##7205759403792808568 :: "{v : VNat.VNat | lqdc##$select v == m\n                 && v == Suc m}"
60:24-60:25::m :: "{v : VNat.VNat | v == m}"
60:27-60:28::n :: "{v : VNat.VNat | v == n}"
61:9-61:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
69:1-69:19::vadd_identity_left :: "x1:VNat.VNat -> {VV : () | vadd Zero x1 == x1}"
77:1-77:14::vadd_identity :: "x1:VNat.VNat -> {VV : () | vadd Zero x1 == x1\n                           && vadd x1 Zero == x1}"
77:15-77:16::n :: "VNat.VNat"
77:39-77:40::n :: "{v : VNat.VNat | v == n}"
84:1-84:17::vadd_commutative :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : () | vadd x1 x2 == vadd x2 x1}"
84:23-84:24::n :: "VNat.VNat"
85:3-85:14::lq_anf$##7205759403792808573 :: "{v : VNat.VNat | v == vadd Zero n}"
85:8-85:12::Zero :: "{v : VNat.VNat | v == Zero}"
85:13-85:14::n :: "{v : VNat.VNat | v == n}"
86:9-86:10::n :: "{v : VNat.VNat | v == n}"
86:13-86:28::lq_anf$##7205759403792808575 :: "{v : () | vadd Zero n == n\n          && vadd n Zero == n\n          && v == vadd_identity n}"
86:27-86:28::n :: "{v : VNat.VNat | v == n}"
87:9-87:20::lq_anf$##7205759403792808577 :: "{v : VNat.VNat | v == vadd n Zero}"
87:14-87:15::n :: "{v : VNat.VNat | v == n}"
87:16-87:20::Zero :: "{v : VNat.VNat | v == Zero}"
87:23-87:38::lq_anf$##7205759403792808579 :: "{v : () | vadd Zero n == n\n          && vadd n Zero == n\n          && v == vadd_identity n}"
87:37-87:38::n :: "{v : VNat.VNat | v == n}"
88:9-88:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
90:3-90:17::lq_anf$##7205759403792808582 :: "VNat.VNat"
90:8-90:15::lq_anf$##7205759403792808581 :: "{v : VNat.VNat | lqdc##$select v == m\n                 && v == Suc m}"
90:13-90:14::m :: "{v : VNat.VNat | v == m}"
90:16-90:17::n :: "{v : VNat.VNat | v == n}"
91:9-91:23::lq_anf$##7205759403792808584 :: "VNat.VNat"
91:13-91:23::lq_anf$##7205759403792808583 :: "{v : VNat.VNat | v == vadd m n}"
91:19-91:20::m :: "{v : VNat.VNat | v == m}"
91:21-91:22::n :: "{v : VNat.VNat | v == n}"
92:9-92:48::lq_anf$##7205759403792808589 :: "VNat.VNat"
92:10-92:24::lq_anf$##7205759403792808587 :: "VNat.VNat"
92:14-92:24::lq_anf$##7205759403792808586 :: "{v : VNat.VNat | v == vadd n m}"
92:20-92:21::n :: "{v : VNat.VNat | v == n}"
92:22-92:23::m :: "{v : VNat.VNat | v == m}"
92:27-92:47::lq_anf$##7205759403792808588 :: "{v : () | vadd m n == vadd n m\n          && v == vadd_commutative m n}"
92:44-92:45::m :: "{v : VNat.VNat | v == m}"
92:46-92:47::n :: "{v : VNat.VNat | v == n}"
93:9-93:46::lq_anf$##7205759403792808594 :: "VNat.VNat"
93:10-93:24::lq_anf$##7205759403792808592 :: "VNat.VNat"
93:15-93:16::n :: "{v : VNat.VNat | v == n}"
93:17-93:24::lq_anf$##7205759403792808591 :: "{v : VNat.VNat | lqdc##$select v == m\n                 && v == Suc m}"
93:22-93:23::m :: "{v : VNat.VNat | v == m}"
93:27-93:45::lq_anf$##7205759403792808593 :: "{v : () | vadd n (Suc m) == Suc (vadd n m)\n          && v == vadd_Suc_right n m}"
93:42-93:43::n :: "{v : VNat.VNat | v == n}"
93:44-93:45::m :: "{v : VNat.VNat | v == m}"
94:9-94:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
101:1-101:17::vadd_associative :: "x1:VNat.VNat -> x2:VNat.VNat -> x3:VNat.VNat -> {VV : () | vadd x1 (vadd x2 x3) == vadd (vadd x1 x2) x3}"
101:23-101:24::m :: "VNat.VNat"
101:25-101:26::n :: "VNat.VNat"
102:3-102:23::lq_anf$##7205759403792808598 :: "VNat.VNat"
102:8-102:12::Zero :: "{v : VNat.VNat | v == Zero}"
102:13-102:23::lq_anf$##7205759403792808597 :: "{v : VNat.VNat | v == vadd m n}"
102:19-102:20::m :: "{v : VNat.VNat | v == m}"
102:21-102:22::n :: "{v : VNat.VNat | v == n}"
103:9-103:46::lq_anf$##7205759403792808602 :: "VNat.VNat"
103:10-103:18::lq_anf$##7205759403792808599 :: "{v : VNat.VNat | v == vadd m n}"
103:15-103:16::m :: "{v : VNat.VNat | v == m}"
103:17-103:18::n :: "{v : VNat.VNat | v == n}"
103:21-103:45::lq_anf$##7205759403792808601 :: "()"
103:35-103:45::lq_anf$##7205759403792808600 :: "{v : VNat.VNat | v == vadd m n}"
103:41-103:42::m :: "{v : VNat.VNat | v == m}"
103:43-103:44::n :: "{v : VNat.VNat | v == n}"
104:9-104:49::lq_anf$##7205759403792808607 :: "VNat.VNat"
104:10-104:30::lq_anf$##7205759403792808605 :: "VNat.VNat"
104:15-104:28::lq_anf$##7205759403792808604 :: "{v : VNat.VNat | v == vadd Zero m}"
104:21-104:25::Zero :: "{v : VNat.VNat | v == Zero}"
104:26-104:27::m :: "{v : VNat.VNat | v == m}"
104:29-104:30::n :: "{v : VNat.VNat | v == n}"
104:33-104:48::lq_anf$##7205759403792808606 :: "{v : () | vadd Zero m == m\n          && vadd m Zero == m\n          && v == vadd_identity m}"
104:47-104:48::m :: "{v : VNat.VNat | v == m}"
105:9-105:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
107:3-107:26::lq_anf$##7205759403792808611 :: "VNat.VNat"
107:8-107:15::lq_anf$##7205759403792808609 :: "{v : VNat.VNat | lqdc##$select v == l\n                 && v == Suc l}"
107:13-107:14::l :: "{v : VNat.VNat | v == l}"
107:16-107:26::lq_anf$##7205759403792808610 :: "{v : VNat.VNat | v == vadd m n}"
107:22-107:23::m :: "{v : VNat.VNat | v == m}"
107:24-107:25::n :: "{v : VNat.VNat | v == n}"
108:9-108:32::lq_anf$##7205759403792808614 :: "VNat.VNat"
108:13-108:32::lq_anf$##7205759403792808613 :: "VNat.VNat"
108:19-108:20::l :: "{v : VNat.VNat | v == l}"
108:21-108:31::lq_anf$##7205759403792808612 :: "{v : VNat.VNat | v == vadd m n}"
108:27-108:28::m :: "{v : VNat.VNat | v == m}"
108:29-108:30::n :: "{v : VNat.VNat | v == n}"
109:9-109:59::lq_anf$##7205759403792808620 :: "VNat.VNat"
109:10-109:33::lq_anf$##7205759403792808618 :: "VNat.VNat"
109:14-109:33::lq_anf$##7205759403792808617 :: "VNat.VNat"
109:20-109:30::lq_anf$##7205759403792808616 :: "{v : VNat.VNat | v == vadd l m}"
109:26-109:27::l :: "{v : VNat.VNat | v == l}"
109:28-109:29::m :: "{v : VNat.VNat | v == m}"
109:31-109:32::n :: "{v : VNat.VNat | v == n}"
109:36-109:58::lq_anf$##7205759403792808619 :: "{v : () | vadd l (vadd m n) == vadd (vadd l m) n\n          && v == vadd_associative l m n}"
109:53-109:54::l :: "{v : VNat.VNat | v == l}"
109:55-109:56::m :: "{v : VNat.VNat | v == m}"
109:57-109:58::n :: "{v : VNat.VNat | v == n}"
110:9-110:32::lq_anf$##7205759403792808624 :: "VNat.VNat"
110:14-110:30::lq_anf$##7205759403792808623 :: "VNat.VNat"
110:19-110:29::lq_anf$##7205759403792808622 :: "{v : VNat.VNat | v == vadd l m}"
110:25-110:26::l :: "{v : VNat.VNat | v == l}"
110:27-110:28::m :: "{v : VNat.VNat | v == m}"
110:31-110:32::n :: "{v : VNat.VNat | v == n}"
111:9-111:32::lq_anf$##7205759403792808628 :: "VNat.VNat"
111:14-111:30::lq_anf$##7205759403792808627 :: "VNat.VNat"
111:20-111:27::lq_anf$##7205759403792808626 :: "{v : VNat.VNat | lqdc##$select v == l\n                 && v == Suc l}"
111:25-111:26::l :: "{v : VNat.VNat | v == l}"
111:28-111:29::m :: "{v : VNat.VNat | v == m}"
111:31-111:32::n :: "{v : VNat.VNat | v == n}"
112:9-112:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
117:1-117:5::vmul :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : VNat.VNat | VV == vmul x1 x2}"
117:15-117:19::Zero :: "{v : VNat.VNat | v == Zero}"
118:18-118:35::vadd :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : VNat.VNat | VV == vadd x1 x2}"
118:23-118:24::ds_d3SE :: "VNat.VNat"
118:25-118:35::lq_anf$##7205759403792808631 :: "VNat.VNat"
118:31-118:32::m :: "{v : VNat.VNat | v == m}"
118:33-118:34::ds_d3SE :: "VNat.VNat"
124:1-124:14::vmul_identity :: "x1:VNat.VNat -> {VV : () | vmul (Suc Zero) x1 == x1\n                           && vmul x1 (Suc Zero) == x1}"
124:22-124:29::trivial :: "{v : () | v == trivial}"
125:25-125:40::vmul_identity :: "x1:VNat.VNat -> {VV : () | vmul (Suc Zero) x1 == x1\n                           && vmul x1 (Suc Zero) == x1}"
125:39-125:40::n :: "{v : VNat.VNat | v == n}"
131:1-131:10::vmul_zero :: "x1:VNat.VNat -> {VV : () | vmul Zero x1 == Zero\n                           && vmul x1 Zero == Zero}"
131:18-131:20::() :: "{v : () | v == ()}"
132:21-132:32::vmul_zero :: "x1:VNat.VNat -> {VV : () | vmul Zero x1 == Zero\n                           && vmul x1 Zero == Zero}"
132:31-132:32::n :: "{v : VNat.VNat | v == n}"
141:1-141:17::vmul_commutative :: "x1:VNat.VNat -> x2:VNat.VNat -> {VV : () | vmul x1 x2 == vmul x2 x1}"
141:23-141:24::n :: "VNat.VNat"
141:27-141:38::vmul_zero :: "x1:VNat.VNat -> {VV : () | vmul Zero x1 == Zero\n                           && vmul x1 Zero == Zero}"
141:37-141:38::n :: "{v : VNat.VNat | v == n}"
142:27-142:38::vmul_zero :: "x1:VNat.VNat -> {VV : () | vmul Zero x1 == Zero\n                           && vmul x1 Zero == Zero}"
142:37-142:38::ds_d3Rf :: "VNat.VNat"
143:36-143:38::() :: "{v : () | v == ()}"
167:1-167:18::vmul_distributive :: "x1:VNat.VNat -> x2:VNat.VNat -> x3:VNat.VNat -> {VV : () | vmul x1 (vadd x2 x3) == vadd (vmul x1 x2) (vmul x1 x3)}"
167:19-167:20::l :: "VNat.VNat"
167:21-167:22::m :: "VNat.VNat"
167:23-167:24::n :: "VNat.VNat"