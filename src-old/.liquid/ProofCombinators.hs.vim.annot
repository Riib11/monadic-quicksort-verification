1:1-1:1::ProofCombinators.$trModule :: "GHC.Types.Module"
46:1-46:8::ProofCombinators.toProof :: "forall a . a -> ()"
55:1-55:8::ProofCombinators.trivial :: "()"
59:1-59:12::ProofCombinators.unreachable :: "()"
71:1-71:13::GHC.Tuple.() :: "{v : () | v == ()}"
71:3-71:6::ProofCombinators.*** :: "forall a .\na -> x2:ProofCombinators.QED -> {VV : () | (isAdmit x2 => false)\n                                           && (not (isAdmit x2) => true)}"
100:1-100:13::y :: "{VV : a | VV == y}"
100:3-100:6::ProofCombinators.=== :: "forall a .\nx1:a -> x2:{VV : a | VV == x1} -> {VV : a | VV == x1\n                                            && VV == x2}"
100:7-100:8::y :: "a"
105:1-105:13::y :: "{VV : a | VV == y}"
105:3-105:6::ProofCombinators.=<= :: "forall a . x1:a -> x2:{VV : a | x1 <= VV} -> {VV : a | VV == x2}"
105:7-105:8::y :: "a"
110:1-110:13::y :: "{VV : a | VV == y}"
110:3-110:6::ProofCombinators.=>= :: "forall a . x1:a -> x2:{VV : a | x1 >= VV} -> {VV : a | VV == x2}"
110:7-110:8::y :: "a"
121:1-121:2::x :: "{VV : a | papp1 pa VV}"
121:3-121:4::ProofCombinators.? :: "forall a b <pa :: a -> Bool, pb :: b -> Bool>.\n{VV : a<pa> | true} -> {VV : b<pb> | true} -> {VV : a<pa> | true}"
133:1-133:6::ProofCombinators.==! :: "forall a .\nx1:a -> x2:a -> {VV : a | VV == x1\n                          && VV == x2}"
133:9-133:10::y :: "a"
164:1-164:2::x :: "()"
164:3-164:6::ProofCombinators.&&& :: "() -> () -> ()"
169:1-169:10::ProofCombinators.withProof :: "forall a b . x1:a -> b -> {VV : a | VV == x1}"
169:11-169:12::x :: "a"
173:1-173:11::ProofCombinators.impossible :: "forall a b . {VV : a | false} -> b"