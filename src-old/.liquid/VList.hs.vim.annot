1:1-1:1::$trModule :: "GHC.Types.Module"
23:1-23:8::vlength :: "forall a .\nx1:(VList.VList a) -> {VV : VNat.VNat | VV == vlength x1}"
23:16-23:20::Zero :: "{v : VNat.VNat | v == Zero}"
24:24-24:40::Suc :: "x1:VNat.VNat -> {v : VNat.VNat | lqdc##$select v == x1\n                                 && v == Suc x1}"
24:28-24:40::lq_anf$##7205759403792810682 :: "{v : VNat.VNat | v == vlength xs}"
24:37-24:39::xs :: "{v : (VList.VList a) | v == xs}"
29:1-29:11::vsingleton :: "forall a .\nx1:a -> {VV : (VList.VList a) | VV == vsingleton x1\n                                && VV == VCons x1 VNil}"
29:12-29:13::x :: "a"
29:22-29:23::x :: "{VV : a | VV == x}"
29:24-29:28::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
34:1-34:8::vappend :: "forall a .\nx1:(VList.VList a) -> x2:(VList.VList a) -> {VV : (VList.VList a) | VV == vappend x1 x2}"
34:14-34:16::ys :: "(VList.VList a)"
34:19-34:21::ys :: "{v : (VList.VList a) | v == ys}"
35:27-35:50::VCons :: "{VV : forall a .\n      x1:a -> x2:(VList.VList a) -> {v : (VList.VList a) | VCons##lqdc##$select v == x2\n                                                           && VCons##lqdc##$select v == x1\n                                                           && vlength v == Suc (vlength x2)\n                                                           && v == VCons x1 x2} | VV == VCons}"
35:33-35:34::x :: "{VV : a | VV == x}"
35:35-35:50::lq_anf$##7205759403792810685 :: "{v : (VList.VList a) | v == vappend xs ys}"
35:44-35:46::xs :: "{v : (VList.VList a) | v == xs}"
35:47-35:49::ys :: "{v : (VList.VList a) | v == ys}"
44:1-44:20::vappend_associative :: "forall a .\nx1:(VList.VList a) -> x2:(VList.VList a) -> x3:(VList.VList a) -> {VV : () | vappend x1 (vappend x2 x3) == vappend (vappend x1 x2) x3}"
51:1-51:19::iSemigroup_vappend :: "forall a . (VSemigroup.VSemigroup (VList.VList a))"
52:20-52:27::vappend :: "forall a .\nx1:(VList.VList a) -> x2:(VList.VList a) -> {VV : (VList.VList a) | VV == vappend x1 x2}"
52:46-52:65::_ :: "{VV : forall a .\n      x1:(VList.VList a) -> x2:(VList.VList a) -> x3:(VList.VList a) -> {v : () | vappend x1 (vappend x2 x3) == vappend (vappend x1 x2) x3} | VV == vappend_associative}"
61:1-61:17::vappend_identity :: "forall a .\nx1:(VList.VList a) -> {VV : () | vappend VNil x1 == x1\n                                 && vappend x1 VNil == x1}"
81:1-81:21::vappend_sums_vlength :: "forall a .\nx1:(VList.VList a) -> x2:(VList.VList a) -> {VV : () | vlength (vappend x1 x2) == vadd (vlength x1) (vlength x2)}"
81:27-81:29::ys :: "(VList.VList a)"
82:3-82:28::lq_anf$##7205759403792810693 :: "VNat.VNat"
82:11-82:28::lq_anf$##7205759403792810692 :: "(VList.VList a)"
82:20-82:24::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
82:25-82:27::ys :: "{v : (VList.VList a) | v == ys}"
83:9-83:19::lq_anf$##7205759403792810694 :: "{v : VNat.VNat | v == vlength ys}"
83:17-83:19::ys :: "{v : (VList.VList a) | v == ys}"
84:9-84:62::lq_anf$##7205759403792810700 :: "VNat.VNat"
84:10-84:32::lq_anf$##7205759403792810697 :: "VNat.VNat"
84:15-84:19::Zero :: "{v : VNat.VNat | v == Zero}"
84:20-84:32::lq_anf$##7205759403792810696 :: "{v : VNat.VNat | v == vlength ys}"
84:29-84:31::ys :: "{v : (VList.VList a) | v == ys}"
84:35-84:61::lq_anf$##7205759403792810699 :: "()"
84:49-84:61::lq_anf$##7205759403792810698 :: "{v : VNat.VNat | v == vlength ys}"
84:58-84:60::ys :: "{v : (VList.VList a) | v == ys}"
85:9-85:41::lq_anf$##7205759403792810705 :: "VNat.VNat"
85:14-85:28::lq_anf$##7205759403792810703 :: "VNat.VNat"
85:23-85:27::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
85:29-85:41::lq_anf$##7205759403792810704 :: "{v : VNat.VNat | v == vlength ys}"
85:38-85:40::ys :: "{v : (VList.VList a) | v == ys}"
86:9-86:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
88:3-88:36::lq_anf$##7205759403792810709 :: "VNat.VNat"
88:11-88:36::lq_anf$##7205759403792810708 :: "(VList.VList a)"
88:20-88:32::lq_anf$##7205759403792810707 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons x xs}"
88:27-88:28::x :: "{VV : a | VV == x}"
88:29-88:31::xs :: "{v : (VList.VList a) | v == xs}"
88:33-88:35::ys :: "{v : (VList.VList a) | v == ys}"
89:9-89:42::lq_anf$##7205759403792810712 :: "VNat.VNat"
89:17-89:42::lq_anf$##7205759403792810711 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
89:24-89:25::x :: "{VV : a | VV == x}"
89:26-89:41::lq_anf$##7205759403792810710 :: "{v : (VList.VList a) | v == vappend xs ys}"
89:35-89:37::xs :: "{v : (VList.VList a) | v == xs}"
89:38-89:40::ys :: "{v : (VList.VList a) | v == ys}"
90:9-90:38::lq_anf$##7205759403792810716 :: "VNat.VNat"
90:13-90:38::lq_anf$##7205759403792810715 :: "VNat.VNat"
90:22-90:37::lq_anf$##7205759403792810714 :: "{v : (VList.VList a) | v == vappend xs ys}"
90:31-90:33::xs :: "{v : (VList.VList a) | v == xs}"
90:34-90:36::ys :: "{v : (VList.VList a) | v == ys}"
91:9-91:76::lq_anf$##7205759403792810723 :: "VNat.VNat"
91:10-91:46::lq_anf$##7205759403792810721 :: "VNat.VNat"
91:14-91:46::lq_anf$##7205759403792810720 :: "VNat.VNat"
91:20-91:32::lq_anf$##7205759403792810718 :: "{v : VNat.VNat | v == vlength xs}"
91:29-91:31::xs :: "{v : (VList.VList a) | v == xs}"
91:33-91:45::lq_anf$##7205759403792810719 :: "{v : VNat.VNat | v == vlength ys}"
91:42-91:44::ys :: "{v : (VList.VList a) | v == ys}"
91:49-91:75::lq_anf$##7205759403792810722 :: "{v : () | vlength (vappend xs ys) == vadd (vlength xs) (vlength ys)\n          && v == vappend_sums_vlength xs ys}"
91:70-91:72::xs :: "{v : (VList.VList a) | v == xs}"
91:73-91:75::ys :: "{v : (VList.VList a) | v == ys}"
92:9-92:45::lq_anf$##7205759403792810728 :: "VNat.VNat"
92:14-92:32::lq_anf$##7205759403792810726 :: "VNat.VNat"
92:19-92:31::lq_anf$##7205759403792810725 :: "{v : VNat.VNat | v == vlength xs}"
92:28-92:30::xs :: "{v : (VList.VList a) | v == xs}"
92:33-92:45::lq_anf$##7205759403792810727 :: "{v : VNat.VNat | v == vlength ys}"
92:42-92:44::ys :: "{v : (VList.VList a) | v == ys}"
93:9-93:49::lq_anf$##7205759403792810733 :: "VNat.VNat"
93:14-93:36::lq_anf$##7205759403792810731 :: "VNat.VNat"
93:23-93:35::lq_anf$##7205759403792810730 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons x xs}"
93:30-93:31::x :: "{VV : a | VV == x}"
93:32-93:34::xs :: "{v : (VList.VList a) | v == xs}"
93:37-93:49::lq_anf$##7205759403792810732 :: "{v : VNat.VNat | v == vlength ys}"
93:46-93:48::ys :: "{v : (VList.VList a) | v == ys}"
94:9-94:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
99:1-99:5::vall :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:(VList.VList a) -> {VV : GHC.Types.Bool | VV == vall x1 x3}"
99:15-99:19::True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
100:23-100:26::lq_anf$##7205759403792810801 :: "GHC.Types.Bool"
100:25-100:26::x :: "{VV : a | VV == x}"
100:30-100:39::lq_anf$##7205759403792810802 :: "GHC.Types.Bool"
100:35-100:36::ds_d4q5 :: "a -> GHC.Types.Bool"
100:37-100:39::xs :: "{v : (VList.VList a) | v == xs}"
105:1-105:9::vreverse :: "forall a .\nx1:(VList.VList a) -> {VV : (VList.VList a) | VV == vreverse x1}"
105:17-105:21::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
106:25-106:61::vappend :: "forall a .\nx1:(VList.VList a) -> x2:(VList.VList a) -> {VV : (VList.VList a) | VV == vappend x1 x2}"
106:33-106:46::lq_anf$##7205759403792810687 :: "{v : (VList.VList a) | v == vreverse xs}"
106:43-106:45::xs :: "{v : (VList.VList a) | v == xs}"
106:47-106:61::lq_anf$##7205759403792810689 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
106:54-106:55::x :: "{VV : a | VV == x}"
106:56-106:60::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
114:1-114:27::vreverse_preserves_vlength :: "forall a .\nx1:(VList.VList a) -> {VV : () | vlength (vreverse x1) == vlength x1}"
115:3-115:26::lq_anf$##7205759403792810738 :: "VNat.VNat"
115:11-115:26::lq_anf$##7205759403792810737 :: "(VList.VList (GHC.Types.Any (TYPE 'GHC.Types.LiftedRep)))"
115:21-115:25::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
116:9-116:21::lq_anf$##7205759403792810740 :: "VNat.VNat"
116:17-116:21::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
117:9-117:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
119:3-119:34::lq_anf$##7205759403792810744 :: "VNat.VNat"
119:11-119:34::lq_anf$##7205759403792810743 :: "(VList.VList a)"
119:21-119:33::lq_anf$##7205759403792810742 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons x xs}"
119:28-119:29::x :: "{VV : a | VV == x}"
119:30-119:32::xs :: "{v : (VList.VList a) | v == xs}"
120:9-120:55::lq_anf$##7205759403792810749 :: "VNat.VNat"
120:17-120:55::lq_anf$##7205759403792810748 :: "(VList.VList a)"
120:26-120:39::lq_anf$##7205759403792810745 :: "{v : (VList.VList a) | v == vreverse xs}"
120:36-120:38::xs :: "{v : (VList.VList a) | v == xs}"
120:40-120:54::lq_anf$##7205759403792810747 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
120:47-120:48::x :: "{VV : a | VV == x}"
120:49-120:53::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
121:11-121:64::lq_anf$##7205759403792810756 :: "VNat.VNat"
121:16-121:39::lq_anf$##7205759403792810752 :: "VNat.VNat"
121:25-121:38::lq_anf$##7205759403792810751 :: "{v : (VList.VList a) | v == vreverse xs}"
121:35-121:37::xs :: "{v : (VList.VList a) | v == xs}"
121:40-121:64::lq_anf$##7205759403792810755 :: "VNat.VNat"
121:49-121:63::lq_anf$##7205759403792810754 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
121:56-121:57::x :: "{VV : a | VV == x}"
121:58-121:62::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
122:15-122:64::lq_anf$##7205759403792810760 :: "()"
122:36-122:49::lq_anf$##7205759403792810757 :: "{v : (VList.VList a) | v == vreverse xs}"
122:46-122:48::xs :: "{v : (VList.VList a) | v == xs}"
122:50-122:64::lq_anf$##7205759403792810759 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
122:57-122:58::x :: "{VV : a | VV == x}"
122:59-122:63::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
124:9-124:62::lq_anf$##7205759403792810768 :: "VNat.VNat"
124:14-124:37::lq_anf$##7205759403792810764 :: "VNat.VNat"
124:23-124:36::lq_anf$##7205759403792810763 :: "{v : (VList.VList a) | v == vreverse xs}"
124:33-124:35::xs :: "{v : (VList.VList a) | v == xs}"
124:38-124:62::lq_anf$##7205759403792810767 :: "VNat.VNat"
124:47-124:61::lq_anf$##7205759403792810766 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
124:54-124:55::x :: "{VV : a | VV == x}"
124:56-124:60::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
125:11-125:53::lq_anf$##7205759403792810774 :: "VNat.VNat"
125:16-125:28::lq_anf$##7205759403792810770 :: "{v : VNat.VNat | v == vlength xs}"
125:25-125:27::xs :: "{v : (VList.VList a) | v == xs}"
125:29-125:53::lq_anf$##7205759403792810773 :: "VNat.VNat"
125:38-125:52::lq_anf$##7205759403792810772 :: "{v : (VList.VList a) | VCons##lqdc##$select v == x}"
125:45-125:46::x :: "{VV : a | VV == x}"
125:47-125:51::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
126:15-126:44::lq_anf$##7205759403792810775 :: "{v : () | vlength (vreverse xs) == vlength xs\n          && v == vreverse_preserves_vlength xs}"
126:42-126:44::xs :: "{v : (VList.VList a) | v == xs}"
128:9-128:37::lq_anf$##7205759403792810780 :: "VNat.VNat"
128:14-128:26::lq_anf$##7205759403792810778 :: "{v : VNat.VNat | v == vlength xs}"
128:23-128:25::xs :: "{v : (VList.VList a) | v == xs}"
128:27-128:37::lq_anf$##7205759403792810779 :: "{v : VNat.VNat | lqdc##$select v == Zero\n                 && v == Suc Zero}"
128:32-128:36::Zero :: "{v : VNat.VNat | v == Zero}"
129:9-129:74::lq_anf$##7205759403792810787 :: "VNat.VNat"
129:10-129:38::lq_anf$##7205759403792810784 :: "VNat.VNat"
129:14-129:38::lq_anf$##7205759403792810783 :: "VNat.VNat"
129:20-129:32::lq_anf$##7205759403792810782 :: "{v : VNat.VNat | v == vlength xs}"
129:29-129:31::xs :: "{v : (VList.VList a) | v == xs}"
129:33-129:37::Zero :: "{v : VNat.VNat | v == Zero}"
129:41-129:73::lq_anf$##7205759403792810786 :: "()"
129:56-129:68::lq_anf$##7205759403792810785 :: "{v : VNat.VNat | v == vlength xs}"
129:65-129:67::xs :: "{v : (VList.VList a) | v == xs}"
129:69-129:73::Zero :: "{v : VNat.VNat | v == Zero}"
130:9-130:56::lq_anf$##7205759403792810793 :: "VNat.VNat"
130:10-130:26::lq_anf$##7205759403792810790 :: "VNat.VNat"
130:14-130:26::lq_anf$##7205759403792810789 :: "{v : VNat.VNat | v == vlength xs}"
130:23-130:25::xs :: "{v : (VList.VList a) | v == xs}"
130:29-130:55::lq_anf$##7205759403792810792 :: "()"
130:43-130:55::lq_anf$##7205759403792810791 :: "{v : VNat.VNat | v == vlength xs}"
130:52-130:54::xs :: "{v : (VList.VList a) | v == xs}"
131:9-131:29::lq_anf$##7205759403792810796 :: "VNat.VNat"
131:17-131:29::lq_anf$##7205759403792810795 :: "{v : (VList.VList a) | VCons##lqdc##$select v == xs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength xs)\n                       && v == VCons x xs}"
131:24-131:25::x :: "{VV : a | VV == x}"
131:26-131:28::xs :: "{v : (VList.VList a) | v == xs}"
132:9-132:12::QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"