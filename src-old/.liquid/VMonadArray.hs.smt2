(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((VSemigroup.VSemigroup 1)) ((par (T0) ((junk$35$$35$VSemigroup.VSemigroup (junk$35$$35$VSemigroup.VSemigroup$35$$35$0 T0)) (VSemigroup.VSemigroup (VSemigroup.op Int) (VSemigroup.op_associative Int))))))
(declare-datatypes ((VNat.VNat 0)) ((par () (VNat.Zero (VNat.Suc (lqdc$35$$35$$36$select$35$$35$VNat.Suc$35$$35$1 VNat.VNat))))))
(declare-datatypes ((VList.VList 1)) ((par (T0) ((VList.VCons (VList.VCons$35$$35$lqdc$35$$35$$36$select$35$$35$VList.VCons$35$$35$1 T0) (VList.VCons$35$$35$lqdc$35$$35$$36$select$35$$35$VList.VCons$35$$35$2 (VList.VList T0))) VList.VNil))))
(declare-datatypes ((VFunctor.VFunctor 1)) ((par (T0) ((junk$35$$35$VFunctor.VFunctor (junk$35$$35$VFunctor.VFunctor$35$$35$0 T0)) (VFunctor.VFunctor (VFunctor.vmapF Int) (VFunctor.vmapF_vid Int))))))
(declare-datatypes ((VMonad.VMonad 1)) ((par (T0) ((junk$35$$35$VMonad.VMonad (junk$35$$35$VMonad.VMonad$35$$35$0 T0)) (VMonad.VMonad (VMonad.iFunctor (VFunctor.VFunctor T0)) (VMonad.lift Int) (VMonad.bind Int) (VMonad.bind_correct Int) (VMonad.bind_identity Int) (VMonad.bind_lift Int) (VMonad.bind_associative Int))))))
(declare-datatypes ((VMonadArray.VMonadArray 2)) ((par (T0 T1) ((junk$35$$35$VMonadArray.VMonadArray (junk$35$$35$VMonadArray.VMonadArray$35$$35$0 T0) (junk$35$$35$VMonadArray.VMonadArray$35$$35$1 T1)) (VMonadArray.VMonadArray (VMonadArray.iMonad (VMonad.VMonad T0)) (VMonadArray.vread Int) (VMonadArray.vwrite Int) (VMonadArray.vread_vwrite Int) (VMonadArray.vwrite_vread Int) (VMonadArray.vwrite_vwrite Int) (VMonadArray.vread_vread Int) (VMonadArray.vread_commutative Int) (VMonadArray.vwrite_commutative Int) (VMonadArray.vread_vwrite_commutative Int))))))
(declare-fun GHC.Base.id () Int)
(declare-fun VNat.vmul_zero () Int)
(declare-fun cast_as_int () Int)
(declare-fun VMonad.vmapM2 () Int)
(declare-fun peq () Int)
(declare-fun VList.vreverse () Int)
(declare-fun lq_tmp$36$x$35$$35$2238 () VNat.VNat)
(declare-fun GHC.Real.rem () Int)
(declare-fun VMonadArray.vwriteListsToLengths2 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun addrLen () Int)
(declare-fun lq_tmp$36$x$35$$35$2292 () (VList.VList Int))
(declare-fun lq_tmp$36$x$35$$35$2494 () VNat.VNat)
(declare-fun lit$36$$39$VMonadArray () Str)
(declare-fun papp5 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun VNat.vmul_commutative () Int)
(declare-fun lq_tmp$36$x$35$$35$1820 () (VList.VList Int))
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun iMonadArray$35$$35$a6KZ () (VMonadArray.VMonadArray Int Int))
(declare-fun VTuple.snd2D () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun ds_d6Vc () VNat.VNat)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Function.vconst () Int)
(declare-fun VTuple.fst2D () Int)
(declare-fun x$35$$35$a6L4 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_tmp$36$x$35$$35$3560 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_tmp$36$x$35$$35$3506 () Int)
(declare-fun lq_tmp$36$x$35$$35$2736 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2714 () VNat.VNat)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Function.vid () Int)
(declare-fun VTuple.snd3 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun xs$35$$35$a6Lj () (VList.VList Int))
(declare-fun papp3 () Int)
(declare-fun lq_tmp$36$x$35$$35$2294 () (VList.VList Int))
(declare-fun GHC.List.span () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun ys$35$$35$a6Ls () (VList.VList Int))
(declare-fun lq_tmp$36$x$35$$35$3530 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3017 () VNat.VNat)
(declare-fun GHC.Types.False () Bool)
(declare-fun iMonadArray$35$$35$a6Lh () (VMonadArray.VMonadArray Int Int))
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$2719 () VNat.VNat)
(declare-fun VTuple.fst3 () Int)
(declare-fun VMonadArray.vwriteListsToLengths3 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun VNat.vadd_identity () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2293 () (VList.VList Int))
(declare-fun iMonadArray$35$$35$a6KP () (VMonadArray.VMonadArray Int Int))
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun VNat.$36$tcVNat () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_tmp$36$x$35$$35$1821 () VNat.VNat)
(declare-fun VMonad.$36$tcVMonad () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun VMonad.liftM_f_second () Int)
(declare-fun lq_tmp$36$x$35$$35$3108 () Int)
(declare-fun i$35$$35$a6Lb () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2269 () VNat.VNat)
(declare-fun VNat.vadd_associative () Int)
(declare-fun lq_tmp$36$x$35$$35$3444 () Int)
(declare-fun j$35$$35$a6LA () VNat.VNat)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lq_tmp$36$x$35$$35$2757 () VNat.VNat)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$3523 () Int)
(declare-fun lq_tmp$36$x$35$$35$3400 () Int)
(declare-fun VMonad.vseq () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun ds_d6Vd () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2270 () VNat.VNat)
(declare-fun lit$36$VMonadArray () Str)
(declare-fun lq_tmp$36$x$35$$35$2446 () VNat.VNat)
(declare-fun iMonadArray$35$$35$a6Ly () (VMonadArray.VMonadArray Int Int))
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3016 () VNat.VNat)
(declare-fun i$35$$35$a6Li () VNat.VNat)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace () Str)
(declare-fun VList.vsingleton () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun VList.vappend_identity () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$2718 () VNat.VNat)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun VTuple.fst2 () Int)
(declare-fun VTuple.snd2 () Int)
(declare-fun VMonadArray.vswap () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2493 () VNat.VNat)
(declare-fun papp2 () Int)
(declare-fun lq_tmp$36$x$35$$35$2295 () VNat.VNat)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$1822 () (VList.VList Int))
(declare-fun VMonadArray.vwriteList_vappend () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1585 () VNat.VNat)
(declare-fun VNat.vmul_distributive () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_tmp$36$x$35$$35$2627 () VNat.VNat)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3417 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2759 () (VList.VList Int))
(declare-fun fromJust () Int)
(declare-fun GHC.Tuple.$36$tc$40$$41$ () Int)
(declare-fun VUnit.vunit () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lq_tmp$36$x$35$$35$2218 () VNat.VNat)
(declare-fun VMonadArray.vwriteListToLength () Int)
(declare-fun lq_tmp$36$x$35$$35$2663 () VNat.VNat)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun VMonadArray.vreadList () Int)
(declare-fun papp7 () Int)
(declare-fun VMonad.vmapM () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3094 () Int)
(declare-fun ds_d6V5 () Int)
(declare-fun VList.iSemigroup_vappend () (VSemigroup.VSemigroup (VList.VList Int)))
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun ds_d6UN () (VList.VList Int))
(declare-fun VNat.vone () VNat.VNat)
(declare-fun VNat.vadd_Suc_right () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun VNat.vadd_identity_left () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun VTuple.vtuple3D () Int)
(declare-fun lq_tmp$36$x$35$$35$2756 () (VList.VList Int))
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun VNat.vtwo () VNat.VNat)
(declare-fun VNat.vadd_commutative () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2735 () VNat.VNat)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2717 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2283 () VNat.VNat)
(declare-fun Function.extensionality () Int)
(declare-fun ds_d6UK () (VList.VList Int))
(declare-fun lq_tmp$36$x$35$$35$1974 () VNat.VNat)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun VMonad.kleisli () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun VNat.vadd () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun VMonad.raw_kleisli () Int)
(declare-fun lq_tmp$36$x$35$$35$3553 () Int)
(declare-fun lq_tmp$36$x$35$$35$2758 () (VList.VList Int))
(declare-fun n$35$$35$a6KU () VNat.VNat)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$2093 () VNat.VNat)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_tmp$36$x$35$$35$3074 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun VNat.vzero () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$1584 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2442 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2626 () VNat.VNat)
(declare-fun VTuple.thd3D () Int)
(declare-fun isAdmit () Int)
(declare-fun VList.vappend () Int)
(declare-fun VMonad.liftM_f () Int)
(declare-fun lq_tmp$36$x$35$$35$3060 () Int)
(declare-fun iMonadArray$35$$35$a6Lp () (VMonadArray.VMonadArray Int Int))
(declare-fun ys$35$$35$a6Lk () (VList.VList Int))
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2755 () (VList.VList Int))
(declare-fun VNat.vadd_identity_right () Int)
(declare-fun lq_tmp$36$x$35$$35$2632 () VNat.VNat)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun xs$35$$35$a6Lr () (VList.VList Int))
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Function.$38$ () Int)
(declare-fun ds_d6UM () VNat.VNat)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun ds_d6UJ () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$1975 () (VList.VList Int))
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun VList.vreverse_preserves_vlength () Int)
(declare-fun lq_tmp$36$x$35$$35$3018 () VNat.VNat)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun xs$35$$35$a6L5 () (VList.VList Int))
(declare-fun VMonad.vmapM2_aux2 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lq_tmp$36$x$35$$35$2734 () VNat.VNat)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun prop () Int)
(declare-fun lq_tmp$36$x$35$$35$2716 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$1982 () VNat.VNat)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_tmp$36$x$35$$35$2282 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun VMonad.vseq_epsilon () Int)
(declare-fun VMonad.vseq_identity_left () Int)
(declare-fun VList.vall () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun VTuple.vtuple2D () Int)
(declare-fun lq_tmp$36$x$35$$35$2296 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2490 () VNat.VNat)
(declare-fun GHC.Classes.max () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun lq_tmp$36$x$35$$35$1583 () VNat.VNat)
(declare-fun i$35$$35$a6Lz () VNat.VNat)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lq_tmp$36$x$35$$35$2445 () VNat.VNat)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun VNat.vmul_identity () Int)
(declare-fun VList.vlength () Int)
(declare-fun lq_tmp$36$x$35$$35$2739 () Int)
(declare-fun lq_tmp$36$x$35$$35$2665 () VNat.VNat)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun VList.vappend_sums_vlength () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2284 () Int)
(declare-fun xs$35$$35$a6Lc () (VList.VList Int))
(declare-fun GHC.Real.recip () Int)
(declare-fun ds_d6UL () (VList.VList Int))
(declare-fun lq_tmp$36$x$35$$35$1973 () (VList.VList Int))
(declare-fun Function.vdiagonalize () Int)
(declare-fun i$35$$35$a6Lq () VNat.VNat)
(declare-fun VTuple.thd3 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Function.vcomp () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun iMonadArray$35$$35$a6La () (VMonadArray.VMonadArray Int Int))
(declare-fun lq_tmp$36$x$35$$35$2754 () (VList.VList Int))
(declare-fun GHC.List.scanr () Int)
(declare-fun VMonad.vmapM2_aux1 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_tmp$36$x$35$$35$2737 () Int)
(declare-fun VMonad.vseq_identity_right () Int)
(declare-fun lq_tmp$36$x$35$$35$2715 () VNat.VNat)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lq_tmp$36$x$35$$35$1981 () (VList.VList Int))
(declare-fun lq_tmp$36$x$35$$35$3424 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_tmp$36$x$35$$35$2131 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2281 () VNat.VNat)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun ds_d6UY () Int)
(declare-fun zs$35$$35$a6Lt () (VList.VList Int))
(declare-fun ds_d6UI () (VMonadArray.VMonadArray Int Int))
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun Function.vapply () Int)
(declare-fun VList.vappend_associative () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun VMonadArray.vwriteList () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Function.vflip () Int)
(declare-fun lq_tmp$36$x$35$$35$2738 () VNat.VNat)
(declare-fun lq_tmp$36$x$35$$35$2664 () VNat.VNat)
(declare-fun GHC.Classes.not () Int)
(declare-fun VMonad.vseq_identity () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lq_tmp$36$x$35$$35$2297 () VNat.VNat)
(declare-fun GHC.Err.error () Int)
(declare-fun Function.vconstF () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun lq_tmp$36$x$35$$35$3580 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun VNat.vmul () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$41 (Int (VMonad.VMonad Int)) Bool)
(declare-fun apply$35$$35$6 (Int Int) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$48 (Int (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun apply$35$$35$13 (Int Bool) (VMonad.VMonad Int))
(declare-fun apply$35$$35$31 (Int (_ BitVec 32)) VNat.VNat)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$29 (Int (_ BitVec 32)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$17 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int Str) (VList.VList Int))
(declare-fun apply$35$$35$10 (Int Bool) Str)
(declare-fun apply$35$$35$51 (Int (VMonadArray.VMonadArray Int Int)) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int Str) VNat.VNat)
(declare-fun apply$35$$35$4 (Int Int) (VList.VList Int))
(declare-fun apply$35$$35$19 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$40 (Int (VMonad.VMonad Int)) Int)
(declare-fun apply$35$$35$14 (Int Bool) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$49 (Int (VMonadArray.VMonadArray Int Int)) Bool)
(declare-fun apply$35$$35$44 (Int (VMonad.VMonad Int)) (VList.VList Int))
(declare-fun apply$35$$35$54 (Int (VMonadArray.VMonadArray Int Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$63 (Int VNat.VNat) VNat.VNat)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$37 (Int (VList.VList Int)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$43 (Int (VMonad.VMonad Int)) (_ BitVec 32))
(declare-fun apply$35$$35$47 (Int (VMonad.VMonad Int)) VNat.VNat)
(declare-fun apply$35$$35$61 (Int VNat.VNat) (VMonad.VMonad Int))
(declare-fun apply$35$$35$16 (Int Str) Int)
(declare-fun apply$35$$35$42 (Int (VMonad.VMonad Int)) Str)
(declare-fun apply$35$$35$58 (Int VNat.VNat) Str)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$38 (Int (VList.VList Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$52 (Int (VMonadArray.VMonadArray Int Int)) (VList.VList Int))
(declare-fun apply$35$$35$33 (Int (VList.VList Int)) Bool)
(declare-fun apply$35$$35$12 (Int Bool) (VList.VList Int))
(declare-fun apply$35$$35$59 (Int VNat.VNat) (_ BitVec 32))
(declare-fun apply$35$$35$50 (Int (VMonadArray.VMonadArray Int Int)) Str)
(declare-fun apply$35$$35$11 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int Str) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$28 (Int (_ BitVec 32)) (VList.VList Int))
(declare-fun apply$35$$35$15 (Int Bool) VNat.VNat)
(declare-fun apply$35$$35$7 (Int Int) VNat.VNat)
(declare-fun apply$35$$35$21 (Int Str) (VMonad.VMonad Int))
(declare-fun apply$35$$35$30 (Int (_ BitVec 32)) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$56 (Int VNat.VNat) Int)
(declare-fun apply$35$$35$5 (Int Int) (VMonad.VMonad Int))
(declare-fun apply$35$$35$32 (Int (VList.VList Int)) Int)
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$18 (Int Str) Str)
(declare-fun apply$35$$35$9 (Int Bool) Bool)
(declare-fun apply$35$$35$36 (Int (VList.VList Int)) (VList.VList Int))
(declare-fun apply$35$$35$45 (Int (VMonad.VMonad Int)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$35 (Int (VList.VList Int)) (_ BitVec 32))
(declare-fun apply$35$$35$57 (Int VNat.VNat) Bool)
(declare-fun apply$35$$35$39 (Int (VList.VList Int)) VNat.VNat)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$60 (Int VNat.VNat) (VList.VList Int))
(declare-fun apply$35$$35$34 (Int (VList.VList Int)) Str)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$55 (Int (VMonadArray.VMonadArray Int Int)) VNat.VNat)
(declare-fun apply$35$$35$62 (Int VNat.VNat) (VMonadArray.VMonadArray Int Int))
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Int)
(declare-fun apply$35$$35$53 (Int (VMonadArray.VMonadArray Int Int)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$46 (Int (VMonad.VMonad Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$41 ((VMonad.VMonad Int)) Bool)
(declare-fun coerce$35$$35$6 (Int) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$48 ((VMonadArray.VMonadArray Int Int)) Int)
(declare-fun coerce$35$$35$13 (Bool) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$31 ((_ BitVec 32)) VNat.VNat)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$29 ((_ BitVec 32)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$17 (Str) Bool)
(declare-fun coerce$35$$35$20 (Str) (VList.VList Int))
(declare-fun coerce$35$$35$10 (Bool) Str)
(declare-fun coerce$35$$35$51 ((VMonadArray.VMonadArray Int Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$23 (Str) VNat.VNat)
(declare-fun coerce$35$$35$4 (Int) (VList.VList Int))
(declare-fun coerce$35$$35$19 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$40 ((VMonad.VMonad Int)) Int)
(declare-fun coerce$35$$35$14 (Bool) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$49 ((VMonadArray.VMonadArray Int Int)) Bool)
(declare-fun coerce$35$$35$44 ((VMonad.VMonad Int)) (VList.VList Int))
(declare-fun coerce$35$$35$54 ((VMonadArray.VMonadArray Int Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$63 (VNat.VNat) VNat.VNat)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$37 ((VList.VList Int)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$43 ((VMonad.VMonad Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$47 ((VMonad.VMonad Int)) VNat.VNat)
(declare-fun coerce$35$$35$61 (VNat.VNat) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$16 (Str) Int)
(declare-fun coerce$35$$35$42 ((VMonad.VMonad Int)) Str)
(declare-fun coerce$35$$35$58 (VNat.VNat) Str)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$38 ((VList.VList Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$52 ((VMonadArray.VMonadArray Int Int)) (VList.VList Int))
(declare-fun coerce$35$$35$33 ((VList.VList Int)) Bool)
(declare-fun coerce$35$$35$12 (Bool) (VList.VList Int))
(declare-fun coerce$35$$35$59 (VNat.VNat) (_ BitVec 32))
(declare-fun coerce$35$$35$50 ((VMonadArray.VMonadArray Int Int)) Str)
(declare-fun coerce$35$$35$11 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$22 (Str) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$28 ((_ BitVec 32)) (VList.VList Int))
(declare-fun coerce$35$$35$15 (Bool) VNat.VNat)
(declare-fun coerce$35$$35$7 (Int) VNat.VNat)
(declare-fun coerce$35$$35$21 (Str) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$30 ((_ BitVec 32)) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$56 (VNat.VNat) Int)
(declare-fun coerce$35$$35$5 (Int) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$32 ((VList.VList Int)) Int)
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$18 (Str) Str)
(declare-fun coerce$35$$35$9 (Bool) Bool)
(declare-fun coerce$35$$35$36 ((VList.VList Int)) (VList.VList Int))
(declare-fun coerce$35$$35$45 ((VMonad.VMonad Int)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$35 ((VList.VList Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$57 (VNat.VNat) Bool)
(declare-fun coerce$35$$35$39 ((VList.VList Int)) VNat.VNat)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$60 (VNat.VNat) (VList.VList Int))
(declare-fun coerce$35$$35$34 ((VList.VList Int)) Str)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$55 ((VMonadArray.VMonadArray Int Int)) VNat.VNat)
(declare-fun coerce$35$$35$62 (VNat.VNat) (VMonadArray.VMonadArray Int Int))
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Int)
(declare-fun coerce$35$$35$53 ((VMonadArray.VMonadArray Int Int)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$46 ((VMonad.VMonad Int)) (VMonadArray.VMonadArray Int Int))
(declare-fun smt_lambda$35$$35$41 ((VMonad.VMonad Int) Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Int (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$48 ((VMonadArray.VMonadArray Int Int) Int) Int)
(declare-fun smt_lambda$35$$35$13 (Bool (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$31 ((_ BitVec 32) VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 32) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$17 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 (Str (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$51 ((VMonadArray.VMonadArray Int Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 (Str VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$4 (Int (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$19 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$40 ((VMonad.VMonad Int) Int) Int)
(declare-fun smt_lambda$35$$35$14 (Bool (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$49 ((VMonadArray.VMonadArray Int Int) Bool) Int)
(declare-fun smt_lambda$35$$35$44 ((VMonad.VMonad Int) (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$54 ((VMonadArray.VMonadArray Int Int) (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$63 (VNat.VNat VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$37 ((VList.VList Int) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$43 ((VMonad.VMonad Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$47 ((VMonad.VMonad Int) VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$61 (VNat.VNat (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$16 (Str Int) Int)
(declare-fun smt_lambda$35$$35$42 ((VMonad.VMonad Int) Str) Int)
(declare-fun smt_lambda$35$$35$58 (VNat.VNat Str) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$38 ((VList.VList Int) (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$52 ((VMonadArray.VMonadArray Int Int) (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$33 ((VList.VList Int) Bool) Int)
(declare-fun smt_lambda$35$$35$12 (Bool (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$59 (VNat.VNat (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$50 ((VMonadArray.VMonadArray Int Int) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 (Str (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 32) (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$15 (Bool VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$7 (Int VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$21 (Str (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$30 ((_ BitVec 32) (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$56 (VNat.VNat Int) Int)
(declare-fun smt_lambda$35$$35$5 (Int (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$32 ((VList.VList Int) Int) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$18 (Str Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$36 ((VList.VList Int) (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$45 ((VMonad.VMonad Int) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$35 ((VList.VList Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$57 (VNat.VNat Bool) Int)
(declare-fun smt_lambda$35$$35$39 ((VList.VList Int) VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$60 (VNat.VNat (VList.VList Int)) Int)
(declare-fun smt_lambda$35$$35$34 ((VList.VList Int) Str) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$55 ((VMonadArray.VMonadArray Int Int) VNat.VNat) Int)
(declare-fun smt_lambda$35$$35$62 (VNat.VNat (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$53 ((VMonadArray.VMonadArray Int Int) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$46 ((VMonad.VMonad Int) (VMonadArray.VMonadArray Int Int)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$2$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$3$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$4$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$5$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$6$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$7$35$$35$48 () (VMonadArray.VMonadArray Int Int))
(declare-fun lam_arg$35$$35$1$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$2$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$3$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$4$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$5$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$6$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$7$35$$35$40 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$16 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$2$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$3$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$4$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$5$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$6$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$7$35$$35$56 () VNat.VNat)
(declare-fun lam_arg$35$$35$1$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$2$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$3$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$4$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$5$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$6$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$7$35$$35$32 () (VList.VList Int))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Bool)

(assert (distinct lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace lit$36$VMonadArray lit$36$$39$VMonadArray))

(assert (distinct GHC.Types.True GHC.Types.False))

(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$39$VMonadArray) 12))
(assert (= (strLen lit$36$VMonadArray) 11))
(assert (= (strLen lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace) 46))
(exit)
