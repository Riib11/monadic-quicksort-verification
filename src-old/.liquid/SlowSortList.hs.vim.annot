1:1-1:1::$trModule :: "GHC.Types.Module"
20:1-20:9::slowsort :: "forall a b .\nx1:((VMonadPlus.VMonadPlus a), (VOrdered.VOrdered b)) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == slowsort x1 x2\n                                                                                                         && VV == kleisli (iMonad (lqdc##$select x1)) (permute (lqdc##$select x1)) (guardBy (lqdc##$select x1) (isSorted (lqdc##$select x1))) x2}"
20:33-20:35::xs :: "(VList.VList a)"
22:7-22:15::_ :: "{VV : forall a .\n      x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1} | VV == permute iMonadPlus\n                                                                                   && VV == permute_}"
23:7-23:27::lq_anf$##7205759403792805230 :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == guardBy iMonadPlus isSorted_ x1\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (isSorted_ x1)) (vlift (iMonad iMonadPlus) x1)}"
23:17-23:26::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
25:5-25:7::xs :: "{v : (VList.VList a) | v == xs}"
27:5-27:14::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
27:17-27:34::_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
27:26-27:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
28:5-28:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
28:16-28:34::_ :: "x1:(VList.VList a) -> {v : b (VList.VList a) | v == permute iMonadPlus x1}"
28:24-28:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
29:5-29:13::guardBy_ :: "forall a .\nx1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
29:16-29:34::_ :: "x1:(a -> GHC.Types.Bool) -> x3:a -> {v : b a | v == guardBy iMonadPlus x1 x3\n                                               && v == vseq (iMonad iMonadPlus) (guard iMonadPlus (x1 x3)) (vlift (iMonad iMonadPlus) x3)}"
29:24-29:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
30:5-30:13::kleisli_ :: "forall a b c .\nx1:(a -> d b) -> x3:(b -> d c) -> x5:a -> {v : d c | v == kleisli iMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind iMonad_) x1 x3 x5}"
30:16-30:31::_ :: "x1:(a -> b c) -> x3:(c -> b d) -> x5:a -> {v : b d | v == kleisli iMonad_ x1 x3 x5\n                                                     && v == raw_kleisli (vbind iMonad_) x1 x3 x5}"
30:24-30:31::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
31:5-31:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
31:15-31:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
31:22-31:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
36:1-36:13::permute_aux1 :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:b -> x3:((VList.VList b), (VList.VList b)) -> {VV : a (VList.VList b) | VV == permute_aux1 x1 x2 x3\n                                                                                                           && VV == vmapM2 (iMonad x1) (permute_aux2 x2) (permute x1 (lqdc##$select x3)) (permute x1 (lqdc##$select x3))}"
36:14-36:24::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
36:25-36:26::x :: "a"
36:38-36:90::vmapM2_ :: "{VV : forall a b c .\n      x1:(a -> b -> c) -> x4:d a -> x5:d b -> {v : d c | v == vmapM2 iMonad_ x1 x4 x5\n                                                         && v == vbind iMonad_ x4 lam x##a4Ck : a##xo . vbind iMonad_ x5 lam y##a4Cl : b##xo . vlift iMonad_ (x1 x##a4Ck y##a4Cl)} | VV == vmapM2 iMonad_\n                                                                                                                                                                                     && VV == vmapM2_}"
36:46-36:62::lq_anf$##7205759403792805221 :: "x1:(VList.VList a) -> x2:(VList.VList a) -> {v : (VList.VList a) | v == permute_aux2 x x1 x2\n                                                                   && v == vappend (vappend x1 (vsingleton x)) x2}"
36:60-36:61::x :: "{VV : a | VV == x}"
36:63-36:76::lq_anf$##7205759403792805222 :: "{v : a (VList.VList b) | v == permute iMonadPlus ys\n                         && v == permute_ ys}"
36:73-36:75::ys :: "{v : (VList.VList a) | v == ys}"
36:77-36:90::lq_anf$##7205759403792805223 :: "{v : a (VList.VList b) | v == permute iMonadPlus zs\n                         && v == permute_ zs}"
36:87-36:89::zs :: "{v : (VList.VList a) | v == zs}"
38:5-38:12::vmapM2_ :: "forall a b c .\nx1:(a -> b -> c) -> x4:d a -> x5:d b -> {v : d c | v == vmapM2 iMonad_ x1 x4 x5\n                                                   && v == vbind iMonad_ x4 lam x##a4Ck : a##xo . vbind iMonad_ x5 lam y##a4Cl : b##xo . vlift iMonad_ (x1 x##a4Ck y##a4Cl)}"
38:15-38:29::_ :: "x1:(a -> b -> c) -> x4:d a -> x5:d b -> {v : d c | v == vmapM2 iMonad_ x1 x4 x5\n                                                   && v == vbind iMonad_ x4 lam x##a4Ck : a##xo . vbind iMonad_ x5 lam y##a4Cl : b##xo . vlift iMonad_ (x1 x##a4Ck y##a4Cl)}"
38:22-38:29::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
39:5-39:13::permute_ :: "forall a .\nx1:(VList.VList a) -> {VV : b (VList.VList a) | VV == permute iMonadPlus x1}"
39:16-39:34::permute :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == permute x1 x2}"
39:24-39:34::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
40:5-40:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
40:15-40:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
40:22-40:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
45:1-45:13::permute_aux2 :: "forall a .\nx1:a -> x2:(VList.VList a) -> x3:(VList.VList a) -> {VV : (VList.VList a) | VV == permute_aux2 x1 x2 x3\n                                                                            && VV == vappend (vappend x2 (vsingleton x1)) x3}"
45:14-45:15::x :: "a"
45:16-45:19::ys' :: "(VList.VList a)"
45:20-45:23::zs' :: "(VList.VList a)"
45:26-45:29::ys' :: "{v : (VList.VList a) | v == ys'}"
45:40-45:52::lq_anf$##7205759403792805192 :: "{v : (VList.VList a) | v == vsingleton x\n                       && v == VCons x VNil}"
45:51-45:52::x :: "{VV : a | VV == x}"
45:63-45:66::zs' :: "{v : (VList.VList a) | v == zs'}"
50:1-50:8::permute :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:(VList.VList b) -> {VV : a (VList.VList b) | VV == permute x1 x2}"
50:9-50:19::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
50:27-50:38::lq_anf$##7205759403792805225 :: "{v : (VList.VList a) | vlength v == Zero\n                       && v == VNil}"
50:34-50:38::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
52:5-52:11::vlift_ :: "forall a . a -> b a"
52:14-52:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
52:20-52:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
53:5-53:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
53:15-53:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
53:22-53:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
54:35-54:44::lq_anf$##7205759403792805226 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split iMonadPlus xs\n                                            && v == split_ xs}"
54:42-54:44::xs :: "{v : (VList.VList a) | v == xs}"
54:49-54:66::lq_anf$##7205759403792805227 :: "x1:((VList.VList a), (VList.VList a)) -> {v : b (VList.VList a) | v == permute_aux1 iMonadPlus x x1\n                                                                  && v == vmapM2 (iMonad iMonadPlus) (permute_aux2 x) (permute iMonadPlus (lqdc##$select x1)) (permute iMonadPlus (lqdc##$select x1))}"
54:64-54:65::x :: "{VV : a | VV == x}"
56:5-56:10::>>= :: "forall a b . c a -> (a -> c b) -> c b"
56:13-56:26::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
56:19-56:26::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
57:5-57:11::split_ :: "forall a .\nx1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
57:14-57:30::_ :: "x1:(VList.VList a) -> {v : b ((VList.VList a), (VList.VList a)) | v == split iMonadPlus x1}"
57:20-57:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
58:5-58:18::permute_aux1_ :: "forall a .\nx1:a -> x2:((VList.VList a), (VList.VList a)) -> {VV : b (VList.VList a) | VV == permute_aux1 iMonadPlus x1 x2\n                                                                           && VV == vmapM2 (iMonad iMonadPlus) (permute_aux2 x1) (permute iMonadPlus (lqdc##$select x2)) (permute iMonadPlus (lqdc##$select x2))}"
58:21-58:44::permute_aux1 :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:b -> x3:((VList.VList b), (VList.VList b)) -> {VV : a (VList.VList b) | VV == permute_aux1 x1 x2 x3\n                                                                                                           && VV == vmapM2 (iMonad x1) (permute_aux2 x2) (permute x1 (lqdc##$select x3)) (permute x1 (lqdc##$select x3))}"
58:34-58:44::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
59:5-59:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
59:15-59:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
59:22-59:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
72:1-72:25::identity_refines_permute :: "forall a b .\nx1:(VMonadPlus.VMonadPlus b) -> x2:(VList.VList b) -> {VV : () | vmpadd x1 (vlift (iMonad x1) x2) (permute x1 x2) == permute x1 x2}"
72:26-72:36::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
72:37-72:39::xs :: "(VList.VList a)"
77:1-77:9::isSorted :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted x1 x2}"
77:10-77:18::iOrdered :: "(VOrdered.VOrdered a)"
77:26-77:30::True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
78:34-78:48::lq_anf$##7205759403792805196 :: "GHC.Types.Bool"
78:39-78:45::_ :: "GHC.Types.Bool"
78:40-78:41::x :: "{VV : a | VV == x}"
78:46-78:48::xs :: "{v : (VList.VList a) | v == xs}"
78:52-78:64::lq_anf$##7205759403792805197 :: "{v : GHC.Types.Bool | v == isSorted iOrdered xs\n                      && v == isSorted_ xs}"
78:62-78:64::xs :: "{v : (VList.VList a) | v == xs}"
80:5-80:9::<= :: "a -> a -> GHC.Types.Bool"
80:12-80:25::_ :: "a -> a -> GHC.Types.Bool"
80:17-80:25::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
81:5-81:14::isSorted_ :: "x1:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted iOrdered x1}"
81:17-81:34::isSorted :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:(VList.VList a) -> {VV : GHC.Types.Bool | VV == isSorted x1 x2}"
81:26-81:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
87:1-87:16::isSortedBetween :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:((VList.VList a), (VList.VList a)) -> {VV : GHC.Types.Bool | VV == isSortedBetween x1 x2 x3\n                                                                                                    && VV == isSorted x1 (vappend (lqdc##$select x3) (vappend (vsingleton x2) (lqdc##$select x3)))}"
87:17-87:25::iOrdered :: "(VOrdered.VOrdered a)"
87:26-87:27::x :: "a"
88:3-88:53::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
88:13-88:53::lq_anf$##7205759403792805201 :: "(VList.VList a)"
88:22-88:24::ys :: "{v : (VList.VList a) | v == ys}"
88:25-88:52::lq_anf$##7205759403792805200 :: "(VList.VList a)"
88:34-88:48::lq_anf$##7205759403792805199 :: "{v : (VList.VList a) | v == vsingleton x\n                       && v == VCons x VNil}"
88:46-88:47::x :: "{VV : a | VV == x}"
88:49-88:51::zs :: "{v : (VList.VList a) | v == zs}"
90:5-90:14::isSorted_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
90:17-90:34::_ :: "x1:(VList.VList a) -> {v : GHC.Types.Bool | v == isSorted iOrdered x1}"
90:26-90:34::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
95:1-95:26::isSortedBetween_expansion :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:((VList.VList a), (VList.VList a)) -> {VV : GHC.Types.Bool | VV <=> vall lam ds_d2YL : a##xo . vleq x1 ds_d2YL x2 (lqdc##$select x3)\n                                                                                                           && vall lam ds_d2YO : a##xo . vleq x1 x2 ds_d2YO (lqdc##$select x3)}"
95:27-95:35::iOrdered :: "(VOrdered.VOrdered a)"
95:36-95:37::x :: "a"
96:3-96:22::lq_anf$##7205759403792805204 :: "GHC.Types.Bool"
96:8-96:19::_ :: "GHC.Types.Bool"
96:17-96:18::x :: "{VV : a | VV == x}"
96:20-96:22::ys :: "{v : (VList.VList a) | v == ys}"
96:26-96:45::lq_anf$##7205759403792805206 :: "GHC.Types.Bool"
96:31-96:42::_ :: "GHC.Types.Bool"
96:32-96:33::x :: "{VV : a | VV == x}"
96:43-96:45::zs :: "{v : (VList.VList a) | v == zs}"
98:5-98:10::vleq_ :: "a -> a -> GHC.Types.Bool"
98:13-98:26::_ :: "a -> a -> GHC.Types.Bool"
98:18-98:26::iOrdered :: "{v : (VOrdered.VOrdered a) | v == iOrdered}"
120:1-120:34::isSortedBetween_expansion_correct :: "forall a .\nx1:(VOrdered.VOrdered a) -> x2:a -> x3:(VList.VList a) -> x4:(VList.VList a) -> {VV : () | isSorted x1 (vappend x3 (vappend (vsingleton x2) x4)) == isSortedBetween x1 x2 ((,) x3 x4)}"
120:35-120:43::iOrdered :: "(VOrdered.VOrdered a)"
120:44-120:45::x :: "a"
120:46-120:48::ys :: "(VList.VList a)"
120:49-120:51::zs :: "(VList.VList a)"
125:1-125:11::split_aux1 :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:b -> x3:((VList.VList b), (VList.VList b)) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split_aux1 x1 x2 x3\n                                                                                                                              && VV == vmpadd x1 (vlift (iMonad x1) ((,) (VCons x2 (lqdc##$select x3)) (lqdc##$select x3))) (vlift (iMonad x1) ((,) (lqdc##$select x3) (VCons x2 (lqdc##$select x3))))}"
125:12-125:22::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
125:23-125:24::x :: "a"
125:36-125:59::lq_anf$##7205759403792805210 :: "a ((VList.VList b), (VList.VList b))"
125:43-125:59::lq_anf$##7205759403792805209 :: "{v : ((VList.VList a), (VList.VList a)) | x_Tuple22 v == zs\n                                          && lqdc##$select v == zs\n                                          && snd v == zs}"
125:44-125:54::lq_anf$##7205759403792805208 :: "{v : (VList.VList a) | VCons##lqdc##$select v == ys\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength ys)\n                       && v == VCons x ys}"
125:50-125:51::x :: "{VV : a | VV == x}"
125:52-125:54::ys :: "{v : (VList.VList a) | v == ys}"
125:56-125:58::zs :: "{v : (VList.VList a) | v == zs}"
125:64-125:87::lq_anf$##7205759403792805213 :: "a ((VList.VList b), (VList.VList b))"
125:71-125:87::lq_anf$##7205759403792805212 :: "{v : ((VList.VList a), (VList.VList a)) | x_Tuple21 v == ys\n                                          && lqdc##$select v == ys\n                                          && fst v == ys}"
125:72-125:74::ys :: "{v : (VList.VList a) | v == ys}"
125:76-125:86::lq_anf$##7205759403792805211 :: "{v : (VList.VList a) | VCons##lqdc##$select v == zs\n                       && VCons##lqdc##$select v == x\n                       && vlength v == Suc (vlength zs)\n                       && v == VCons x zs}"
125:82-125:83::x :: "{VV : a | VV == x}"
125:84-125:86::zs :: "{v : (VList.VList a) | v == zs}"
127:5-127:10::<+> :: "forall a . b a -> b a -> b a"
127:13-127:30::_ :: "{VV : forall a . b a -> b a -> b a | VV == vmpadd iMonadPlus}"
127:20-127:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
128:5-128:11::vlift_ :: "forall a . a -> b a"
128:14-128:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
128:20-128:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
129:5-129:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
129:15-129:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
129:22-129:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
134:1-134:6::split :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split x1 x2}"
134:7-134:17::iMonadPlus :: "(VMonadPlus.VMonadPlus a)"
134:25-134:44::vlift_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_\n                            && VV == vlift_}"
134:32-134:44::lq_anf$##7205759403792805217 :: "((VList.VList a), (VList.VList a))"
134:33-134:37::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
134:39-134:43::_ :: "{VV : forall a .\n      {v : (VList.VList a) | vlength v == Zero\n                             && v == VNil} | VV == VNil}"
136:5-136:11::vlift_ :: "forall a . a -> b a"
136:14-136:27::_ :: "{VV : forall a . a -> b a | VV == vlift iMonad_}"
136:20-136:27::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
137:5-137:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
137:15-137:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
137:22-137:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
138:33-138:42::lq_anf$##7205759403792805218 :: "{v : a ((VList.VList b), (VList.VList b)) | v == split iMonadPlus xs\n                                            && v == split_ xs}"
138:40-138:42::xs :: "{v : (VList.VList a) | v == xs}"
138:47-138:60::lq_anf$##7205759403792805219 :: "x1:((VList.VList a), (VList.VList a)) -> {v : b ((VList.VList a), (VList.VList a)) | v == split_aux1 iMonadPlus x x1\n                                                                                     && v == vmpadd iMonadPlus (vlift (iMonad iMonadPlus) ((,) (VCons x (lqdc##$select x1)) (lqdc##$select x1))) (vlift (iMonad iMonadPlus) ((,) (lqdc##$select x1) (VCons x (lqdc##$select x1))))}"
138:59-138:60::x :: "{VV : a | VV == x}"
140:5-140:11::split_ :: "forall a .\nx1:(VList.VList a) -> {VV : b ((VList.VList a), (VList.VList a)) | VV == split iMonadPlus x1}"
140:14-140:30::split :: "forall a b .\nx1:(VMonadPlus.VMonadPlus a) -> x2:(VList.VList b) -> {VV : a ((VList.VList b), (VList.VList b)) | VV == split x1 x2}"
140:20-140:30::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
141:5-141:16::split_aux1_ :: "forall a .\nx1:a -> x2:((VList.VList a), (VList.VList a)) -> {v : b ((VList.VList a), (VList.VList a)) | v == split_aux1 iMonadPlus x1 x2\n                                                                                             && v == vmpadd iMonadPlus (vlift (iMonad iMonadPlus) ((,) (VCons x1 (lqdc##$select x2)) (lqdc##$select x2))) (vlift (iMonad iMonadPlus) ((,) (lqdc##$select x2) (VCons x1 (lqdc##$select x2))))}"
141:19-141:40::_ :: "x1:a -> x2:((VList.VList a), (VList.VList a)) -> {v : b ((VList.VList a), (VList.VList a)) | v == split_aux1 iMonadPlus x1 x2\n                                                                                             && v == vmpadd iMonadPlus (vlift (iMonad iMonadPlus) ((,) (VCons x1 (lqdc##$select x2)) (lqdc##$select x2))) (vlift (iMonad iMonadPlus) ((,) (lqdc##$select x2) (VCons x1 (lqdc##$select x2))))}"
141:30-141:40::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"
142:5-142:10::>>= :: "forall a b . c a -> (a -> c b) -> c b"
142:13-142:26::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == vbind iMonad_}"
142:19-142:26::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus\n                         && v == iMonad_}"
143:5-143:12::iMonad_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
143:15-143:32::_ :: "{v : (VMonad.VMonad a) | v == iMonad iMonadPlus}"
143:22-143:32::iMonadPlus :: "{v : (VMonadPlus.VMonadPlus a) | v == iMonadPlus}"