(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Equality.PBEq 1)) ((par (T0) ((Equality.XEq (Equality.XEq$35$$35$f Int) (Equality.XEq$35$$35$g Int) (Equality.XEq$35$$35$lqdc$35$$35$$36$select$35$$35$Equality.XEq$35$$35$1 Int)) (Equality.CEq (Equality.CEq$35$$35$x Int) (Equality.CEq$35$$35$y Int) (Equality.CEq$35$$35$ctx Int) (Equality.CEq$35$$35$lqdc$35$$35$$36$select$35$$35$Equality.CEq$35$$35$1 (Equality.PBEq Int))) (Equality.BEq (Equality.BEq$35$$35$x T0) (Equality.BEq$35$$35$y T0) (Equality.BEq$35$$35$pf Int))))))
(declare-fun lq_anf$36$$35$$35$7205759403792804437$35$$35$d2ON () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun lq_tmp$36$x$35$$35$1031 () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ () Int)
(declare-fun peq () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow$35$$35$k_$35$$35$1102 () Int)
(declare-fun Equality.eta_equivalence_pointwise () Int)
(declare-fun lq_tmp$36$x$35$$35$1028 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vl$35$$35$k_$35$$35$1387 () Int)
(declare-fun ds_d2NT () Int)
(declare-fun GHC.List.init () Int)
(declare-fun addrLen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804431$35$$35$d2OH () Int)
(declare-fun lq_tmp$36$x$35$$35$1280 () Int)
(declare-fun papp5 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vh$35$$35$k_$35$$35$1077 () Int)
(declare-fun f$35$$35$a1Vl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804435$35$$35$d2OL () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun x$35$$35$a1V9 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow$35$$35$k_$35$$35$1077 () Int)
(declare-fun ds_d2MD () (Equality.PBEq Int))
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun VV$35$$35$F$35$$35$67 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804422$35$$35$d2Oy () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804422$35$$35$d2Oy$35$$35$k_$35$$35$1105 () Int)
(declare-fun lq_tmp$36$x$35$$35$1643 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vh$35$$35$k_$35$$35$1102 () Int)
(declare-fun lq_tmp$36$x$35$$35$1023 () Int)
(declare-fun lq_tmp$36$x$35$$35$1001 () (Equality.PBEq Int))
(declare-fun lq_tmp$36$x$35$$35$1779 () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vl$35$$35$k_$35$$35$1447 () Int)
(declare-fun Equality.fromPBEq_f () Int)
(declare-fun Equality.eta_equivalence () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804412$35$$35$d2Oo () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$F$35$$35$73 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun Equality.isBEq () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun ds_d2My () Int)
(declare-fun Equality.alpha_equivalence_PBEq () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun ds_d2NR () Int)
(declare-fun a$35$$35$a21a () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun lq_tmp$36$x$35$$35$1029 () Int)
(declare-fun ds_d2NU () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun ds_d2Ol () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun b$35$$35$a215 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun GHC.Types.UnliftedRep () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lit$36$Equality () Str)
(declare-fun lq_tmp$36$x$35$$35$1650 () Int)
(declare-fun lq_tmp$36$x$35$$35$1030 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun a$35$$35$X1UP () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow$35$$35$k_$35$$35$1121 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun VV$35$$35$F$35$$35$60 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804422$35$$35$d2Oy$35$$35$k_$35$$35$1102 () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vh$35$$35$k_$35$$35$1105 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$1024 () Int)
(declare-fun lq_tmp$36$x$35$$35$1204 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804415$35$$35$d2Or () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun ds_d2MC () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804425$35$$35$d2OB () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow () Int)
(declare-fun lq_tmp$36$x$35$$35$1049 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun ds_d2Mx () Int)
(declare-fun lit$36$PBEq () Str)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804420$35$$35$d2Ow$35$$35$k_$35$$35$1105 () Int)
(declare-fun ds_d2NS () Int)
(declare-fun lq_tmp$36$x$35$$35$1508 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1962 () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun papp2 () Int)
(declare-fun lq_tmp$36$x$35$$35$1287 () Int)
(declare-fun lq_tmp$36$x$35$$35$1050 () Int)
(declare-fun VV$35$$35$F$35$$35$72 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun lq_tmp$36$x$35$$35$1918 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804436$35$$35$d2OM () Int)
(declare-fun lq_tmp$36$x$35$$35$1033 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun lq_karg$36$Equality.eta_equivalence_PBEq_pointwise$35$$35$k_$35$$35$1447 () Int)
(declare-fun b$35$$35$X1UP () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804432$35$$35$d2OI () (Equality.PBEq Int))
(declare-fun GHC.List.filter () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun Equality.eta_equivalence_PBEq () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Tuple.$36$tc$40$$41$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun lit$36$$39$XEq () Str)
(declare-fun lq_karg$36$y$35$$35$a1Vi$35$$35$k_$35$$35$1105 () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun papp7 () Int)
(declare-fun lq_tmp$36$x$35$$35$1198 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1359 () Int)
(declare-fun f$35$$35$a1Va () Int)
(declare-fun lq_tmp$36$x$35$$35$1197 () Int)
(declare-fun ds_d2MB () Int)
(declare-fun lq_tmp$36$x$35$$35$1935 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792804428$35$$35$d2OE () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804422$35$$35$d2Oy$35$$35$k_$35$$35$1121 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun x$35$$35$a1Vo () Int)
(declare-fun lq_tmp$36$x$35$$35$1465 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1025 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ$35$$35$k_$35$$35$1387 () Int)
(declare-fun lq_karg$36$VV$35$$35$1076$35$$35$k_$35$$35$1077 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804413$35$$35$d2Op () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1138 () Int)
(declare-fun lq_tmp$36$x$35$$35$1002 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804417$35$$35$d2Ot () Int)
(declare-fun lq_karg$36$VV$35$$35$1104$35$$35$k_$35$$35$1105 () Int)
(declare-fun lq_karg$36$VV$35$$35$1446$35$$35$k_$35$$35$1447 () Int)
(declare-fun lq_karg$36$VV$35$$35$1120$35$$35$k_$35$$35$1121 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_karg$36$VV$35$$35$1386$35$$35$k_$35$$35$1387 () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Equality.$61$$61$$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1626 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.trivial () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lit$36$$39$BEq () Str)
(declare-fun lq_karg$36$Equality.eta_equivalence_pointwise$35$$35$k_$35$$35$1387 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun ds_d2NW () (Equality.PBEq Int))
(declare-fun a$35$$35$a214 () Int)
(declare-fun lq_karg$36$Equality.eta_equivalence_pointwise$35$$35$k_$35$$35$1447 () Int)
(declare-fun lq_tmp$36$x$35$$35$1098 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804427$35$$35$d2OD () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804437$35$$35$d2ON$35$$35$k_$35$$35$1447 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$1786 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804433$35$$35$d2OJ$35$$35$k_$35$$35$1447 () Int)
(declare-fun lq_tmp$36$x$35$$35$1032 () (Equality.PBEq Int))
(declare-fun lq_tmp$36$x$35$$35$1670 () Int)
(declare-fun co_a216 () Int)
(declare-fun isAdmit () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA$35$$35$k_$35$$35$1121 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox$35$$35$k_$35$$35$1102 () Int)
(declare-fun Equality.apply () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK$35$$35$k_$35$$35$1387 () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804416$35$$35$d2Os () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun VV$35$$35$F$35$$35$40 () (Equality.PBEq Int))
(declare-fun Equality.$36$WCEq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804414$35$$35$d2Oq () Int)
(declare-fun lq_tmp$36$x$35$$35$1466 () Int)
(declare-fun lq_tmp$36$x$35$$35$1026 () (Equality.PBEq Int))
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_karg$36$y$35$$35$a1Vi$35$$35$k_$35$$35$1077 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun ds_d2MA () Int)
(declare-fun lq_tmp$36$x$35$$35$1279 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz$35$$35$k_$35$$35$1102 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz$35$$35$k_$35$$35$1105 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox$35$$35$k_$35$$35$1105 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$65 () Int)
(declare-fun ds_d2NM () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox () Int)
(declare-fun lq_tmp$36$x$35$$35$1762 () Int)
(declare-fun lq_karg$36$Equality.eta_equivalence_PBEq_pointwise$35$$35$k_$35$$35$1387 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun prop () Int)
(declare-fun lq_tmp$36$x$35$$35$1139 () Int)
(declare-fun Equality.eta_equivalence_PBEq_pointwise () Int)
(declare-fun lq_tmp$36$x$35$$35$1003 () (Equality.PBEq Int))
(declare-fun lit$36$$39$CEq () Str)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_tmp$36$x$35$$35$1366 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun f$35$$35$a1Ve () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun f$35$$35$a1Vh () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun f$35$$35$a1V8 () Int)
(declare-fun VV$35$$35$F$35$$35$71 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lq_tmp$36$x$35$$35$1806 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$F$35$$35$68 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun lq_tmp$36$x$35$$35$708 () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun ds_d2NP () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_karg$36$y$35$$35$a1Vi$35$$35$k_$35$$35$1121 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804411$35$$35$d2On () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1027 () Int)
(declare-fun a$35$$35$a218 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox$35$$35$k_$35$$35$1121 () Int)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun lq_tmp$36$x$35$$35$1360 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun f$35$$35$a1Vc () Int)
(declare-fun VV$35$$35$F$35$$35$58 () (Equality.PBEq Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804423$35$$35$d2Oz$35$$35$k_$35$$35$1121 () Int)
(declare-fun a$35$$35$X1UN () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_tmp$36$x$35$$35$1522 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_karg$36$f$35$$35$a1Vh$35$$35$k_$35$$35$1121 () Int)
(declare-fun ds_d2Og () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun Equality.fromPBEq () Int)
(declare-fun GHC.Types.LiftedRep () Int)
(declare-fun y$35$$35$a1Vi () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_karg$36$VV$35$$35$1101$35$$35$k_$35$$35$1102 () Int)
(declare-fun ds_d2NN () Int)
(declare-fun VV$35$$35$F$35$$35$69 () Int)
(declare-fun ds_d2Mz () (Equality.PBEq Int))
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun ds_d2NQ () Int)
(declare-fun ds_d2Oh () Int)
(declare-fun a$35$$35$a212 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804426$35$$35$d2OC () Int)
(declare-fun lq_karg$36$y$35$$35$a1Vi$35$$35$k_$35$$35$1102 () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun x$35$$35$a1V7 () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$1942 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792804424$35$$35$d2OA () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun y$35$$35$a1Vf () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804434$35$$35$d2OK$35$$35$k_$35$$35$1447 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792804421$35$$35$d2Ox$35$$35$k_$35$$35$1077 () Int)
(declare-fun Equality.$36$WXEq () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_tmp$36$x$35$$35$1034 () Int)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (Equality.PBEq Int))
(declare-fun apply$35$$35$22 (Int (Equality.PBEq Int)) Str)
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$4 (Int Int) (Equality.PBEq Int))
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$21 (Int (Equality.PBEq Int)) Bool)
(declare-fun apply$35$$35$23 (Int (Equality.PBEq Int)) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$24 (Int (Equality.PBEq Int)) (Equality.PBEq Int))
(declare-fun apply$35$$35$20 (Int (Equality.PBEq Int)) Int)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$9 (Int Bool) (Equality.PBEq Int))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (Equality.PBEq Int))
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (Equality.PBEq Int))
(declare-fun coerce$35$$35$22 ((Equality.PBEq Int)) Str)
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$4 (Int) (Equality.PBEq Int))
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$21 ((Equality.PBEq Int)) Bool)
(declare-fun coerce$35$$35$23 ((Equality.PBEq Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$24 ((Equality.PBEq Int)) (Equality.PBEq Int))
(declare-fun coerce$35$$35$20 ((Equality.PBEq Int)) Int)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$9 (Bool) (Equality.PBEq Int))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (Equality.PBEq Int))
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (Equality.PBEq Int)) Int)
(declare-fun smt_lambda$35$$35$22 ((Equality.PBEq Int) Str) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$4 (Int (Equality.PBEq Int)) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$21 ((Equality.PBEq Int) Bool) Int)
(declare-fun smt_lambda$35$$35$23 ((Equality.PBEq Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$24 ((Equality.PBEq Int) (Equality.PBEq Int)) Int)
(declare-fun smt_lambda$35$$35$20 ((Equality.PBEq Int) Int) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (Equality.PBEq Int)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (Equality.PBEq Int)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (Equality.PBEq Int))
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(assert (distinct GHC.Types.Word16Rep GHC.Types.Int64Rep GHC.Types.LiftedRep GHC.Types.Int8Rep GHC.Types.FloatRep GHC.Types.Word32Rep GHC.Types.WordRep GHC.Types.Word8Rep GHC.Types.AddrRep GHC.Types.IntRep GHC.Types.UnliftedRep GHC.Types.DoubleRep GHC.Types.Int32Rep GHC.Types.Int16Rep GHC.Types.Word64Rep))

(assert (distinct lit$36$$39$CEq lit$36$$39$BEq lit$36$$39$XEq lit$36$PBEq lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace lit$36$Equality))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$Equality) 8))
(assert (= (strLen lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace) 46))
(assert (= (strLen lit$36$PBEq) 4))
(assert (= (strLen lit$36$$39$XEq) 4))
(assert (= (strLen lit$36$$39$BEq) 4))
(assert (= (strLen lit$36$$39$CEq) 4))
(push 1)
