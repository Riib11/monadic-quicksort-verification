(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((VFunctor.VFunctor 1)) ((par (T0) ((junk$35$$35$VFunctor.VFunctor (junk$35$$35$VFunctor.VFunctor$35$$35$0 T0)) (VFunctor.VFunctor (VFunctor.vmapF Int) (VFunctor.vmapF_vid Int))))))
(declare-datatypes ((VMonad.VMonad 1)) ((par (T0) ((junk$35$$35$VMonad.VMonad (junk$35$$35$VMonad.VMonad$35$$35$0 T0)) (VMonad.VMonad (VMonad.iFunctor (VFunctor.VFunctor T0)) (VMonad.lift Int) (VMonad.bind Int) (VMonad.bind_correct Int) (VMonad.bind_identity Int) (VMonad.bind_lift Int) (VMonad.bind_associative Int))))))
(declare-datatypes ((Equality.PBEq 1)) ((par (T0) ((Equality.XEq (Equality.XEq$35$$35$f Int) (Equality.XEq$35$$35$g Int) (Equality.XEq$35$$35$lqdc$35$$35$$36$select$35$$35$Equality.XEq$35$$35$1 Int)) (Equality.CEq (Equality.CEq$35$$35$x Int) (Equality.CEq$35$$35$y Int) (Equality.CEq$35$$35$ctx Int) (Equality.CEq$35$$35$lqdc$35$$35$$36$select$35$$35$Equality.CEq$35$$35$1 (Equality.PBEq Int))) (Equality.BEq (Equality.BEq$35$$35$x T0) (Equality.BEq$35$$35$y T0) (Equality.BEq$35$$35$pf Int))))))
(declare-fun GHC.Base.id () Int)
(declare-fun m$35$$35$a58m () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE () Int)
(declare-fun cast_as_int () Int)
(declare-fun vseq_epsilon_$35$$35$a58c () Int)
(declare-fun VV$35$$35$F$35$$35$183 () Int)
(declare-fun VMonad.vmapM2 () Int)
(declare-fun peq () Int)
(declare-fun Equality.eta_equivalence_pointwise () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun VV$35$$35$F$35$$35$156 () Int)
(declare-fun lq_tmp$36$x$35$$35$2540 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814290$35$$35$d5nI$35$$35$k_$35$$35$1520 () Int)
(declare-fun addrLen () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814288$35$$35$d5nG$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_tmp$36$x$35$$35$2364 () Int)
(declare-fun lq_karg$36$m$35$$35$a588$35$$35$k_$35$$35$1573 () Int)
(declare-fun papp5 () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a58g$35$$35$k_$35$$35$1883 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_tmp$36$x$35$$35$993 () Int)
(declare-fun lq_tmp$36$x$35$$35$2067 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_karg$36$VV$35$$35$1519$35$$35$k_$35$$35$1520 () Int)
(declare-fun VV$35$$35$F$35$$35$90 () Int)
(declare-fun VV$35$$35$F$35$$35$166 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814299$35$$35$d5nR$35$$35$k_$35$$35$1860 () Int)
(declare-fun iMonad$35$$35$a58S () (VMonad.VMonad Int))
(declare-fun Language.Haskell.Liquid.ProofCombinators.$38$$38$$38$ () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun m$35$$35$a58f () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Function.vconst () Int)
(declare-fun lq_tmp$36$x$35$$35$981 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun iMonad$35$$35$a58C () (VMonad.VMonad Int))
(declare-fun vseq_epsilon_$35$$35$a58h () Int)
(declare-fun lq_karg$36$VMonad.vseq_identity_left$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_tmp$36$x$35$$35$2772 () Int)
(declare-fun lq_tmp$36$x$35$$35$2673 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun iMonad$35$$35$a58s () (VMonad.VMonad Int))
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE$35$$35$k_$35$$35$1430 () Int)
(declare-fun lq_karg$36$VV$35$$35$1859$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58i$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_tmp$36$x$35$$35$2211 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814295$35$$35$d5nN$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_tmp$36$x$35$$35$2417 () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58c$35$$35$k_$35$$35$1520 () Int)
(declare-fun Equality.fromPBEq_f () Int)
(declare-fun Equality.eta_equivalence () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Function.vid () Int)
(declare-fun VV$35$$35$F$35$$35$122 () Int)
(declare-fun iMonad$35$$35$a58n () (VMonad.VMonad Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814295$35$$35$d5nN$35$$35$k_$35$$35$1883 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$2362 () Int)
(declare-fun lq_karg$36$m$35$$35$a588$35$$35$k_$35$$35$1430 () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58b$35$$35$k_$35$$35$1550 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun Equality.isBEq () Int)
(declare-fun lq_tmp$36$x$35$$35$2645 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2700 () Int)
(declare-fun lq_tmp$36$x$35$$35$2007 () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a58e$35$$35$k_$35$$35$1780 () (VMonad.VMonad Int))
(declare-fun Equality.alpha_equivalence_PBEq () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun f$35$$35$a58P () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun VV$35$$35$F$35$$35$149 () Int)
(declare-fun lq_karg$36$VMonad.vseq_identity_left$35$$35$k_$35$$35$1883 () Int)
(declare-fun lit$36$VMonad () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58c$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58i$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814299$35$$35$d5nR$35$$35$k_$35$$35$1883 () Int)
(declare-fun VV$35$$35$F$35$$35$157 () Int)
(declare-fun Language.Haskell.Liquid.Equational.$61$$61$. () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2541 () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814287$35$$35$d5nF$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a587$35$$35$k_$35$$35$1453 () (VMonad.VMonad Int))
(declare-fun lq_karg$36$m$35$$35$a588$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_tmp$36$x$35$$35$2365 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814288$35$$35$d5nG$35$$35$k_$35$$35$1573 () Int)
(declare-fun VMonad.vmapM_aux () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_tmp$36$x$35$$35$992 () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58b$35$$35$k_$35$$35$1430 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_tmp$36$x$35$$35$2066 () Int)
(declare-fun lq_karg$36$bind_lift_$35$$35$a58d$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814289$35$$35$d5nH$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB$35$$35$k_$35$$35$1520 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$182 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814295$35$$35$d5nN () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814299$35$$35$d5nR () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814291$35$$35$d5nJ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun VMonad.liftM_f_second () Int)
(declare-fun lq_tmp$36$x$35$$35$986 () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a587$35$$35$k_$35$$35$1520 () (VMonad.VMonad Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814287$35$$35$d5nF$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814291$35$$35$d5nJ$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_tmp$36$x$35$$35$2072 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD$35$$35$k_$35$$35$1453 () Int)
(declare-fun VV$35$$35$F$35$$35$143 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_tmp$36$x$35$$35$968 () Int)
(declare-fun lq_tmp$36$x$35$$35$1107 () Int)
(declare-fun lq_karg$36$bind_lift_$35$$35$a58d$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_tmp$36$x$35$$35$1006 () Int)
(declare-fun lq_tmp$36$x$35$$35$2216 () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a58g$35$$35$k_$35$$35$1780 () Int)
(declare-fun VMonad.vseq () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB$35$$35$k_$35$$35$1453 () Int)
(declare-fun autolen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814288$35$$35$d5nG () Int)
(declare-fun lq_tmp$36$x$35$$35$2368 () Int)
(declare-fun VV$35$$35$F$35$$35$97 () Int)
(declare-fun VV$35$$35$F$35$$35$161 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun fix$36$$62$$62$$61$$35$$35$a58a () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$2533 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a589$35$$35$k_$35$$35$1453 () Int)
(declare-fun iMonad$35$$35$a58O () (VMonad.VMonad Int))
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a58e$35$$35$k_$35$$35$1860 () (VMonad.VMonad Int))
(declare-fun VV$35$$35$F$35$$35$148 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58a$35$$35$k_$35$$35$1520 () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$85 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814297$35$$35$d5nP$35$$35$k_$35$$35$1860 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun m1$35$$35$a583 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58i$35$$35$k_$35$$35$1780 () Int)
(declare-fun lq_tmp$36$x$35$$35$2363 () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun papp2 () Int)
(declare-fun fix$36$$62$$62$$35$$35$a58g () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58b$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$VV$35$$35$1779$35$$35$k_$35$$35$1780 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_tmp$36$x$35$$35$2065 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun f$35$$35$a58t () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a589$35$$35$k_$35$$35$1430 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB () Int)
(declare-fun lq_tmp$36$x$35$$35$988 () Int)
(declare-fun f$35$$35$a58D () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun mb$35$$35$a58E () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun iMonad$35$$35$a58J () (VMonad.VMonad Int))
(declare-fun lq_karg$36$iMonad$35$$35$a587$35$$35$k_$35$$35$1573 () (VMonad.VMonad Int))
(declare-fun f$35$$35$a58T () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun VV$35$$35$F$35$$35$80 () Int)
(declare-fun lq_tmp$36$x$35$$35$1109 () Int)
(declare-fun Equality.eta_equivalence_PBEq () Int)
(declare-fun fromJust () Int)
(declare-fun VUnit.vunit () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814289$35$$35$d5nH () Int)
(declare-fun lq_tmp$36$x$35$$35$2218 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814287$35$$35$d5nF () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_tmp$36$x$35$$35$1967 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD () Int)
(declare-fun lq_tmp$36$x$35$$35$2366 () Int)
(declare-fun lift_$35$$35$a58b () Int)
(declare-fun papp7 () Int)
(declare-fun lq_tmp$36$x$35$$35$991 () Int)
(declare-fun lq_tmp$36$x$35$$35$1198 () Int)
(declare-fun bind_lift_$35$$35$a58d () Int)
(declare-fun VMonad.vmapM () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun iMonad$35$$35$a58e () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$2369 () Int)
(declare-fun x$35$$35$a58U () Int)
(declare-fun lq_tmp$36$x$35$$35$1197 () Int)
(declare-fun Language.Haskell.Liquid.Equational.$42$$42$$42$ () Int)
(declare-fun ma$35$$35$a58y () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun mb$35$$35$a58z () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814297$35$$35$d5nP () Int)
(declare-fun lq_tmp$36$x$35$$35$2532 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$987 () Int)
(declare-fun x$35$$35$a58u () Int)
(declare-fun f$35$$35$a58K () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814291$35$$35$d5nJ$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_tmp$36$x$35$$35$2073 () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a58g$35$$35$k_$35$$35$1860 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814302$35$$35$d5nU () Int)
(declare-fun lq_tmp$36$x$35$$35$2774 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun m$35$$35$a58p () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun VV$35$$35$F$35$$35$179 () Int)
(declare-fun lq_tmp$36$x$35$$35$1106 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_tmp$36$x$35$$35$2217 () Int)
(declare-fun fix$36$$62$$62$$61$$35$$35$a57W () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun Language.Haskell.Liquid.Equational.$63$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814294$35$$35$d5nM$35$$35$k_$35$$35$1780 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2414 () Int)
(declare-fun lq_tmp$36$x$35$$35$1604 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2616 () Int)
(declare-fun lq_tmp$36$x$35$$35$2010 () Int)
(declare-fun lq_tmp$36$x$35$$35$1002 () Int)
(declare-fun lq_tmp$36$x$35$$35$2212 () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58j$35$$35$k_$35$$35$1860 () Int)
(declare-fun Function.extensionality () Int)
(declare-fun VV$35$$35$F$35$$35$93 () Int)
(declare-fun lq_karg$36$VV$35$$35$1572$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$VV$35$$35$1452$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58a$35$$35$k_$35$$35$1550 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_karg$36$VV$35$$35$1882$35$$35$k_$35$$35$1883 () Int)
(declare-fun VMonad.kleisli () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Equality.$61$$61$$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC$35$$35$k_$35$$35$1550 () Int)
(declare-fun iMonad$35$$35$a580 () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$982 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814301$35$$35$d5nT$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_karg$36$m$35$$35$a58f$35$$35$k_$35$$35$1780 () Int)
(declare-fun lq_tmp$36$x$35$$35$2009 () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_tmp$36$x$35$$35$2771 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814296$35$$35$d5nO$35$$35$k_$35$$35$1780 () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58h$35$$35$k_$35$$35$1780 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58c$35$$35$k_$35$$35$1430 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun VMonad.raw_kleisli () Int)
(declare-fun Language.Haskell.Liquid.Equational.eq () Int)
(declare-fun lq_tmp$36$x$35$$35$1108 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814290$35$$35$d5nI () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814298$35$$35$d5nQ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814294$35$$35$d5nM () Int)
(declare-fun lq_tmp$36$x$35$$35$2367 () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun VV$35$$35$F$35$$35$98 () Int)
(declare-fun lq_tmp$36$x$35$$35$990 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814300$35$$35$d5nS$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_tmp$36$x$35$$35$1199 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$2064 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814296$35$$35$d5nO () Int)
(declare-fun m2$35$$35$a584 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814292$35$$35$d5nK () Int)
(declare-fun lq_karg$36$m$35$$35$a588$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_tmp$36$x$35$$35$989 () Int)
(declare-fun isAdmit () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a587$35$$35$k_$35$$35$1550 () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$2531 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814289$35$$35$d5nH$35$$35$k_$35$$35$1550 () Int)
(declare-fun Equality.apply () Int)
(declare-fun VMonad.liftM_f () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB$35$$35$k_$35$$35$1550 () Int)
(declare-fun iMonad$35$$35$a586 () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$984 () Int)
(declare-fun lq_tmp$36$x$35$$35$2070 () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD$35$$35$k_$35$$35$1550 () Int)
(declare-fun Equality.$36$WCEq () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814300$35$$35$d5nS$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_tmp$36$x$35$$35$2755 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814286$35$$35$d5nE$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_tmp$36$x$35$$35$1105 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_tmp$36$x$35$$35$1004 () Int)
(declare-fun lq_tmp$36$x$35$$35$2214 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814292$35$$35$d5nK$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814290$35$$35$d5nI$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814287$35$$35$d5nF$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_karg$36$m$35$$35$a588$35$$35$k_$35$$35$1520 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Function.$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2069 () Int)
(declare-fun lq_tmp$36$x$35$$35$1914 () Int)
(declare-fun lq_karg$36$bind_lift_$35$$35$a58d$35$$35$k_$35$$35$1550 () Int)
(declare-fun x$35$$35$a58F () Int)
(declare-fun f$35$$35$a58x () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58h$35$$35$k_$35$$35$1860 () Int)
(declare-fun fix$36$$62$$62$$35$$35$a589 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB$35$$35$k_$35$$35$1430 () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58a$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD$35$$35$k_$35$$35$1430 () Int)
(declare-fun ds_d5mq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814304$35$$35$d5nW () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58b$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_tmp$36$x$35$$35$983 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2008 () Int)
(declare-fun lq_tmp$36$x$35$$35$2770 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814298$35$$35$d5nQ$35$$35$k_$35$$35$1860 () Int)
(declare-fun VMonad.vmapM2_aux2 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814294$35$$35$d5nM$35$$35$k_$35$$35$1860 () Int)
(declare-fun lq_tmp$36$x$35$$35$2769 () Int)
(declare-fun g$35$$35$a57Y () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$2415 () Int)
(declare-fun prop () Int)
(declare-fun Equality.eta_equivalence_PBEq_pointwise () Int)
(declare-fun lq_tmp$36$x$35$$35$2011 () Int)
(declare-fun lq_tmp$36$x$35$$35$2213 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun f$35$$35$a57X () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814300$35$$35$d5nS () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_karg$36$m$35$$35$a58f$35$$35$k_$35$$35$1860 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun VV$35$$35$F$35$$35$102 () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_karg$36$VV$35$$35$1549$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58j$35$$35$k_$35$$35$1780 () Int)
(declare-fun x$35$$35$a58Q () Int)
(declare-fun lq_karg$36$bind_lift_$35$$35$a58d$35$$35$k_$35$$35$1430 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun f$35$$35$a58o () Int)
(declare-fun lq_karg$36$VV$35$$35$1429$35$$35$k_$35$$35$1430 () Int)
(declare-fun VMonad.vseq_epsilon () Int)
(declare-fun VMonad.vseq_identity_left () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814296$35$$35$d5nO$35$$35$k_$35$$35$1860 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58c$35$$35$k_$35$$35$1550 () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a589$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$m$35$$35$a58f$35$$35$k_$35$$35$1883 () Int)
(declare-fun fix$36$$62$$62$$61$$35$$35$a58i () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun x$35$$35$a58L () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814296$35$$35$d5nO$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_tmp$36$x$35$$35$2720 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58h$35$$35$k_$35$$35$1883 () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$F$35$$35$187 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun VV$35$$35$F$35$$35$152 () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814298$35$$35$d5nQ$35$$35$k_$35$$35$1883 () Int)
(declare-fun iMonad$35$$35$a58l () (VMonad.VMonad Int))
(declare-fun lq_karg$36$lift_$35$$35$a58b$35$$35$k_$35$$35$1453 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814294$35$$35$d5nM$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_tmp$36$x$35$$35$2360 () Int)
(declare-fun y$35$$35$a58M () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a587$35$$35$k_$35$$35$1430 () (VMonad.VMonad Int))
(declare-fun GHC.Num.$42$ () Int)
(declare-fun y$35$$35$a58V () Int)
(declare-fun lq_tmp$36$x$35$$35$2215 () Int)
(declare-fun lq_tmp$36$x$35$$35$2413 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814289$35$$35$d5nH$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814287$35$$35$d5nF$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814290$35$$35$d5nI$35$$35$k_$35$$35$1550 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814288$35$$35$d5nG$35$$35$k_$35$$35$1520 () Int)
(declare-fun lq_tmp$36$x$35$$35$2068 () Int)
(declare-fun lq_karg$36$bind_lift_$35$$35$a58d$35$$35$k_$35$$35$1573 () Int)
(declare-fun Language.Haskell.Liquid.Equational.QED () Int)
(declare-fun Function.vdiagonalize () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814283$35$$35$d5nB$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_tmp$36$x$35$$35$2530 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun iMonad$35$$35$a587 () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$985 () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58a$35$$35$k_$35$$35$1430 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814301$35$$35$d5nT () Int)
(declare-fun Function.vcomp () Int)
(declare-fun lq_tmp$36$x$35$$35$2071 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814285$35$$35$d5nD$35$$35$k_$35$$35$1573 () Int)
(declare-fun lq_tmp$36$x$35$$35$2529 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC$35$$35$k_$35$$35$1430 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814303$35$$35$d5nV () Int)
(declare-fun lq_tmp$36$x$35$$35$2754 () Int)
(declare-fun iMonad$35$$35$a58w () (VMonad.VMonad Int))
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_tmp$36$x$35$$35$2773 () Int)
(declare-fun VV$35$$35$F$35$$35$118 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814295$35$$35$d5nN$35$$35$k_$35$$35$1780 () Int)
(declare-fun VMonad.vmapM2_aux1 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_karg$36$$62$$62$$61$$35$$35$a58a$35$$35$k_$35$$35$1453 () Int)
(declare-fun VMonad.vseq_identity_right () Int)
(declare-fun lq_tmp$36$x$35$$35$2210 () Int)
(declare-fun lq_tmp$36$x$35$$35$2416 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a589$35$$35$k_$35$$35$1520 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun lift_$35$$35$a58j () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun Equality.fromPBEq () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lq_karg$36$iMonad$35$$35$a58e$35$$35$k_$35$$35$1883 () (VMonad.VMonad Int))
(declare-fun Function.vapply () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814284$35$$35$d5nC$35$$35$k_$35$$35$1453 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_karg$36$VMonad.vseq_identity_left$35$$35$k_$35$$35$1780 () Int)
(declare-fun iMonad$35$$35$a582 () (VMonad.VMonad Int))
(declare-fun lq_tmp$36$x$35$$35$980 () Int)
(declare-fun lq_tmp$36$x$35$$35$2209 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792814297$35$$35$d5nP$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_karg$36$$62$$62$$35$$35$a589$35$$35$k_$35$$35$1550 () Int)
(declare-fun lq_tmp$36$x$35$$35$1070 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun VV$35$$35$F$35$$35$117 () Int)
(declare-fun lq_karg$36$vseq_epsilon_$35$$35$a58c$35$$35$k_$35$$35$1573 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Function.vflip () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun VMonad.vseq_identity () Int)
(declare-fun m$35$$35$a588 () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792814293$35$$35$d5nL () Int)
(declare-fun lq_tmp$36$x$35$$35$2361 () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun x$35$$35$a57Z () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun Function.vconstF () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lq_karg$36$lift_$35$$35$a58j$35$$35$k_$35$$35$1883 () Int)
(declare-fun lq_tmp$36$x$35$$35$1069 () Int)
(declare-fun Equality.$36$WXEq () Int)
(declare-fun lq_tmp$36$x$35$$35$2721 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$21 (Int (VMonad.VMonad Int)) Bool)
(declare-fun apply$35$$35$9 (Int Bool) (VMonad.VMonad Int))
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$20 (Int (VMonad.VMonad Int)) Int)
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$23 (Int (VMonad.VMonad Int)) (_ BitVec 32))
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$22 (Int (VMonad.VMonad Int)) Str)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) (VMonad.VMonad Int))
(declare-fun apply$35$$35$4 (Int Int) (VMonad.VMonad Int))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$24 (Int (VMonad.VMonad Int)) (VMonad.VMonad Int))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun coerce$35$$35$21 ((VMonad.VMonad Int)) Bool)
(declare-fun coerce$35$$35$9 (Bool) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$20 ((VMonad.VMonad Int)) Int)
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$23 ((VMonad.VMonad Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$22 ((VMonad.VMonad Int)) Str)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$4 (Int) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$24 ((VMonad.VMonad Int)) (VMonad.VMonad Int))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun smt_lambda$35$$35$21 ((VMonad.VMonad Int) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$20 ((VMonad.VMonad Int) Int) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$23 ((VMonad.VMonad Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$22 ((VMonad.VMonad Int) Str) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$24 ((VMonad.VMonad Int) (VMonad.VMonad Int)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (VMonad.VMonad Int))
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)

(assert (distinct lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace lit$36$VMonad))


(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$VMonad) 6))
(assert (= (strLen lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace) 46))
(push 1)
