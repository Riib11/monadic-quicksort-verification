1:1-1:1::$trModule :: "GHC.Types.Module"
45:1-45:12::raw_kleisli :: "forall a b c d .\nx1:(a c -> (c -> a d) -> a d) -> x5:(b -> a c) -> x7:(c -> a d) -> x9:b -> {VV : a d | VV == raw_kleisli x1 x5 x7 x9\n                                                                                       && VV == x1 (x5 x9) x7}"
45:13-45:18::>>= :: "a b -> (b -> a c) -> a c"
45:19-45:20::f :: "a -> b c"
45:21-45:22::g :: "a -> b c"
45:23-45:24::x :: "a"
45:27-45:30::lq_anf$##7205759403792814281 :: "{v : a b | v == f x}"
45:29-45:30::x :: "{VV : a | VV == x}"
45:35-45:36::g :: "a -> b c"
50:1-50:8::kleisli :: "forall a b c d .\nx1:(VMonad.VMonad a) -> x2:(b -> a c) -> x4:(c -> a d) -> x6:b -> {VV : a d | VV == kleisli x1 x2 x4 x6\n                                                                              && VV == raw_kleisli (bind x1) x2 x4 x6}"
50:9-50:15::iMonad :: "(VMonad.VMonad a)"
50:18-50:35::raw_kleisli :: "{VV : forall a b c d .\n      x1:(a c -> (c -> a d) -> a d) -> x5:(b -> a c) -> x7:(c -> a d) -> x9:b -> {v : a d | v == raw_kleisli x1 x5 x7 x9\n                                                                                            && v == x1 (x5 x9) x7} | VV == raw_kleisli}"
50:30-50:35::>>= :: "a b -> (b -> a c) -> a c"
52:5-52:10::>>= :: "a b -> (b -> a c) -> a c"
52:13-52:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
52:18-52:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
106:1-106:5::vseq :: "forall a b c .\nx1:(VMonad.VMonad a) -> x2:a b -> x3:a c -> {VV : a c | VV == vseq x1 x2 x3\n                                                        && VV == bind x1 x2 (vconst x3)}"
106:6-106:12::iMonad :: "(VMonad.VMonad a)"
106:13-106:15::m1 :: "a b"
106:16-106:18::m2 :: "a b"
106:21-106:23::m1 :: "{v : a b | v == m1}"
106:28-106:37::lq_anf$##7205759403792814282 :: "x1:a -> {v : b c | v == vconst m2 x1\n                   && v == m2}"
106:35-106:37::m2 :: "{v : a b | v == m2}"
108:5-108:10::>>= :: "a b -> (b -> a c) -> a c"
108:13-108:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
108:18-108:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
113:1-113:13::vseq_epsilon :: "forall a .\nx1:(VMonad.VMonad a) -> {VV : a () | VV == vseq_epsilon x1\n                                     && VV == lift x1 ()}"
113:14-113:20::iMonad :: "(VMonad.VMonad a)"
113:28-113:34::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
113:35-113:37::() :: "{v : () | v == ()}"
121:1-121:19::vseq_identity_left :: "forall a .\nx1:(VMonad.VMonad a) -> x2:a () -> {VV : () | vseq x1 (vseq_epsilon x1) x2 == x2}"
121:20-121:26::iMonad :: "(VMonad.VMonad a)"
121:27-121:28::m :: "a ()"
122:3-122:16::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()\n            && v == vseq_epsilon_}"
122:20-122:21::m :: "{v : a () | v == m}"
123:9-123:20::lq_anf$##7205759403792814284 :: "{v : a () | v == lift_ vunit}"
123:15-123:20::vunit :: "{v : () | v == ()\n          && v == vunit}"
123:25-123:33::lq_anf$##7205759403792814285 :: "x1:() -> {v : a () | v == vconst m x1\n                     && v == m}"
123:32-123:33::m :: "{v : a () | v == m}"
124:9-124:55::lq_anf$##7205759403792814291 :: "{v : a ()<pa> | true}"
124:10-124:24::lq_anf$##7205759403792814288 :: "{v : a () | v == vconst m vunit\n            && v == m}"
124:17-124:18::m :: "{v : a () | v == m}"
124:19-124:24::vunit :: "{v : () | v == ()\n          && v == vunit}"
124:27-124:54::lq_anf$##7205759403792814290 :: "()"
124:38-124:48::lq_anf$##7205759403792814289 :: "x1:() -> {v : a () | v == vconst m x1\n                     && v == m}"
124:46-124:47::m :: "{v : a () | v == m}"
124:49-124:54::vunit :: "{v : () | v == ()\n          && v == vunit}"
125:9-125:10::m :: "{v : a () | v == m}"
126:9-126:12::QED :: "{v : Language.Haskell.Liquid.Equational.QED | v == QED}"
128:5-128:9::>> :: "x1:a () -> x2:a () -> {v : a () | v == vseq iMonad x1 x2\n                                  && v == bind iMonad x1 (vconst x2)}"
128:12-128:23::_ :: "x1:a () -> x2:a () -> {v : a () | v == vseq iMonad x1 x2\n                                  && v == bind iMonad x1 (vconst x2)}"
128:17-128:23::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
129:5-129:10::>>= :: "a () -> (() -> a ()) -> a ()"
129:13-129:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
129:18-129:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
130:5-130:10::lift_ :: "() -> a ()"
130:13-130:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
130:18-130:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
131:5-131:18::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()}"
131:21-131:40::_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()}"
131:34-131:40::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
132:5-132:15::bind_lift_ :: "k:(() -> a ()) -> x:() -> {v : () | bind iMonad (lift iMonad x) k == k x}"
132:18-132:34::_ :: "{VV : forall a b .\n      k:(a -> c b) -> x:a -> {v : () | bind iMonad (lift iMonad x) k == k x} | VV == bind_lift iMonad}"
132:28-132:34::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
140:1-140:20::vseq_identity_right :: "forall a .\nx1:(VMonad.VMonad a) -> x2:a () -> {VV : () | vseq x1 x2 (vseq_epsilon x1) == x2}"
140:21-140:27::iMonad :: "(VMonad.VMonad a)"
140:28-140:29::m :: "a ()"
141:3-141:4::m :: "{v : a () | v == m}"
141:8-141:21::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()\n            && v == vseq_epsilon_}"
142:9-142:10::m :: "{v : a () | v == m}"
142:15-142:35::lq_anf$##7205759403792814295 :: "x1:() -> {v : a () | v == vconst vseq_epsilon_ x1\n                     && v == vseq_epsilon_}"
142:22-142:35::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()\n            && v == vseq_epsilon_}"
143:9-143:10::m :: "{v : a () | v == m}"
143:15-143:35::lq_anf$##7205759403792814299 :: "() -> a ()"
143:22-143:35::lq_anf$##7205759403792814298 :: "{v : a () | v == lift_ vunit}"
143:29-143:34::vunit :: "{v : () | v == ()\n          && v == vunit}"
144:9-144:10::m :: "{v : a () | v == m}"
145:9-145:12::QED :: "{v : Language.Haskell.Liquid.Equational.QED | v == QED}"
147:5-147:9::>> :: "x1:a () -> x2:a () -> {v : a () | v == vseq iMonad x1 x2\n                                  && v == bind iMonad x1 (vconst x2)}"
147:12-147:23::_ :: "x1:a () -> x2:a () -> {v : a () | v == vseq iMonad x1 x2\n                                  && v == bind iMonad x1 (vconst x2)}"
147:17-147:23::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
148:5-148:18::vseq_epsilon_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()}"
148:21-148:40::_ :: "{v : a () | v == vseq_epsilon iMonad\n            && v == lift iMonad ()}"
148:34-148:40::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
149:5-149:10::>>= :: "a () -> (() -> a ()) -> a ()"
149:13-149:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
149:18-149:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
150:5-150:10::lift_ :: "() -> a ()"
150:13-150:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
150:18-150:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
159:1-159:14::vseq_identity :: "forall a .\nx1:(VMonad.VMonad a) -> x2:a () -> {VV : () | vseq x1 (vseq_epsilon x1) x2 == x2\n                                              && vseq x1 x2 (vseq_epsilon x1) == x2}"
159:15-159:21::iMonad :: "(VMonad.VMonad a)"
159:22-159:23::m :: "a ()"
160:3-160:30::lq_anf$##7205759403792814303 :: "{v : () | vseq iMonad (vseq_epsilon iMonad) m == m\n          && v == vseq_identity_left iMonad m}"
160:22-160:28::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
160:29-160:30::m :: "{v : a () | v == m}"
160:35-160:63::lq_anf$##7205759403792814304 :: "{v : () | vseq iMonad m (vseq_epsilon iMonad) == m\n          && v == vseq_identity_right iMonad m}"
160:55-160:61::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
160:62-160:63::m :: "{v : a () | v == m}"
249:1-249:6::vmapM :: "forall a b c .\nx1:(VMonad.VMonad a) -> x2:(b -> c) -> x4:a b -> {VV : a c | VV == vmapM x1 x2 x4\n                                                             && VV == bind x1 x4 (liftM_f x1 x2)}"
249:7-249:13::iMonad :: "(VMonad.VMonad a)"
249:14-249:15::f :: "a -> b"
249:16-249:17::m :: "a b"
249:20-249:21::m :: "{v : a b | v == m}"
249:26-249:36::lq_anf$##7205759403792814310 :: "x1:a -> {v : b c | v == liftM_f iMonad f x1\n                   && v == lift iMonad (f x1)}"
249:35-249:36::f :: "a -> b"
251:5-251:10::>>= :: "a b -> (b -> a c) -> a c"
251:13-251:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
251:18-251:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
252:5-252:13::liftM_f_ :: "x1:(a -> b) -> x3:a -> {v : c b | v == liftM_f iMonad x1 x3\n                                  && v == lift iMonad (x1 x3)}"
252:16-252:30::_ :: "x1:(a -> b) -> x3:a -> {v : c b | v == liftM_f iMonad x1 x3\n                                  && v == lift iMonad (x1 x3)}"
252:24-252:30::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
255:1-255:10::vmapM_aux :: "forall a b c . (VMonad.VMonad a) -> (b -> c) -> b -> a c"
255:11-255:17::iMonad :: "(VMonad.VMonad a)"
255:18-255:19::f :: "a -> b"
255:20-255:21::x :: "a"
255:24-255:35::lift_ :: "a -> b a"
255:30-255:35::lq_anf$##7205759403792814305 :: "{VV : a | VV == f x}"
255:33-255:34::x :: "{VV : a | VV == x}"
257:5-257:10::lift_ :: "a -> b a"
257:13-257:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
257:18-257:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
262:1-262:7::vmapM2 :: "forall a b c d .\nx1:(VMonad.VMonad a) -> x2:(b -> c -> d) -> x5:a b -> x6:a c -> {VV : a d | VV == vmapM2 x1 x2 x5 x6\n                                                                            && VV == bind x1 x5 (vmapM2_aux1 x1 x2 x6)}"
262:8-262:14::iMonad :: "(VMonad.VMonad a)"
262:15-262:16::f :: "a -> b -> c"
262:17-262:19::ma :: "a b"
262:20-262:22::mb :: "a b"
262:25-262:27::ma :: "{v : a b | v == ma}"
262:32-262:49::lq_anf$##7205759403792814308 :: "x1:a -> {v : b c | v == vmapM2_aux1 iMonad f mb x1\n                   && v == bind iMonad mb (vmapM2_aux2 iMonad f x1)}"
262:45-262:46::f :: "a -> b -> c"
262:47-262:49::mb :: "{v : a b | v == mb}"
264:5-264:10::>>= :: "a b -> (b -> a c) -> a c"
264:13-264:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
264:18-264:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
265:5-265:17::vmapM2_aux1_ :: "x1:(a -> b -> c) -> x4:d b -> x5:a -> {v : d c | v == vmapM2_aux1 iMonad x1 x4 x5\n                                                 && v == bind iMonad x4 (vmapM2_aux2 iMonad x1 x5)}"
265:20-265:38::_ :: "x1:(a -> b -> c) -> x4:d b -> x5:a -> {v : d c | v == vmapM2_aux1 iMonad x1 x4 x5\n                                                 && v == bind iMonad x4 (vmapM2_aux2 iMonad x1 x5)}"
265:32-265:38::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
269:1-269:12::vmapM2_aux1 :: "forall a b c d .\nx1:(VMonad.VMonad a) -> x2:(b -> c -> d) -> x5:a c -> x6:b -> {VV : a d | VV == vmapM2_aux1 x1 x2 x5 x6\n                                                                          && VV == bind x1 x5 (vmapM2_aux2 x1 x2 x6)}"
269:13-269:19::iMonad :: "(VMonad.VMonad a)"
269:20-269:21::f :: "a -> b -> c"
269:22-269:24::mb :: "a b"
269:25-269:26::x :: "a"
269:29-269:31::mb :: "{v : a b | v == mb}"
269:36-269:52::lq_anf$##7205759403792814307 :: "x1:a -> {v : b c | v == vmapM2_aux2 iMonad f x x1\n                   && v == lift iMonad (f x x1)}"
269:49-269:50::f :: "a -> b -> c"
269:51-269:52::x :: "{VV : a | VV == x}"
272:5-272:10::>>= :: "a b -> (b -> a c) -> a c"
272:13-272:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
272:18-272:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
273:5-273:17::vmapM2_aux2_ :: "x1:(a -> b -> c) -> x4:a -> x5:b -> {v : d c | v == vmapM2_aux2 iMonad x1 x4 x5\n                                               && v == lift iMonad (x1 x4 x5)}"
273:20-273:38::_ :: "x1:(a -> b -> c) -> x4:a -> x5:b -> {v : d c | v == vmapM2_aux2 iMonad x1 x4 x5\n                                               && v == lift iMonad (x1 x4 x5)}"
273:32-273:38::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
277:1-277:12::vmapM2_aux2 :: "forall a b c d .\nx1:(VMonad.VMonad a) -> x2:(b -> c -> d) -> x5:b -> x6:c -> {VV : a d | VV == vmapM2_aux2 x1 x2 x5 x6\n                                                                        && VV == lift x1 (x2 x5 x6)}"
277:13-277:19::iMonad :: "(VMonad.VMonad a)"
277:20-277:21::f :: "a -> b -> c"
277:22-277:23::x :: "a"
277:24-277:25::y :: "a"
277:28-277:41::lift_ :: "a -> b a"
277:34-277:41::lq_anf$##7205759403792814306 :: "{VV : a | VV == f x y}"
277:37-277:38::x :: "{VV : a | VV == x}"
277:39-277:40::y :: "{VV : a | VV == y}"
279:5-279:10::lift_ :: "a -> b a"
279:13-279:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
279:18-279:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
289:1-289:8::liftM_f :: "forall a b c .\nx1:(VMonad.VMonad a) -> x2:(b -> c) -> x4:b -> {VV : a c | VV == liftM_f x1 x2 x4\n                                                           && VV == lift x1 (x2 x4)}"
289:9-289:15::iMonad :: "(VMonad.VMonad a)"
289:16-289:17::f :: "a -> b"
289:18-289:19::x :: "a"
289:22-289:33::lift_ :: "a -> b a"
289:28-289:33::lq_anf$##7205759403792814309 :: "{VV : a | VV == f x}"
289:31-289:32::x :: "{VV : a | VV == x}"
291:5-291:10::lift_ :: "a -> b a"
291:13-291:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
291:18-291:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
302:1-302:15::liftM_f_second :: "forall a b c d .\nx1:(VMonad.VMonad a) -> x2:(c -> a d) -> x4:(b, c) -> {VV : a (b, d) | VV == liftM_f_second x1 x2 x4\n                                                                       && VV == bind x1 (x2 (lqdc##$select x4)) lam y'##a58Y : d##xo . lift x1 ((,) (lqdc##$select x4) y'##a58Y)}"
302:16-302:22::iMonad :: "(VMonad.VMonad a)"
302:23-302:24::f :: "a -> b c"
302:34-302:68::lq_anf$##7205759403792814314 :: "a -> b (c, a)"
302:40-302:45::lq_anf$##7205759403792814312 :: "{v : a b | v == f y}"
302:43-302:44::y :: "{VV : a | VV == y}"
302:46-302:68::lift_ :: "(a, b) -> c (a, b)"
302:48-302:50::y' :: "a"
302:60-302:67::lq_anf$##7205759403792814313 :: "{v : (a, b) | x_Tuple22 v == y'\n              && x_Tuple21 v == x\n              && lqdc##$select v == y'\n              && lqdc##$select v == x\n              && snd v == y'\n              && fst v == x\n              && v == (,) x y'}"
302:61-302:62::x :: "{VV : a | VV == x}"
302:64-302:66::y' :: "{VV : a | VV == y'}"
304:5-304:10::lift_ :: "(a, b) -> c (a, b)"
304:13-304:24::_ :: "{VV : forall a . a -> b a | VV == lift iMonad}"
304:18-304:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"
305:5-305:10::bind_ :: "a b -> (b -> a (c, b)) -> a (c, b)"
305:13-305:24::_ :: "{VV : forall a b . c a -> (a -> c b) -> c b | VV == bind iMonad}"
305:18-305:24::iMonad :: "{v : (VMonad.VMonad a) | v == iMonad}"