(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Test.LList 1)) ((par (T0) ((Test.LCons (Test.LCons$35$$35$lqdc$35$$35$$36$select$35$$35$Test.LCons$35$$35$1 T0) (Test.LCons$35$$35$lqdc$35$$35$$36$select$35$$35$Test.LCons$35$$35$2 (Test.LList T0))) Test.LNil))))
(declare-fun lq_tmp$36$x$35$$35$1785 () (Test.LList Int))
(declare-fun Test.permute_LCons () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun x$35$$35$aaQm () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_tmp$36$x$35$$35$1552 () (Test.LList Int))
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_tmp$36$x$35$$35$2129 () (Test.LList Int))
(declare-fun lq_anf$36$$35$$35$7205759403792835730$35$$35$daXw () (Test.LList Int))
(declare-fun Test.llist1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835735$35$$35$daXB () Int)
(declare-fun Test.lzip () Int)
(declare-fun VV$35$$35$F$35$$35$23 () (Test.LList (Test.LList Int)))
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835719$35$$35$daXl () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun Test.permute_LCons_f2 () Int)
(declare-fun x$35$$35$aaQv () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun ys$35$$35$aaQL () (Test.LList Int))
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_karg$36$x$35$$35$aaQQ$35$$35$k_$35$$35$1964 () Int)
(declare-fun f$35$$35$aaQx () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1494 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$1369 () (Test.LList Int))
(declare-fun Test.lappend () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun x$35$$35$aaQK () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1217 () (Test.LList Int))
(declare-fun Test.split () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun xs$35$$35$aaQH () (Test.LList Int))
(declare-fun lq_karg$36$VV$35$$35$2097$35$$35$k_$35$$35$2098 () (Test.LList (Test.LList Int)))
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1380 () (Test.LList Int))
(declare-fun Language.Haskell.Liquid.Equational.$61$$61$. () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_tmp$36$x$35$$35$846 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun Control.Exception.Base.recSelError () Int)
(declare-fun zs$35$$35$aaQM () (Test.LList Int))
(declare-fun Test.lbind () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835732$35$$35$daXy$35$$35$k_$35$$35$2098 () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$1030 () (Test.LList Int))
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun ds_daWw () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_tmp$36$x$35$$35$2050 () (Test.LList Int))
(declare-fun xs$35$$35$aaQR () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$766 () Int)
(declare-fun x$35$$35$aaQq () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun ds_daVS () (Test.LList Int))
(declare-fun GHC.List.dropWhile () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$2368 () Int)
(declare-fun xs$35$$35$aaQr () (Test.LList Int))
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun x$35$$35$aaQQ () Int)
(declare-fun lit$36$vhead () Str)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun x$35$$35$aaQj () Int)
(declare-fun lit$36$LList () Str)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun f$35$$35$aaQt () Int)
(declare-fun ds_daVH () (Test.LList Int))
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun xs$35$$35$aaQy () (Test.LList Int))
(declare-fun papp2 () Int)
(declare-fun lq_tmp$36$x$35$$35$2341 () Int)
(declare-fun lit$36$Test () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792835732$35$$35$daXy () (Test.LList (Test.LList Int)))
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1716 () Int)
(declare-fun Test.permute () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_tmp$36$x$35$$35$1437 () (Test.LList Int))
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_tmp$36$x$35$$35$1550 () (Test.LList Int))
(declare-fun fromJust () Int)
(declare-fun Test.vtail () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_karg$36$x$35$$35$aaQQ$35$$35$k_$35$$35$2098 () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2084 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$1564 () (Test.LList Int))
(declare-fun Language.Haskell.Liquid.Equational.$42$$42$$42$ () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$1326 () (Test.LList Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835730$35$$35$daXw$35$$35$k_$35$$35$2098 () (Test.LList Int))
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun ys$35$$35$aaQz () (Test.LList Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835735$35$$35$daXB$35$$35$k_$35$$35$2098 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun VV$35$$35$F$35$$35$43 () (Test.LList (Test.LList Int)))
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$952 () (Test.LList Int))
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun Language.Haskell.Liquid.Equational.$63$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835732$35$$35$daXy$35$$35$k_$35$$35$1964 () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$1831 () (Test.LList Int))
(declare-fun Test.llist2 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun ds_daVw () (Test.LList Int))
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun VV$35$$35$F$35$$35$20 () (Test.LList (Test.LList Int)))
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun VV$35$$35$F$35$$35$39 () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$1460 () (Test.LList Int))
(declare-fun Test.permute_LCons_f1 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.Liquid.Equational.eq () Int)
(declare-fun lq_tmp$36$x$35$$35$1449 () (Test.LList Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835731$35$$35$daXx$35$$35$k_$35$$35$2098 () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$1551 () (Test.LList Int))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835733$35$$35$daXz$35$$35$k_$35$$35$2098 () (Test.LList (Test.LList Int)))
(declare-fun f$35$$35$aaQp () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun x$35$$35$aaQN () Int)
(declare-fun lit$36$$39$LCons () Str)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun y$35$$35$aaQo () Int)
(declare-fun lq_tmp$36$x$35$$35$2039 () (Test.LList Int))
(declare-fun zs$39$$35$$35$aaQP () (Test.LList Int))
(declare-fun lq_karg$36$xs$35$$35$aaQR$35$$35$k_$35$$35$1964 () (Test.LList Int))
(declare-fun x$35$$35$aaQn () Int)
(declare-fun lq_tmp$36$x$35$$35$1010 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$793 () Int)
(declare-fun ys$35$$35$aaQi () (Test.LList Int))
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun lq_tmp$36$x$35$$35$665 () (Test.LList Int))
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$VV$35$$35$1963$35$$35$k_$35$$35$1964 () (Test.LList (Test.LList Int)))
(declare-fun VV$35$$35$F$35$$35$40 () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$764 () Int)
(declare-fun lq_tmp$36$x$35$$35$951 () (Test.LList Int))
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_tmp$36$x$35$$35$948 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$2348 () Int)
(declare-fun x$35$$35$aaQC () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1120 () (Test.LList Int))
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun Test.permute_LCons_check () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835736$35$$35$daXC () (Test.LList (Test.LList Int)))
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lit$36$$39$LNil () Str)
(declare-fun xs$35$$35$aaQw () (Test.LList Int))
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835734$35$$35$daXA () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$1830 () (Test.LList Int))
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun x$35$$35$aaQI () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835730$35$$35$daXw$35$$35$k_$35$$35$1964 () (Test.LList Int))
(declare-fun Test.lmap () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun lq_tmp$36$x$35$$35$1248 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$2225 () (Test.LList Int))
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun lq_tmp$36$x$35$$35$1237 () (Test.LList Int))
(declare-fun xs$35$$35$aaQJ () (Test.LList Int))
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$2324 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1104 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$949 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835736$35$$35$daXC$35$$35$k_$35$$35$2098 () (Test.LList (Test.LList Int)))
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835734$35$$35$daXA$35$$35$k_$35$$35$2098 () (Test.LList Int))
(declare-fun Test.lsingleton () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835737$35$$35$daXD () (Test.LList (Test.LList Int)))
(declare-fun lq_tmp$36$x$35$$35$1306 () (Test.LList Int))
(declare-fun lit$36$vtail () Str)
(declare-fun ys$39$$35$$35$aaQO () (Test.LList Int))
(declare-fun Language.Haskell.Liquid.Equational.QED () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lq_tmp$36$x$35$$35$1041 () (Test.LList Int))
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_tmp$36$x$35$$35$765 () Int)
(declare-fun lq_tmp$36$x$35$$35$950 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun xs$35$$35$aaQD () (Test.LList Int))
(declare-fun ds_daWl () (Test.LList Int))
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_tmp$36$x$35$$35$955 () (Test.LList Int))
(declare-fun lq_tmp$36$x$35$$35$1426 () (Test.LList Int))
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792835731$35$$35$daXx$35$$35$k_$35$$35$1964 () (Test.LList (Test.LList Int)))
(declare-fun GHC.Classes.min () Int)
(declare-fun Test.vhead () Int)
(declare-fun lq_karg$36$xs$35$$35$aaQR$35$$35$k_$35$$35$2098 () (Test.LList Int))
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun x$35$$35$aaQG () Int)
(declare-fun lq_tmp$36$x$35$$35$1796 () (Test.LList Int))
(declare-fun VV$35$$35$F$35$$35$19 () (Test.LList (Test.LList Int)))
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun ds_daW3 () (Test.LList Int))
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_tmp$36$x$35$$35$1337 () (Test.LList Int))
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835733$35$$35$daXz () (Test.LList (Test.LList Int)))
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun xs$35$$35$aaQk () (Test.LList Int))
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792835731$35$$35$daXx () (Test.LList (Test.LList Int)))
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_tmp$36$x$35$$35$2224 () Int)
(declare-fun apply$35$$35$25 (Int (Test.LList Int)) Bool)
(declare-fun apply$35$$35$35 (Int (Test.LList (Test.LList Int))) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$33 (Int (Test.LList (Test.LList Int))) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) (Test.LList Int))
(declare-fun apply$35$$35$29 (Int (Test.LList Int)) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$30 (Int (Test.LList (Test.LList Int))) Int)
(declare-fun apply$35$$35$16 (Int Str) (Test.LList Int))
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Int) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$17 (Int Str) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$24 (Int (Test.LList Int)) Int)
(declare-fun apply$35$$35$28 (Int (Test.LList Int)) (Test.LList Int))
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$27 (Int (Test.LList Int)) (_ BitVec 32))
(declare-fun apply$35$$35$31 (Int (Test.LList (Test.LList Int))) Bool)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$26 (Int (Test.LList Int)) Str)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$10 (Int Bool) (Test.LList Int))
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Int) (Test.LList Int))
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$34 (Int (Test.LList (Test.LList Int))) (Test.LList Int))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$11 (Int Bool) (Test.LList (Test.LList Int)))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$32 (Int (Test.LList (Test.LList Int))) Str)
(declare-fun coerce$35$$35$25 ((Test.LList Int)) Bool)
(declare-fun coerce$35$$35$35 ((Test.LList (Test.LList Int))) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$33 ((Test.LList (Test.LList Int))) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) (Test.LList Int))
(declare-fun coerce$35$$35$29 ((Test.LList Int)) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$30 ((Test.LList (Test.LList Int))) Int)
(declare-fun coerce$35$$35$16 (Str) (Test.LList Int))
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$5 (Int) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$17 (Str) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$24 ((Test.LList Int)) Int)
(declare-fun coerce$35$$35$28 ((Test.LList Int)) (Test.LList Int))
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$27 ((Test.LList Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$31 ((Test.LList (Test.LList Int))) Bool)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$26 ((Test.LList Int)) Str)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$10 (Bool) (Test.LList Int))
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Int) (Test.LList Int))
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$34 ((Test.LList (Test.LList Int))) (Test.LList Int))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$11 (Bool) (Test.LList (Test.LList Int)))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$32 ((Test.LList (Test.LList Int))) Str)
(declare-fun smt_lambda$35$$35$25 ((Test.LList Int) Bool) Int)
(declare-fun smt_lambda$35$$35$35 ((Test.LList (Test.LList Int)) (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$33 ((Test.LList (Test.LList Int)) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$29 ((Test.LList Int) (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$30 ((Test.LList (Test.LList Int)) Int) Int)
(declare-fun smt_lambda$35$$35$16 (Str (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Int (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$17 (Str (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$24 ((Test.LList Int) Int) Int)
(declare-fun smt_lambda$35$$35$28 ((Test.LList Int) (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$27 ((Test.LList Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$31 ((Test.LList (Test.LList Int)) Bool) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$26 ((Test.LList Int) Str) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$34 ((Test.LList (Test.LList Int)) (Test.LList Int)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (Test.LList (Test.LList Int))) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$32 ((Test.LList (Test.LList Int)) Str) Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (Test.LList (Test.LList Int)))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (Test.LList Int))
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)

(assert (distinct lit$36$vtail lit$36$$39$LNil lit$36$$39$LCons lit$36$Test lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace lit$36$LList lit$36$vhead))


(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$vhead) 5))
(assert (= (strLen lit$36$LList) 5))
(assert (= (strLen lit$36$monadic$45$quicksort$45$verification$45$0.1.0.0$45$inplace) 46))
(assert (= (strLen lit$36$Test) 4))
(assert (= (strLen lit$36$$39$LCons) 6))
(assert (= (strLen lit$36$$39$LNil) 5))
(assert (= (strLen lit$36$vtail) 5))
(push 1)
