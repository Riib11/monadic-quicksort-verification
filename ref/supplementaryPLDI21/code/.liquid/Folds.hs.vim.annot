1:1-1:1::Folds.$trModule :: "GHC.Types.Module"
14:1-14:7::Folds.foldEq :: "forall a b .\n(PropositionalEquality.AEq<[]> a) =>\n{VV : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | eqT foldl foldl'}"
14:10-14:28::lq_anf$##7205759403792818849 :: "x1:((a -> b -> a) -> (PropositionalEquality.EqT a -> [b] -> a)) -> {v : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
14:16-14:21::Folds.foldl :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl x1 x4 x5}"
14:22-14:28::_ :: "{VV : forall a b .\n      x1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl' x1 x4 x5\n                                                      && VV == foldr (construct x1) id x5 x4} | VV == foldl'}"
14:32-14:33::f :: "a -> b -> a"
15:12-15:38::lq_anf$##7205759403792818852 :: "x1:(a -> (PropositionalEquality.EqT [b] -> a)) -> {v : (PropositionalEquality.EqT a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
15:18-15:27::lq_anf$##7205759403792818850 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl f x1 x2}"
15:25-15:26::f :: "a -> b -> a"
15:28-15:38::lq_anf$##7205759403792818851 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl' f x1 x2\n                            && VV == foldr (construct f) id x2 x1}"
15:36-15:37::f :: "a -> b -> a"
15:42-15:43::b :: "a"
16:14-16:44::lq_anf$##7205759403792818855 :: "x1:([a] -> (PropositionalEquality.EqT b)) -> {v : (PropositionalEquality.EqT [a] -> b) | EqFun##lqdc##$select v == x1}"
16:20-16:31::lq_anf$##7205759403792818853 :: "x1:[a] -> {VV : b | VV == foldl f b x1}"
16:27-16:28::f :: "a -> b -> a"
16:29-16:30::b :: "{VV : a | VV == b}"
16:32-16:44::lq_anf$##7205759403792818854 :: "x1:[a] -> {VV : b | VV == foldl' f b x1\n                    && VV == foldr (construct f) id x1 b}"
16:40-16:41::f :: "a -> b -> a"
16:42-16:43::b :: "{VV : a | VV == b}"
16:48-16:50::xs :: "[a]"
17:22-17:36::lq_anf$##7205759403792818856 :: "{VV : a | VV == foldl f b xs}"
17:29-17:30::f :: "a -> b -> a"
17:31-17:32::b :: "{VV : a | VV == b}"
17:33-17:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
17:37-17:52::lq_anf$##7205759403792818857 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
17:45-17:46::f :: "a -> b -> a"
17:47-17:48::b :: "{VV : a | VV == b}"
17:49-17:51::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
17:53-17:92::lq_anf$##7205759403792818861 :: "()"
17:54-17:68::lq_anf$##7205759403792818858 :: "{v : () | foldl f b xs == foldl' f b xs\n          && v == theorem f b xs}"
17:62-17:63::f :: "a -> b -> a"
17:64-17:65::b :: "{VV : a | VV == b}"
17:66-17:68::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
17:71-17:91::lq_anf$##7205759403792818860 :: "()"
17:77-17:91::lq_anf$##7205759403792818859 :: "{VV : a | VV == foldl f b xs}"
17:84-17:85::f :: "a -> b -> a"
17:86-17:87::b :: "{VV : a | VV == b}"
17:88-17:90::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
21:1-21:8::Folds.foldEq' :: "forall a b .\n(PEqProperties.Reflexivity<[]> a) =>\n{VV : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | eqT foldl foldl'}"
21:11-21:29::lq_anf$##7205759403792818834 :: "x1:((a -> b -> a) -> (PropositionalEquality.EqT a -> [b] -> a)) -> {v : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
21:17-21:22::Folds.foldl :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl x1 x4 x5}"
21:23-21:29::_ :: "{VV : forall a b .\n      x1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl' x1 x4 x5\n                                                      && VV == foldr (construct x1) id x5 x4} | VV == foldl'}"
21:33-21:34::f :: "a -> b -> a"
22:13-22:39::lq_anf$##7205759403792818837 :: "x1:(a -> (PropositionalEquality.EqT [b] -> a)) -> {v : (PropositionalEquality.EqT a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
22:19-22:28::lq_anf$##7205759403792818835 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl f x1 x2}"
22:26-22:27::f :: "a -> b -> a"
22:29-22:39::lq_anf$##7205759403792818836 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl' f x1 x2\n                            && VV == foldr (construct f) id x2 x1}"
22:37-22:38::f :: "a -> b -> a"
22:43-22:44::b :: "a"
23:15-23:45::lq_anf$##7205759403792818840 :: "x1:([a] -> (PropositionalEquality.EqT b)) -> {v : (PropositionalEquality.EqT [a] -> b) | EqFun##lqdc##$select v == x1}"
23:21-23:32::lq_anf$##7205759403792818838 :: "x1:[a] -> {VV : b | VV == foldl f b x1}"
23:28-23:29::f :: "a -> b -> a"
23:30-23:31::b :: "{VV : a | VV == b}"
23:33-23:45::lq_anf$##7205759403792818839 :: "x1:[a] -> {VV : b | VV == foldl' f b x1\n                    && VV == foldr (construct f) id x1 b}"
23:41-23:42::f :: "a -> b -> a"
23:43-23:44::b :: "{VV : a | VV == b}"
23:49-23:51::xs :: "[a]"
24:17-24:36::lq_anf$##7205759403792818842 :: "(PropositionalEquality.EqT a)"
24:22-24:36::lq_anf$##7205759403792818841 :: "{VV : a | VV == foldl f b xs}"
24:29-24:30::f :: "a -> b -> a"
24:31-24:32::b :: "{VV : a | VV == b}"
24:33-24:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
24:39-24:53::lq_anf$##7205759403792818843 :: "{v : () | foldl f b xs == foldl' f b xs\n          && v == theorem f b xs}"
24:47-24:48::f :: "a -> b -> a"
24:49-24:50::b :: "{VV : a | VV == b}"
24:51-24:53::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
28:1-28:9::Folds.foldEq'' :: "forall a b .\n(PEqProperties.Reflexivity<[]> a, PEqProperties.Transitivity<[]> a) =>\n{VV : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | eqT foldl foldl'}"
28:12-28:30::lq_anf$##7205759403792818946 :: "x1:((a -> b -> a) -> (PropositionalEquality.EqT a -> [b] -> a)) -> {v : (PropositionalEquality.EqT (a -> b -> a) -> a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
28:18-28:23::Folds.foldl :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl x1 x4 x5}"
28:24-28:30::_ :: "{VV : forall a b .\n      x1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl' x1 x4 x5\n                                                      && VV == foldr (construct x1) id x5 x4} | VV == foldl'}"
28:34-28:35::f :: "a -> b -> a"
29:16-29:42::lq_anf$##7205759403792818949 :: "x1:(a -> (PropositionalEquality.EqT [b] -> a)) -> {v : (PropositionalEquality.EqT a -> [b] -> a) | EqFun##lqdc##$select v == x1}"
29:22-29:31::lq_anf$##7205759403792818947 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl f x1 x2}"
29:29-29:30::f :: "a -> b -> a"
29:32-29:42::lq_anf$##7205759403792818948 :: "x1:a -> x2:[b] -> {VV : a | VV == foldl' f x1 x2\n                            && VV == foldr (construct f) id x2 x1}"
29:40-29:41::f :: "a -> b -> a"
29:46-29:47::b :: "a"
30:20-30:50::lq_anf$##7205759403792818952 :: "x1:([a] -> (PropositionalEquality.EqT b)) -> {v : (PropositionalEquality.EqT [a] -> b) | EqFun##lqdc##$select v == x1}"
30:26-30:37::lq_anf$##7205759403792818950 :: "x1:[a] -> {VV : b | VV == foldl f b x1}"
30:33-30:34::f :: "a -> b -> a"
30:35-30:36::b :: "{VV : a | VV == b}"
30:38-30:50::lq_anf$##7205759403792818951 :: "x1:[a] -> {VV : b | VV == foldl' f b x1\n                    && VV == foldr (construct f) id x1 b}"
30:46-30:47::f :: "a -> b -> a"
30:48-30:49::b :: "{VV : a | VV == b}"
30:54-30:56::xs :: "[a]"
31:28-31:42::lq_anf$##7205759403792818953 :: "{VV : a | VV == foldl f b xs}"
31:35-31:36::f :: "a -> b -> a"
31:37-31:38::b :: "{VV : a | VV == b}"
31:39-31:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
31:43-31:72::lq_anf$##7205759403792818956 :: "a"
31:50-31:63::lq_anf$##7205759403792818954 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
31:61-31:62::f :: "a -> b -> a"
31:64-31:66::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
31:67-31:69::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
31:70-31:71::b :: "{VV : a | VV == b}"
31:73-31:89::lq_anf$##7205759403792818957 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
31:82-31:83::f :: "a -> b -> a"
31:84-31:85::b :: "{VV : a | VV == b}"
31:86-31:88::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
32:24-32:42::lq_anf$##7205759403792818958 :: "{v : (PropositionalEquality.EqT a) | eqT (foldl f b xs) (foldr (construct f) id xs b)\n                                     && v == foldLemma f b xs}"
32:35-32:36::f :: "a -> b -> a"
32:37-32:38::b :: "{VV : a | VV == b}"
32:39-32:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
33:24-33:46::lq_anf$##7205759403792818960 :: "(PropositionalEquality.EqT a)"
33:30-33:45::lq_anf$##7205759403792818959 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
33:38-33:39::f :: "a -> b -> a"
33:40-33:41::b :: "{VV : a | VV == b}"
33:42-33:44::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
39:1-39:9::Folds.foldSame :: "forall a b .\n(PEqProperties.Reflexivity<[]> a, PEqProperties.Symmetry<[]> a, PEqProperties.Transitivity<[]> a) =>\nx4:(a -> b -> a) -> x7:a -> x8:[b] -> {VV : (PropositionalEquality.EqT a) | eqT (foldl x4 x7 x8) (foldl' x4 x7 x8)}"
39:10-39:11::f :: "a -> b -> a"
39:12-39:13::b :: "a"
39:14-39:16::xs :: "[a]"
40:11-40:26::lq_anf$##7205759403792818931 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
40:19-40:20::f :: "a -> b -> a"
40:21-40:22::b :: "{VV : a | VV == b}"
40:23-40:25::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
41:9-41:38::lq_anf$##7205759403792818934 :: "a"
41:16-41:29::lq_anf$##7205759403792818932 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
41:27-41:28::f :: "a -> b -> a"
41:30-41:32::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
41:33-41:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
41:36-41:37::b :: "{VV : a | VV == b}"
42:9-42:23::lq_anf$##7205759403792818935 :: "{VV : a | VV == foldl f b xs}"
42:16-42:17::f :: "a -> b -> a"
42:18-42:19::b :: "{VV : a | VV == b}"
42:20-42:22::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
43:5-43:27::lq_anf$##7205759403792818937 :: "(PropositionalEquality.EqT a)"
43:11-43:26::lq_anf$##7205759403792818936 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
43:19-43:20::f :: "a -> b -> a"
43:21-43:22::b :: "{VV : a | VV == b}"
43:23-43:25::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
44:10-44:24::lq_anf$##7205759403792818938 :: "{VV : a | VV == foldl f b xs}"
44:17-44:18::f :: "a -> b -> a"
44:19-44:20::b :: "{VV : a | VV == b}"
44:21-44:23::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
45:10-45:39::lq_anf$##7205759403792818941 :: "a"
45:17-45:30::lq_anf$##7205759403792818939 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
45:28-45:29::f :: "a -> b -> a"
45:31-45:33::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
45:34-45:36::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
45:37-45:38::b :: "{VV : a | VV == b}"
46:8-46:26::lq_anf$##7205759403792818942 :: "{v : (PropositionalEquality.EqT a) | eqT (foldl f b xs) (foldr (construct f) id xs b)\n                                     && v == foldLemma f b xs}"
46:19-46:20::f :: "a -> b -> a"
46:21-46:22::b :: "{VV : a | VV == b}"
46:23-46:25::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
50:1-50:10::Folds.foldLemma :: "forall a b .\n(PEqProperties.Reflexivity<[]> a, PEqProperties.Transitivity<[]> a) =>\nx3:(a -> b -> a) -> x6:a -> x7:[b] -> {VV : (PropositionalEquality.EqT a) | eqT (foldl x3 x6 x7) (foldr (construct x3) id x7 x6)}"
50:11-50:12::f :: "a -> b -> a"
50:13-50:14::b :: "a"
51:9-51:23::lq_anf$##7205759403792818867 :: "a"
51:16-51:17::f :: "a -> b -> a"
51:18-51:19::b :: "{VV : a | VV == b}"
51:20-51:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
52:9-52:10::b :: "{VV : a | VV == b}"
53:9-53:38::lq_anf$##7205759403792818871 :: "a"
53:16-53:29::lq_anf$##7205759403792818868 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
53:27-53:28::f :: "a -> b -> a"
53:30-53:32::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
53:33-53:35::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
53:36-53:37::b :: "{VV : a | VV == b}"
54:5-54:26::lq_anf$##7205759403792818874 :: "(PropositionalEquality.EqT a)"
54:11-54:25::lq_anf$##7205759403792818873 :: "a"
54:18-54:19::f :: "a -> b -> a"
54:20-54:21::b :: "{VV : a | VV == b}"
54:22-54:24::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
55:12-55:13::b :: "{VV : a | VV == b}"
56:12-56:18::lq_anf$##7205759403792818875 :: "{VV : a | VV == id b\n          && VV == b}"
56:16-56:17::b :: "{VV : a | VV == b}"
57:12-57:41::lq_anf$##7205759403792818879 :: "a"
57:19-57:32::lq_anf$##7205759403792818876 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
57:30-57:31::f :: "a -> b -> a"
57:33-57:35::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
57:36-57:38::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
57:39-57:40::b :: "{VV : a | VV == b}"
58:7-58:15::lq_anf$##7205759403792818880 :: "{v : (PropositionalEquality.EqT a) | eqT b b\n                                     && v == refl b}"
58:13-58:14::b :: "{VV : a | VV == b}"
59:7-59:20::lq_anf$##7205759403792818882 :: "(PropositionalEquality.EqT a)"
59:13-59:19::lq_anf$##7205759403792818881 :: "{VV : a | VV == id b\n          && VV == b}"
59:17-59:18::b :: "{VV : a | VV == b}"
61:9-61:27::lq_anf$##7205759403792818885 :: "a"
61:16-61:17::f :: "a -> b -> a"
61:18-61:19::b :: "{VV : a | VV == b}"
61:20-61:26::lq_anf$##7205759403792818884 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
61:21-61:22::x :: "{VV : a | VV == x}"
61:23-61:25::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
62:9-62:29::lq_anf$##7205759403792818887 :: "a"
62:16-62:17::f :: "a -> b -> a"
62:18-62:25::lq_anf$##7205759403792818886 :: "{VV : a | VV == f b x}"
62:21-62:22::b :: "{VV : a | VV == b}"
62:23-62:24::x :: "{VV : a | VV == x}"
62:26-62:28::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
63:9-63:42::lq_anf$##7205759403792818891 :: "a"
63:16-63:29::lq_anf$##7205759403792818888 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
63:27-63:28::f :: "a -> b -> a"
63:30-63:32::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
63:33-63:39::lq_anf$##7205759403792818890 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
63:34-63:35::x :: "{VV : a | VV == x}"
63:36-63:38::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
63:40-63:41::b :: "{VV : a | VV == b}"
64:5-64:30::lq_anf$##7205759403792818894 :: "(PropositionalEquality.EqT a)"
64:11-64:29::lq_anf$##7205759403792818893 :: "a"
64:18-64:19::f :: "a -> b -> a"
64:20-64:21::b :: "{VV : a | VV == b}"
64:22-64:28::lq_anf$##7205759403792818892 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
64:23-64:24::x :: "{VV : a | VV == x}"
64:25-64:27::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
65:12-65:32::lq_anf$##7205759403792818896 :: "a"
65:19-65:20::f :: "a -> b -> a"
65:21-65:28::lq_anf$##7205759403792818895 :: "{VV : a | VV == f b x}"
65:24-65:25::b :: "{VV : a | VV == b}"
65:26-65:27::x :: "{VV : a | VV == x}"
65:29-65:31::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
66:12-66:47::lq_anf$##7205759403792818900 :: "a"
66:19-66:32::lq_anf$##7205759403792818897 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
66:30-66:31::f :: "a -> b -> a"
66:33-66:35::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
66:36-66:38::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
66:39-66:46::lq_anf$##7205759403792818899 :: "{VV : a | VV == f b x}"
66:42-66:43::b :: "{VV : a | VV == b}"
66:44-66:45::x :: "{VV : a | VV == x}"
67:12-67:45::lq_anf$##7205759403792818904 :: "a"
67:19-67:32::lq_anf$##7205759403792818901 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
67:30-67:31::f :: "a -> b -> a"
67:33-67:35::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
67:36-67:42::lq_anf$##7205759403792818903 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
67:37-67:38::x :: "{VV : a | VV == x}"
67:39-67:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
67:43-67:44::b :: "{VV : a | VV == b}"
68:7-68:31::lq_anf$##7205759403792818906 :: "(PropositionalEquality.EqT a)"
68:18-68:19::f :: "a -> b -> a"
68:20-68:27::lq_anf$##7205759403792818905 :: "{VV : a | VV == f b x}"
68:23-68:24::b :: "{VV : a | VV == b}"
68:25-68:26::x :: "{VV : a | VV == x}"
68:28-68:30::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
69:14-69:49::lq_anf$##7205759403792818910 :: "a"
69:21-69:34::lq_anf$##7205759403792818907 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
69:32-69:33::f :: "a -> b -> a"
69:35-69:37::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
69:38-69:40::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
69:41-69:48::lq_anf$##7205759403792818909 :: "{VV : a | VV == f b x}"
69:44-69:45::b :: "{VV : a | VV == b}"
69:46-69:47::x :: "{VV : a | VV == x}"
70:14-70:59::lq_anf$##7205759403792818914 :: "a"
70:25-70:26::f :: "a -> b -> a"
70:27-70:28::x :: "{VV : a | VV == x}"
70:29-70:56::lq_anf$##7205759403792818913 :: "a -> a"
70:36-70:49::lq_anf$##7205759403792818911 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
70:47-70:48::f :: "a -> b -> a"
70:50-70:52::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
70:53-70:55::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
70:57-70:58::b :: "{VV : a | VV == b}"
71:14-71:47::lq_anf$##7205759403792818918 :: "a"
71:21-71:34::lq_anf$##7205759403792818915 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
71:32-71:33::f :: "a -> b -> a"
71:35-71:37::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
71:38-71:44::lq_anf$##7205759403792818917 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
71:39-71:40::x :: "{VV : a | VV == x}"
71:41-71:43::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
71:45-71:46::b :: "{VV : a | VV == b}"
72:9-72:51::lq_anf$##7205759403792818923 :: "(PropositionalEquality.EqT a)"
72:15-72:50::lq_anf$##7205759403792818922 :: "a"
72:22-72:35::lq_anf$##7205759403792818919 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
72:33-72:34::f :: "a -> b -> a"
72:36-72:38::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
72:39-72:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
72:42-72:49::lq_anf$##7205759403792818921 :: "{VV : a | VV == f b x}"
72:45-72:46::b :: "{VV : a | VV == b}"
72:47-72:48::x :: "{VV : a | VV == x}"
73:9-73:61::lq_anf$##7205759403792818928 :: "(PropositionalEquality.EqT a)"
73:15-73:60::lq_anf$##7205759403792818927 :: "a"
73:26-73:27::f :: "a -> b -> a"
73:28-73:29::x :: "{VV : a | VV == x}"
73:30-73:57::lq_anf$##7205759403792818926 :: "a -> a"
73:37-73:50::lq_anf$##7205759403792818924 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
73:48-73:49::f :: "a -> b -> a"
73:51-73:53::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
73:54-73:56::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
73:58-73:59::b :: "{VV : a | VV == b}"
78:1-78:8::Folds.theorem :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : () | foldl x1 x4 x5 == foldl' x1 x4 x5}"
78:9-78:10::f :: "a -> b -> a"
78:11-78:12::b :: "a"
78:13-78:15::xs :: "[a]"
79:7-79:21::lq_anf$##7205759403792818823 :: "{VV : a | VV == foldl' f b xs\n          && VV == foldr (construct f) id xs b}"
79:15-79:16::f :: "a -> b -> a"
79:17-79:18::b :: "{VV : a | VV == b}"
79:19-79:21::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
80:7-80:34::lq_anf$##7205759403792818826 :: "a"
80:13-80:26::lq_anf$##7205759403792818824 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
80:24-80:25::f :: "a -> b -> a"
80:27-80:29::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
80:30-80:32::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
80:33-80:34::b :: "{VV : a | VV == b}"
81:9-81:21::lq_anf$##7205759403792818828 :: "{v : () | foldl f b xs == foldr (construct f) id xs b\n          && v == lemma f b xs}"
81:15-81:16::f :: "a -> b -> a"
81:17-81:18::b :: "{VV : a | VV == b}"
81:19-81:21::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
82:7-82:20::lq_anf$##7205759403792818830 :: "{VV : a | VV == foldl f b xs}"
82:14-82:15::f :: "a -> b -> a"
82:16-82:17::b :: "{VV : a | VV == b}"
82:18-82:20::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
83:7-83:10::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
88:1-88:6::Folds.lemma :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : () | foldl x1 x4 x5 == foldr (construct x1) id x5 x4}"
88:7-88:8::f :: "a -> b -> a"
88:9-88:10::b :: "a"
89:7-89:19::lq_anf$##7205759403792818786 :: "a"
89:13-89:14::f :: "a -> b -> a"
89:15-89:16::b :: "{VV : a | VV == b}"
89:17-89:19::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
90:7-90:8::b :: "{VV : a | VV == b}"
91:7-91:11::lq_anf$##7205759403792818788 :: "{VV : a | VV == id b\n          && VV == b}"
91:10-91:11::b :: "{VV : a | VV == b}"
92:7-92:36::lq_anf$##7205759403792818793 :: "a"
92:14-92:27::lq_anf$##7205759403792818790 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
92:25-92:26::f :: "a -> b -> a"
92:28-92:30::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
92:31-92:33::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
92:35-92:36::b :: "{VV : a | VV == b}"
93:7-93:34::lq_anf$##7205759403792818798 :: "a"
93:13-93:26::lq_anf$##7205759403792818795 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
93:24-93:25::f :: "a -> b -> a"
93:27-93:29::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
93:30-93:32::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
93:33-93:34::b :: "{VV : a | VV == b}"
94:7-94:10::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
96:7-96:23::lq_anf$##7205759403792818801 :: "a"
96:13-96:14::f :: "a -> b -> a"
96:15-96:16::b :: "{VV : a | VV == b}"
96:17-96:23::lq_anf$##7205759403792818800 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
96:18-96:19::x :: "{VV : a | VV == x}"
96:20-96:22::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
97:7-97:25::lq_anf$##7205759403792818803 :: "a"
97:13-97:14::f :: "a -> b -> a"
97:15-97:22::lq_anf$##7205759403792818802 :: "{VV : a | VV == f b x}"
97:18-97:19::b :: "{VV : a | VV == b}"
97:20-97:21::x :: "{VV : a | VV == x}"
97:23-97:25::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
98:9-98:27::lq_anf$##7205759403792818806 :: "()"
98:15-98:16::f :: "a -> b -> a"
98:17-98:24::lq_anf$##7205759403792818805 :: "{VV : a | VV == f b x}"
98:20-98:21::b :: "{VV : a | VV == b}"
98:22-98:23::x :: "{VV : a | VV == x}"
98:25-98:27::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
99:7-99:40::lq_anf$##7205759403792818811 :: "a"
99:13-99:26::lq_anf$##7205759403792818808 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
99:24-99:25::f :: "a -> b -> a"
99:27-99:29::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
99:30-99:32::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
99:33-99:40::lq_anf$##7205759403792818810 :: "{VV : a | VV == f b x}"
99:36-99:37::b :: "{VV : a | VV == b}"
99:38-99:39::x :: "{VV : a | VV == x}"
100:7-100:50::lq_anf$##7205759403792818816 :: "a"
100:17-100:18::f :: "a -> b -> a"
100:19-100:20::x :: "{VV : a | VV == x}"
100:21-100:48::lq_anf$##7205759403792818815 :: "a -> a"
100:28-100:41::lq_anf$##7205759403792818813 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
100:39-100:40::f :: "a -> b -> a"
100:42-100:44::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
100:45-100:47::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
100:49-100:50::b :: "{VV : a | VV == b}"
101:7-101:38::lq_anf$##7205759403792818821 :: "a"
101:13-101:26::lq_anf$##7205759403792818818 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
101:24-101:25::f :: "a -> b -> a"
101:27-101:29::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
101:30-101:36::lq_anf$##7205759403792818820 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
101:31-101:32::x :: "{VV : a | VV == x}"
101:33-101:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
101:37-101:38::b :: "{VV : a | VV == b}"
102:7-102:10::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
106:1-106:6::Folds.foldl :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl x1 x4 x5}"
106:9-106:10::b :: "a"
106:20-106:21::b :: "{VV : a | VV == b}"
107:20-107:40::Folds.foldl :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl x1 x4 x5}"
107:26-107:27::ds_d5tj :: "a -> b -> a"
107:28-107:37::lq_anf$##7205759403792818778 :: "a"
107:29-107:30::b :: "{VV : a | VV == b}"
107:35-107:36::x :: "{VV : a | VV == x}"
107:38-107:40::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
111:1-111:7::Folds.foldl' :: "forall a b .\nx1:(a -> b -> a) -> x4:a -> x5:[b] -> {VV : a | VV == foldl' x1 x4 x5\n                                                && VV == foldr (construct x1) id x5 x4}"
111:8-111:9::f :: "a -> b -> a"
111:10-111:11::b :: "a"
111:12-111:14::xs :: "[a]"
111:23-111:36::lq_anf$##7205759403792818782 :: "x1:a -> x2:(b -> b) -> x4:b -> {VV : b | VV == construct f x1 x2 x4\n                                         && VV == x2 (f x4 x1)}"
111:34-111:35::f :: "a -> b -> a"
111:37-111:39::_ :: "{VV : forall a .\n      x1:a -> {VV : a | VV == id x1\n                        && VV == x1} | VV == id}"
111:40-111:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
111:43-111:44::b :: "{VV : a | VV == b}"
116:1-116:3::Folds.id :: "forall a .\nx1:a -> {VV : a | VV == id x1\n                  && VV == x1}"
116:4-116:5::x :: "a"
120:1-120:10::Folds.construct :: "forall a b c .\nx1:(a -> b -> a) -> x4:b -> x5:(a -> c) -> x7:a -> {VV : c | VV == construct x1 x4 x5 x7\n                                                             && VV == x5 (x1 x7 x4)}"
120:11-120:12::f :: "a -> b -> a"
120:13-120:14::x :: "a"
120:15-120:16::r :: "a -> b"
120:17-120:20::acc :: "a"
120:25-120:34::lq_anf$##7205759403792818779 :: "{VV : a | VV == f acc x}"
120:28-120:31::acc :: "{VV : a | VV == acc}"
120:32-120:33::x :: "{VV : a | VV == x}"
124:1-124:6::Folds.foldr :: "forall a b .\nx1:(a -> b -> b) -> x4:b -> x5:[a] -> {VV : b | VV == foldr x1 x4 x5}"
124:9-124:10::b :: "a"
124:20-124:21::b :: "{VV : a | VV == b}"
125:20-125:38::ds_d5t7 :: "a -> b -> b"
125:22-125:23::x :: "{VV : a | VV == x}"
125:24-125:38::lq_anf$##7205759403792818781 :: "a"
125:31-125:32::ds_d5t7 :: "a -> b -> b"
125:33-125:34::b :: "{VV : a | VV == b}"
125:35-125:37::xs :: "{v : [a] | len v >= 0\n           && v == xs}"