(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$964 () Int)
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$946 () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX$35$$35$k_$35$$35$975 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$943 () Int)
(declare-fun lq_karg$36$VV$35$$35$942$35$$35$k_$35$$35$943 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$943 () Int)
(declare-fun addrLen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 () Bool)
(declare-fun bbEq () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6$35$$35$k_$35$$35$1090 () Int)
(declare-fun lq_tmp$36$x$35$$35$939 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$3 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$943 () Int)
(declare-fun papp5 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun PEqProperties.C$58$SMTEq () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$975 () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$887 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_tmp$36$x$35$$35$981 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun RunTimeCheck.critical () Int)
(declare-fun PEqProperties.aEqToSMT () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$975 () Int)
(declare-fun lq_karg$36$pf$35$$35$a1Cw$35$$35$k_$35$$35$1098 () Int)
(declare-fun lit$36$RunTimeCheck () Str)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun pf$35$$35$a1Cw () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$943 () Int)
(declare-fun papp3 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807670$35$$35$d3EW$35$$35$k_$35$$35$946 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Bool)
(declare-fun GHC.List.span () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$1090 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun x$35$$35$a1Cy () Int)
(declare-fun PEqProperties.toSMT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX () Int)
(declare-fun VV$35$$35$F$35$$35$37 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807670$35$$35$d3EW$35$$35$k_$35$$35$964 () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun PEqProperties.C$58$Symmetry () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$943 () Int)
(declare-fun lq_karg$36$VV$35$$35$907$35$$35$k_$35$$35$908 () Int)
(declare-fun lq_karg$36$VV$35$$35$1097$35$$35$k_$35$$35$1098 () Bool)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$890 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$919 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$2 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$919 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER () Int)
(declare-fun lq_karg$36$VV$35$$35$889$35$$35$k_$35$$35$890 () Bool)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$890 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun PropositionalEquality.symmP () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$887 () Int)
(declare-fun VV$35$$35$F$35$$35$42 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$887 () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$908 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun x$35$$35$a1Cx () Int)
(declare-fun lq_karg$36$RunTimeCheck.unExt$35$$35$k_$35$$35$1090 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$919 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$964 () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$919 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_tmp$36$x$35$$35$1137 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$985$35$$35$k_$35$$35$995 () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$919 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$946 () Int)
(declare-fun papp2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$975 () Bool)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun PEqProperties.refl () Int)
(declare-fun PropositionalEquality.$36$fAEqBool () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_karg$36$VV$35$$35$991$35$$35$k_$35$$35$992 () Int)
(declare-fun PEqProperties.cong () Int)
(declare-fun PEqProperties.$36$fSMTEqa () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cx$35$$35$k_$35$$35$1098 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 () Int)
(declare-fun RunTimeCheck.slowSpec () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$33 () Int)
(declare-fun RunTimeCheck.unExt () Int)
(declare-fun lq_tmp$36$x$35$$35$768 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$919 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807672$35$$35$d3EY$35$$35$k_$35$$35$975 () Bool)
(declare-fun GHC.List.tail () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$943 () Int)
(declare-fun PropositionalEquality.EqFun () Int)
(declare-fun PEqProperties.C$58$Transitivity () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun ds_d1F2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4$35$$35$k_$35$$35$1090 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$975 () Int)
(declare-fun PEqProperties.trans () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$919 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5$35$$35$k_$35$$35$1090 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$975 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX$35$$35$k_$35$$35$943 () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$RunTimeCheck.unExt$35$$35$k_$35$$35$992 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3$35$$35$k_$35$$35$1098 () Bool)
(declare-fun RunTimeCheck.fastSpec () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$767 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$908 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2$35$$35$k_$35$$35$1098 () Bool)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun PEqProperties.C$58$Reflexivity () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$946 () Int)
(declare-fun p$35$$35$a1Cz () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$975 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807670$35$$35$d3EW () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$943 () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$975 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1138 () Int)
(declare-fun lq_karg$36$VV$35$$35$918$35$$35$k_$35$$35$919 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6$35$$35$k_$35$$35$1098 () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun lq_karg$36$VV$35$$35$974$35$$35$k_$35$$35$975 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5 () Int)
(declare-fun lq_karg$36$VV$35$$35$994$35$$35$k_$35$$35$995 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX$35$$35$k_$35$$35$964 () Int)
(declare-fun PEqProperties.sym () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX$35$$35$k_$35$$35$946 () Int)
(declare-fun lq_karg$36$VV$35$$35$886$35$$35$k_$35$$35$887 () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun VV$35$$35$F$35$$35$46 () Int)
(declare-fun PropositionalEquality.EqCtx () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$883 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_tmp$36$x$35$$35$769 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$946 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$995 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ () Int)
(declare-fun lq_karg$36$pf$35$$35$a1Cw$35$$35$k_$35$$35$1090 () Int)
(declare-fun is$36$PropositionalEquality.EqSMT () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$946 () Int)
(declare-fun f$35$$35$a1CB () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun PropositionalEquality.$36$WEqCtx () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807670$35$$35$d3EW$35$$35$k_$35$$35$943 () Int)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr () Str)
(declare-fun isAdmit () Int)
(declare-fun VV$35$$35$F$35$$35$32 () Bool)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 () Int)
(declare-fun is$36$PropositionalEquality.EqCtx () Int)
(declare-fun PropositionalEquality.reflP () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$1098 () Int)
(declare-fun lq_tmp$36$x$35$$35$984 () Int)
(declare-fun PropositionalEquality.eqRTCtx () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$VV$35$$35$963$35$$35$k_$35$$35$964 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun ds_d1F1 () Int)
(declare-fun PropositionalEquality.deqFun () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807670$35$$35$d3EW$35$$35$k_$35$$35$975 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun x$35$$35$a1CA () Int)
(declare-fun lq_karg$36$VV$35$$35$1089$35$$35$k_$35$$35$1090 () Bool)
(declare-fun PEqProperties.C$58$Congruence () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$887 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun x$35$$35$a1Cv () Int)
(declare-fun RunTimeCheck.bar () Int)
(declare-fun lq_tmp$36$x$35$$35$983 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$887 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807682$35$$35$d3F8 () Bool)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun PropositionalEquality.transP () Int)
(declare-fun GHC.List.take () Int)
(declare-fun PropositionalEquality.$36$WEqFun () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun prop () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$887 () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$908 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV () Bool)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$908 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 () Int)
(declare-fun PEqProperties.flip () Int)
(declare-fun RunTimeCheck.flip$39$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun lq_tmp$36$x$35$$35$979 () Int)
(declare-fun is$36$PropositionalEquality.EqFun () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$992 () Int)
(declare-fun eqT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807672$35$$35$d3EY () Bool)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET$35$$35$k_$35$$35$887 () Int)
(declare-fun PEqProperties.dollar () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$975 () Int)
(declare-fun fix$36$$36$dSMTEq_a1Ew () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_karg$36$p$35$$35$a1Cz$35$$35$k_$35$$35$887 () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$908 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun lq_karg$36$RunTimeCheck.unExt$35$$35$k_$35$$35$1098 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$908 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$919 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$946 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$964 () Bool)
(declare-fun VV$35$$35$F$35$$35$41 () Bool)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$908 () Int)
(declare-fun PropositionalEquality.C$58$AEq () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$908 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807672$35$$35$d3EY$35$$35$k_$35$$35$964 () Bool)
(declare-fun lq_karg$36$x$35$$35$a1Cx$35$$35$k_$35$$35$1090 () Int)
(declare-fun lq_karg$36$VV$35$$35$945$35$$35$k_$35$$35$946 () Bool)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$980 () Int)
(declare-fun lq_tmp$36$x$35$$35$832 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$943 () Bool)
(declare-fun lq_karg$36$RunTimeCheck.unExt$35$$35$k_$35$$35$995 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$890 () Int)
(declare-fun lq_karg$36$RunTimeCheck.critical$35$$35$k_$35$$35$946 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3$35$$35$k_$35$$35$1090 () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792807681$35$$35$d3F7 () Bool)
(declare-fun PropositionalEquality.bEq () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2$35$$35$k_$35$$35$1090 () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES$35$$35$k_$35$$35$946 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU$35$$35$k_$35$$35$975 () Int)
(declare-fun PropositionalEquality.eqSMT () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4$35$$35$k_$35$$35$1098 () Bool)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER$35$$35$k_$35$$35$919 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$964 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ$35$$35$k_$35$$35$946 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807669$35$$35$d3EV$35$$35$k_$35$$35$908 () Bool)
(declare-fun VV$35$$35$F$35$$35$16 () Bool)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5$35$$35$k_$35$$35$1098 () Int)
(declare-fun PropositionalEquality.EqSMT () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_karg$36$x$35$$35$a1Cy$35$$35$k_$35$$35$943 () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)


(assert (distinct lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr lit$36$RunTimeCheck))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$RunTimeCheck) 12))
(assert (= (strLen lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr) 53))
(push 1)
(push 1)
(assert (and (not GHC.Types.False)))
(assert (and (= PropositionalEquality.$36$fAEqBool PropositionalEquality.$36$fAEqBool)))
(assert (and (= GHC.Types.True GHC.Types.True)))
(assert (and (apply$35$$35$1 isAdmit Language.Haskell.Liquid.ProofCombinators.Admit)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (= GHC.Types.False GHC.Types.False)))
(assert (and GHC.Types.True))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER (as RunTimeCheck.slowSpec Int))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (= lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES (apply$35$$35$0 (as RunTimeCheck.flip$39$ Int) x$35$$35$a1Cy)) (= lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES (apply$35$$35$0 (as RunTimeCheck.flip$39$ Int) x$35$$35$a1Cy)))))
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (as RunTimeCheck.fastSpec Int)) (as RunTimeCheck.slowSpec Int))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ (as RunTimeCheck.fastSpec Int))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX (as RunTimeCheck.slowSpec Int))))
(assert (and (= lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU (as RunTimeCheck.fastSpec Int))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) p$35$$35$a1Cz)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) true)) (apply$35$$35$5 (apply$35$$35$4 (as eqT Int) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX (as RunTimeCheck.slowSpec Int)) (= lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU (as RunTimeCheck.fastSpec Int)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) p$35$$35$a1Cz)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) true)) (apply$35$$35$5 (apply$35$$35$4 (as eqT Int) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cy) true) (= (apply$35$$35$1 (apply$35$$35$0 (as RunTimeCheck.flip$39$ Int) x$35$$35$a1Cy) lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX x$35$$35$a1Cy)) (= lq_anf$36$$35$$35$7205759403792807671$35$$35$d3EX (as RunTimeCheck.slowSpec Int)) (= (apply$35$$35$1 (apply$35$$35$0 (as RunTimeCheck.flip$39$ Int) x$35$$35$a1Cy) lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU x$35$$35$a1Cy)) (= lq_anf$36$$35$$35$7205759403792807668$35$$35$d3EU (as RunTimeCheck.fastSpec Int)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) p$35$$35$a1Cz)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET) true)) (apply$35$$35$5 (apply$35$$35$4 (as eqT Int) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ)) (apply$35$$35$1 lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= lq_anf$36$$35$$35$7205759403792807667$35$$35$d3ET (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) lq_anf$36$$35$$35$7205759403792807664$35$$35$d3EQ) lq_anf$36$$35$$35$7205759403792807665$35$$35$d3ER) p$35$$35$a1Cz) lq_anf$36$$35$$35$7205759403792807666$35$$35$d3ES))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cy) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (as RunTimeCheck.fastSpec Int)) (as RunTimeCheck.slowSpec Int)) (= VV$35$$35$F$35$$35$46 p$35$$35$a1Cz))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 true)) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 true)) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)))))
(assert (and (and (and (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int)) (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int))) (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 true)) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 true)) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807676$35$$35$d3F2 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (and (and (and (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 true)) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx))) (and (and (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int)) (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int))) (= fix$36$$36$dSMTEq_a1Ew (as PEqProperties.$36$fSMTEqa Int))) (and (and (and (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 true)) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx))) (= lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4 (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (apply$35$$35$5 (apply$35$$35$4 (as eqT Int) (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx)) (= lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5 (apply$35$$35$0 (apply$35$$35$0 (as RunTimeCheck.unExt Int) x$35$$35$a1Cx) pf$35$$35$a1Cw))) (= lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5 (apply$35$$35$0 (apply$35$$35$0 (as RunTimeCheck.unExt Int) x$35$$35$a1Cx) pf$35$$35$a1Cw)))))
(assert (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) (= lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6 (apply$35$$35$0 (apply$35$$35$4 (apply$35$$35$4 (as PEqProperties.toSMT Int) lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3) lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5))) (= lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6 (apply$35$$35$0 (apply$35$$35$4 (apply$35$$35$4 (as PEqProperties.toSMT Int) lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3) lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx) true) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (= lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3 lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) (= lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6 (apply$35$$35$0 (apply$35$$35$4 (apply$35$$35$4 (as PEqProperties.toSMT Int) lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3) lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5))) (= lq_anf$36$$35$$35$7205759403792807680$35$$35$d3F6 (apply$35$$35$0 (apply$35$$35$4 (apply$35$$35$4 (as PEqProperties.toSMT Int) lq_anf$36$$35$$35$7205759403792807677$35$$35$d3F3) lq_anf$36$$35$$35$7205759403792807678$35$$35$d3F4) lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (apply$35$$35$5 (apply$35$$35$4 (as eqT Int) (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx)) (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx)) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (as RunTimeCheck.unExt Int) x$35$$35$a1Cx) pf$35$$35$a1Cw))) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (as RunTimeCheck.unExt Int) x$35$$35$a1Cx) pf$35$$35$a1Cw))) (= VV$35$$35$F$35$$35$17 lq_anf$36$$35$$35$7205759403792807679$35$$35$d3F5))))
(assert (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as RunTimeCheck.fastSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as RunTimeCheck.slowSpec Int) x$35$$35$a1Cx) true))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
