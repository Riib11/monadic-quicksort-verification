1:1-1:1::PropositionalEquality.$trModule :: "GHC.Types.Module"
24:1-24:8::PropositionalEquality.eqRTCtx :: "forall a b .\nx1:a -> x2:a -> {VV : (PropositionalEquality.EqT a) | eqT x1 x2} -> x4:(a -> b) -> {VV : (PropositionalEquality.EqT b) | eqT (x4 x1) (x4 x2)}"
36:1-36:7::PropositionalEquality._eqFun :: "forall a b .\nx1:(a -> b) -> x3:(a -> b) -> (x6:a -> {VV : (PropositionalEquality.EqT b) | eqT (x1 x6) (x3 x6)}) -> {VV : (PropositionalEquality.EqT a -> b) | eqT x1 x3}"
75:10-75:21::PropositionalEquality.$fAEqInteger :: "{v : (PropositionalEquality.AEq GHC.Integer.Type.Integer) | v == C:AEq $cbEq $creflP $csymmP $ctransP}"
76:3-76:6::$cbEq :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Types.Bool | v <=> bbEq x1 x2}"
77:3-77:8::$creflP :: "x1:GHC.Integer.Type.Integer -> {VV : () | bbEq x1 x1}"
77:9-77:10::x :: "GHC.Integer.Type.Integer"
77:19-77:21::GHC.Tuple.() :: "{v : () | v == ()}"
77:22-77:38::lq_anf$##7205759403792819210 :: "{v : GHC.Types.Bool | (v <=> bbEq x x)\n                      && (v <=> x == x)\n                      && v == bEqInteger x x}"
77:34-77:35::x :: "{v : GHC.Integer.Type.Integer | v == x}"
77:36-77:37::x :: "{v : GHC.Integer.Type.Integer | v == x}"
78:3-78:8::$csymmP :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {VV : () | bbEq x1 x2 => bbEq x2 x1}"
78:9-78:10::x :: "GHC.Integer.Type.Integer"
78:11-78:12::y :: "GHC.Integer.Type.Integer"
78:16-78:18::GHC.Tuple.() :: "{v : () | v == ()}"
78:27-78:43::lq_anf$##7205759403792819211 :: "{v : GHC.Types.Bool | (v <=> bbEq x y)\n                      && (v <=> x == y)\n                      && v == bEqInteger x y}"
78:39-78:40::x :: "{v : GHC.Integer.Type.Integer | v == x}"
78:41-78:42::y :: "{v : GHC.Integer.Type.Integer | v == y}"
79:3-79:9::$ctransP :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> x3:GHC.Integer.Type.Integer -> {VV : () | bbEq x1 x2\n                                                                                                        && bbEq x2 x3 => bbEq x1 x3}"
79:10-79:11::x :: "GHC.Integer.Type.Integer"
79:12-79:13::y :: "GHC.Integer.Type.Integer"
79:18-79:20::GHC.Tuple.() :: "{v : () | v == ()}"
79:29-79:45::lq_anf$##7205759403792819212 :: "{v : GHC.Types.Bool | (v <=> bbEq x y)\n                      && (v <=> x == y)\n                      && v == bEqInteger x y}"
79:41-79:42::x :: "{v : GHC.Integer.Type.Integer | v == x}"
79:43-79:44::y :: "{v : GHC.Integer.Type.Integer | v == y}"
82:10-82:18::PropositionalEquality.$fAEqBool :: "{v : (PropositionalEquality.AEq GHC.Types.Bool) | v == C:AEq $cbEq $creflP $csymmP $ctransP}"
83:3-83:6::$cbEq :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | v <=> bbEq x1 x2}"
84:3-84:8::$creflP :: "x1:GHC.Types.Bool -> {VV : () | bbEq x1 x1}"
84:9-84:10::x :: "GHC.Types.Bool"
84:19-84:21::GHC.Tuple.() :: "{v : () | v == ()}"
84:22-84:35::lq_anf$##7205759403792819213 :: "{v : GHC.Types.Bool | (v <=> bbEq x x)\n                      && (v <=> x == x)\n                      && v == bEqBool x x}"
84:31-84:32::x :: "{v : GHC.Types.Bool | v == x}"
84:33-84:34::x :: "{v : GHC.Types.Bool | v == x}"
85:3-85:8::$csymmP :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {VV : () | bbEq x1 x2 => bbEq x2 x1}"
85:9-85:10::x :: "GHC.Types.Bool"
85:11-85:12::y :: "GHC.Types.Bool"
85:16-85:18::GHC.Tuple.() :: "{v : () | v == ()}"
85:27-85:40::lq_anf$##7205759403792819214 :: "{v : GHC.Types.Bool | (v <=> bbEq x y)\n                      && (v <=> x == y)\n                      && v == bEqBool x y}"
85:36-85:37::x :: "{v : GHC.Types.Bool | v == x}"
85:38-85:39::y :: "{v : GHC.Types.Bool | v == y}"
86:3-86:9::$ctransP :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> x3:GHC.Types.Bool -> {VV : () | bbEq x1 x2\n                                                                          && bbEq x2 x3 => bbEq x1 x3}"
86:10-86:11::x :: "GHC.Types.Bool"
86:12-86:13::y :: "GHC.Types.Bool"
86:18-86:20::GHC.Tuple.() :: "{v : () | v == ()}"
86:29-86:42::lq_anf$##7205759403792819215 :: "{v : GHC.Types.Bool | (v <=> bbEq x y)\n                      && (v <=> x == y)\n                      && v == bEqBool x y}"
86:38-86:39::x :: "{v : GHC.Types.Bool | v == x}"
86:40-86:41::y :: "{v : GHC.Types.Bool | v == y}"
91:1-91:11::PropositionalEquality.bEqInteger :: "x1:GHC.Integer.Type.Integer -> x2:GHC.Integer.Type.Integer -> {v : GHC.Types.Bool | (v <=> bbEq x1 x2)\n                                                                                    && (v <=> x1 == x2)}"
91:12-91:13::x :: "GHC.Integer.Type.Integer"
91:14-91:15::y :: "GHC.Integer.Type.Integer"
91:18-91:19::x :: "{v : GHC.Integer.Type.Integer | v == x}"
91:23-91:24::y :: "{v : GHC.Integer.Type.Integer | v == y}"
95:1-95:8::PropositionalEquality.bEqBool :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {v : GHC.Types.Bool | (v <=> bbEq x1 x2)\n                                                                && (v <=> x1 == x2)}"
95:9-95:10::x :: "GHC.Types.Bool"
95:11-95:12::y :: "GHC.Types.Bool"
95:15-95:16::x :: "{v : GHC.Types.Bool | v == x}"
95:20-95:21::y :: "{v : GHC.Types.Bool | v == y}"