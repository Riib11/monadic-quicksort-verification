1:1-1:1::RefinedDomains.$trModule :: "GHC.Types.Module"
16:1-16:3::RefinedDomains.pf :: "{VV : (PropositionalEquality.EqT x:{v : GHC.Integer.Type.Integer | 0 <= v} -> GHC.Integer.Type.Integer) | eqT add1Int add1Nat}"
16:12-16:19::RefinedDomains.add1Int :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Int x1\n                                                               && v == x1 + 1}"
16:20-16:27::RefinedDomains.add1Nat :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Nat x1\n                                                               && v == (if x1 >= 0 then x1 + 1 else 0)}"
16:28-16:85::PropositionalEquality.$fAEqInteger :: "{v : (PropositionalEquality.AEq GHC.Integer.Type.Integer) | v == $fAEqInteger}"
16:30-16:31::x :: "GHC.Integer.Type.Integer"
16:41-16:52::lq_anf$##7205759403792855644 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
16:50-16:51::x :: "{v : GHC.Integer.Type.Integer | v == x}"
16:53-16:64::lq_anf$##7205759403792855645 :: "{v : GHC.Integer.Type.Integer | v == add1Nat x\n                                && v == (if x >= 0 then x + 1 else 0)}"
16:62-16:63::x :: "{v : GHC.Integer.Type.Integer | v == x}"
16:65-16:84::lq_anf$##7205759403792855647 :: "()"
16:72-16:83::lq_anf$##7205759403792855646 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
16:81-16:82::x :: "{v : GHC.Integer.Type.Integer | v == x}"
20:1-20:4::RefinedDomains.pf' :: "{VV : (PropositionalEquality.EqT x:{v : GHC.Integer.Type.Integer | 0 <= v} -> {v : GHC.Integer.Type.Integer | 0 <= v}) | eqT add1Int add1Nat}"
20:13-20:20::RefinedDomains.add1Int :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Int x1\n                                                               && v == x1 + 1}"
20:21-20:28::RefinedDomains.add1Nat :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Nat x1\n                                                               && v == (if x1 >= 0 then x1 + 1 else 0)}"
20:29-20:33::RefinedDomains.pf0' :: "x1:{v : GHC.Integer.Type.Integer | 0 <= v} -> {v : (PropositionalEquality.EqT {v : GHC.Integer.Type.Integer | 0 <= v}) | eqT (add1Int x1) (add1Nat x1)}"
24:1-24:5::RefinedDomains.pf0' :: "x1:{v : GHC.Integer.Type.Integer | 0 <= v} -> {VV : (PropositionalEquality.EqT {v : GHC.Integer.Type.Integer | 0 <= v}) | eqT (add1Int x1) (add1Nat x1)}"
24:6-24:7::x :: "{v : GHC.Integer.Type.Integer | 0 <= v}"
24:16-24:27::lq_anf$##7205759403792855640 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
24:25-24:26::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
24:29-24:40::lq_anf$##7205759403792855641 :: "{v : GHC.Integer.Type.Integer | v == add1Nat x\n                                && v == (if x >= 0 then x + 1 else 0)}"
24:38-24:39::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
24:41-24:60::lq_anf$##7205759403792855643 :: "()"
24:48-24:59::lq_anf$##7205759403792855642 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
24:57-24:58::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
28:1-28:5::RefinedDomains.pf'' :: "{VV : (PropositionalEquality.EqT x:{v : GHC.Integer.Type.Integer | 0 <= v} -> {v : GHC.Integer.Type.Integer | v == x + 1}) | eqT add1Int add1Nat}"
28:15-28:22::RefinedDomains.add1Int :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Int x1\n                                                               && v == x1 + 1}"
28:23-28:30::RefinedDomains.add1Nat :: "x1:GHC.Integer.Type.Integer -> {v : GHC.Integer.Type.Integer | v == add1Nat x1\n                                                               && v == (if x1 >= 0 then x1 + 1 else 0)}"
28:31-28:36::RefinedDomains.pf0'' :: "x1:{v : GHC.Integer.Type.Integer | 0 <= v} -> {v : (PropositionalEquality.EqT {v : GHC.Integer.Type.Integer | v == x1 + 1}) | eqT (add1Int x1) (add1Nat x1)}"
32:1-32:6::RefinedDomains.pf0'' :: "x1:{v : GHC.Integer.Type.Integer | 0 <= v} -> {VV : (PropositionalEquality.EqT {v : GHC.Integer.Type.Integer | v == x1 + 1}) | eqT (add1Int x1) (add1Nat x1)}"
32:7-32:8::x :: "{v : GHC.Integer.Type.Integer | 0 <= v}"
32:17-32:28::lq_anf$##7205759403792855636 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
32:26-32:27::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
32:30-32:41::lq_anf$##7205759403792855637 :: "{v : GHC.Integer.Type.Integer | v == add1Nat x\n                                && v == (if x >= 0 then x + 1 else 0)}"
32:39-32:40::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
32:42-32:61::lq_anf$##7205759403792855639 :: "()"
32:49-32:60::lq_anf$##7205759403792855638 :: "{v : GHC.Integer.Type.Integer | v == add1Int x\n                                && v == x + 1}"
32:58-32:59::x :: "{v : GHC.Integer.Type.Integer | 0 <= v\n                                && v == x}"
66:1-66:8::RefinedDomains.add1Int :: "x1:GHC.Integer.Type.Integer -> {VV : GHC.Integer.Type.Integer | VV == add1Int x1\n                                                                && VV == x1 + 1}"
66:9-66:10::x :: "GHC.Integer.Type.Integer"
66:13-66:14::x :: "{v : GHC.Integer.Type.Integer | v == x}"
66:17-66:18::lq_anf$##7205759403792855631 :: "{v : GHC.Integer.Type.Integer | v == 1}"
70:1-70:8::RefinedDomains.add1Nat :: "x1:GHC.Integer.Type.Integer -> {VV : GHC.Integer.Type.Integer | VV == add1Nat x1\n                                                                && VV == (if x1 >= 0 then x1 + 1 else 0)}"
70:9-70:10::x :: "GHC.Integer.Type.Integer"
70:16-70:17::x :: "{v : GHC.Integer.Type.Integer | v == x}"
70:21-70:22::lq_anf$##7205759403792855632 :: "{v : GHC.Integer.Type.Integer | v == 0}"
70:28-70:29::x :: "{v : GHC.Integer.Type.Integer | v == x}"
70:32-70:33::lq_anf$##7205759403792855635 :: "{v : GHC.Integer.Type.Integer | v == 1}"