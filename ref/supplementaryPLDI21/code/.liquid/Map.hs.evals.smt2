(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_tmp$36$x$35$$35$1435 () Int)
(declare-fun lq_tmp$36$x$35$$35$1398 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844363$35$$35$ddcL$35$$35$k_$35$$35$1240 () Int)
(declare-fun lq_tmp$36$x$35$$35$1570 () Int)
(declare-fun lq_karg$36$Map.mapEq$35$$35$k_$35$$35$1479 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1221 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_tmp$36$x$35$$35$1381 () Int)
(declare-fun RefinedDomains.pf () Int)
(declare-fun addrLen () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1166 () Int)
(declare-fun bbEq () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$3 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ$35$$35$k_$35$$35$1147 () Int)
(declare-fun papp5 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.Admit () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_tmp$36$x$35$$35$1255 () Int)
(declare-fun lq_tmp$36$x$35$$35$993 () Int)
(declare-fun lq_tmp$36$x$35$$35$2067 () Int)
(declare-fun lq_karg$36$xs$35$$35$acjm$35$$35$k_$35$$35$1240 () Int)
(declare-fun PEqProperties.C$58$SMTEq () Int)
(declare-fun VV$35$$35$F$35$$35$57 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun fix$36$_f$35$$35$acjn () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_tmp$36$x$35$$35$1832 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.withProof () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_tmp$36$x$35$$35$2075 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun lq_tmp$36$x$35$$35$1441 () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun PEqProperties.aEqToSMT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2082 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN () Int)
(declare-fun g$35$$35$acju () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK$35$$35$k_$35$$35$1240 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun lq_tmp$36$x$35$$35$2061 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_karg$36$f$35$$35$acjj$35$$35$k_$35$$35$1147 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM$35$$35$k_$35$$35$1240 () Int)
(declare-fun f$35$$35$acjt () Int)
(declare-fun lq_tmp$36$x$35$$35$1510 () Int)
(declare-fun lq_tmp$36$x$35$$35$1149 () Int)
(declare-fun lq_tmp$36$x$35$$35$1433 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun PEqProperties.toSMT () Int)
(declare-fun lq_tmp$36$x$35$$35$2078 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI$35$$35$k_$35$$35$1240 () Int)
(declare-fun lq_karg$36$VV$35$$35$1297$35$$35$k_$35$$35$1298 () Int)
(declare-fun lq_tmp$36$x$35$$35$2025 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun Map.mapEq$39$$39$ () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ () Int)
(declare-fun PEqProperties.C$58$Symmetry () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_karg$36$g$35$$35$acjk$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_tmp$36$x$35$$35$1535 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_tmp$36$x$35$$35$1847 () Int)
(declare-fun lq_tmp$36$x$35$$35$1964 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$60$$61$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK$35$$35$k_$35$$35$1166 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$2 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM$35$$35$k_$35$$35$1221 () Int)
(declare-fun lq_tmp$36$x$35$$35$1254 () Int)
(declare-fun lq_tmp$36$x$35$$35$992 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK$35$$35$k_$35$$35$1221 () Int)
(declare-fun VV$35$$35$F$35$$35$56 () Int)
(declare-fun Map.flipMap () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI$35$$35$k_$35$$35$1221 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun PropositionalEquality.symmP () Int)
(declare-fun lq_tmp$36$x$35$$35$1074 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI$35$$35$k_$35$$35$1166 () Int)
(declare-fun lq_tmp$36$x$35$$35$1439 () Int)
(declare-fun lq_tmp$36$x$35$$35$1262 () Int)
(declare-fun lq_tmp$36$x$35$$35$1394 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun fix$36$_f$35$$35$acjy () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$2085 () Int)
(declare-fun lq_tmp$36$x$35$$35$1295 () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun xs$35$$35$acjs () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$1853 () Int)
(declare-fun lq_tmp$36$x$35$$35$1805 () Int)
(declare-fun lq_tmp$36$x$35$$35$1511 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1115 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1240 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun lq_tmp$36$x$35$$35$1234 () Int)
(declare-fun Map.client$39$$39$ () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_karg$36$xs$35$$35$acjm$35$$35$k_$35$$35$1166 () Int)
(declare-fun lq_tmp$36$x$35$$35$1476 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$42$$42$$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844363$35$$35$ddcL$35$$35$k_$35$$35$1221 () Int)
(declare-fun lq_karg$36$xs$35$$35$acjm$35$$35$k_$35$$35$1221 () Int)
(declare-fun RefinedDomains.pf$39$ () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun lq_tmp$36$x$35$$35$1252 () Int)
(declare-fun lq_tmp$36$x$35$$35$994 () Int)
(declare-fun RefinedDomains.pf0$39$ () Int)
(declare-fun VV$35$$35$F$35$$35$50 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS () Int)
(declare-fun lq_karg$36$g$35$$35$acjk$35$$35$k_$35$$35$1240 () Int)
(declare-fun PEqProperties.refl () Int)
(declare-fun VV$35$$35$F$35$$35$77 () Int)
(declare-fun lq_tmp$36$x$35$$35$2065 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun xs$35$$35$acjm () Int)
(declare-fun VV$35$$35$F$35$$35$55 () Int)
(declare-fun PEqProperties.cong () Int)
(declare-fun f$35$$35$acjp () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_tmp$36$x$35$$35$1437 () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844363$35$$35$ddcL () Int)
(declare-fun Map.map () Int)
(declare-fun VV$35$$35$F$35$$35$33 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI$35$$35$k_$35$$35$1147 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$63$ () Int)
(declare-fun lq_karg$36$f$35$$35$acjj$35$$35$k_$35$$35$1240 () Int)
(declare-fun lq_tmp$36$x$35$$35$1668 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$1770 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun g$35$$35$acjq () Int)
(declare-fun lq_tmp$36$x$35$$35$786 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK$35$$35$k_$35$$35$1147 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$1 () Int)
(declare-fun PropositionalEquality.EqFun () Int)
(declare-fun PEqProperties.C$58$Transitivity () Int)
(declare-fun papp7 () Int)
(declare-fun lq_tmp$36$x$35$$35$1257 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$mpf$35$$35$acjl$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_tmp$36$x$35$$35$2084 () Int)
(declare-fun lq_tmp$36$x$35$$35$1258 () Int)
(declare-fun RefinedDomains.add1Nat () Int)
(declare-fun PEqProperties.trans () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$790 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun x$35$$35$acjA () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun RefinedDomains.add1Int () Int)
(declare-fun VV$35$$35$F$35$$35$61 () Int)
(declare-fun lq_tmp$36$x$35$$35$2073 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun mpf$35$$35$acjr () Int)
(declare-fun lq_tmp$36$x$35$$35$1447 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$952 () Int)
(declare-fun PEqProperties.C$58$Reflexivity () Int)
(declare-fun lq_tmp$36$x$35$$35$1700 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$x$35$$35$1160 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$61$ () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2081 () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun g$35$$35$acjk () Int)
(declare-fun RefinedDomains.pf0$39$$39$ () Int)
(declare-fun lq_karg$36$VV$35$$35$1220$35$$35$k_$35$$35$1221 () Int)
(declare-fun lq_karg$36$Map.mapEq$39$$39$$35$$35$k_$35$$35$1479 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun PEqProperties.sym () Int)
(declare-fun lq_karg$36$VV$35$$35$1478$35$$35$k_$35$$35$1479 () Int)
(declare-fun VV$35$$35$F$35$$35$64 () Int)
(declare-fun lq_tmp$36$x$35$$35$2076 () Int)
(declare-fun f$35$$35$acjj () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun RefinedDomains.pf$39$$39$ () Int)
(declare-fun lq_karg$36$VV$35$$35$1146$35$$35$k_$35$$35$1147 () Int)
(declare-fun PropositionalEquality.EqCtx () Int)
(declare-fun lq_tmp$36$x$35$$35$975 () Int)
(declare-fun lq_tmp$36$x$35$$35$1442 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1640 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$62$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$945 () Int)
(declare-fun is$36$PropositionalEquality.EqSMT () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1147 () Int)
(declare-fun mpf$35$$35$acjl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0 () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ$35$$35$k_$35$$35$1166 () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun PropositionalEquality.$36$WEqCtx () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1479 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$1256 () Int)
(declare-fun lq_tmp$36$x$35$$35$2064 () Int)
(declare-fun VV$35$$35$F$35$$35$76 () Int)
(declare-fun VV$35$$35$F$35$$35$54 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ$35$$35$k_$35$$35$1221 () Int)
(declare-fun lq_tmp$36$x$35$$35$1735 () Int)
(declare-fun lq_tmp$36$x$35$$35$1436 () Int)
(declare-fun lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr () Str)
(declare-fun isAdmit () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 () Int)
(declare-fun is$36$PropositionalEquality.EqCtx () Int)
(declare-fun PropositionalEquality.reflP () Int)
(declare-fun lq_tmp$36$x$35$$35$1141 () Int)
(declare-fun lq_tmp$36$x$35$$35$2070 () Int)
(declare-fun PropositionalEquality.eqRTCtx () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun VV$35$$35$F$35$$35$40 () Int)
(declare-fun lq_tmp$36$x$35$$35$951 () Int)
(declare-fun lq_tmp$36$x$35$$35$1026 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_tmp$36$x$35$$35$1004 () Int)
(declare-fun lq_karg$36$mpf$35$$35$acjl$35$$35$k_$35$$35$1166 () Int)
(declare-fun PropositionalEquality.deqFun () Int)
(declare-fun lq_tmp$36$x$35$$35$937 () Int)
(declare-fun lq_karg$36$mpf$35$$35$acjl$35$$35$k_$35$$35$1221 () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lq_tmp$36$x$35$$35$2069 () Int)
(declare-fun Map.mapEq () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX () Int)
(declare-fun Map.mapEq$39$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1322 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ () Int)
(declare-fun PEqProperties.C$58$Congruence () Int)
(declare-fun lq_tmp$36$x$35$$35$1223 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_karg$36$Map.mapEq$35$$35$k_$35$$35$1298 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$65 () Int)
(declare-fun lq_tmp$36$x$35$$35$2077 () Int)
(declare-fun lq_tmp$36$x$35$$35$1443 () Int)
(declare-fun lq_karg$36$Map.client$35$$35$k_$35$$35$1479 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun PropositionalEquality.transP () Int)
(declare-fun mpf$35$$35$acjv () Int)
(declare-fun GHC.List.take () Int)
(declare-fun PropositionalEquality.$36$WEqFun () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$1605 () Int)
(declare-fun prop () Int)
(declare-fun lq_tmp$36$x$35$$35$1388 () Int)
(declare-fun lq_tmp$36$x$35$$35$1003 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_karg$36$mpf$35$$35$acjl$35$$35$k_$35$$35$1240 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_tmp$36$x$35$$35$2080 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_tmp$36$x$35$$35$930 () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_tmp$36$x$35$$35$1251 () Int)
(declare-fun lq_tmp$36$x$35$$35$1053 () Int)
(declare-fun fix$36$$36$dReflexivity_acmc () Int)
(declare-fun lq_tmp$36$x$35$$35$2063 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.impossible () Int)
(declare-fun lq_tmp$36$x$35$$35$1925 () Int)
(declare-fun lq_tmp$36$x$35$$35$1068 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 () Int)
(declare-fun PEqProperties.flip () Int)
(declare-fun lq_tmp$36$x$35$$35$1248 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI () Int)
(declare-fun lq_tmp$36$x$35$$35$1431 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun lq_tmp$36$x$35$$35$1215 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ$35$$35$k_$35$$35$1240 () Int)
(declare-fun VV$35$$35$F$35$$35$35 () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.$61$$61$$33$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ () Int)
(declare-fun is$36$PropositionalEquality.EqFun () Int)
(declare-fun lq_tmp$36$x$35$$35$1897 () Int)
(declare-fun eqT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK () Int)
(declare-fun lq_karg$36$xs$35$$35$acjm$35$$35$k_$35$$35$1147 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun fix$36$$36$dTransitivity_acmd () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun PEqProperties.dollar () Int)
(declare-fun lq_tmp$36$x$35$$35$2086 () Int)
(declare-fun VV$35$$35$F$35$$35$104 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_tmp$36$x$35$$35$2068 () Int)
(declare-fun Map.client () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 () Int)
(declare-fun lq_karg$36$VV$35$$35$1239$35$$35$k_$35$$35$1240 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun fix$36$_xs$35$$35$acjo () Int)
(declare-fun lq_tmp$36$x$35$$35$2071 () Int)
(declare-fun lq_tmp$36$x$35$$35$837 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun PropositionalEquality.C$58$AEq () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_tmp$36$x$35$$35$1440 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_tmp$36$x$35$$35$898 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lq_karg$36$Map.mapFlipMap$35$$35$k_$35$$35$1298 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_tmp$36$x$35$$35$1365 () Int)
(declare-fun lq_tmp$36$x$35$$35$2083 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun VV$35$$35$F$35$$35$91 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun f$35$$35$acjx () Int)
(declare-fun lq_karg$36$VV$35$$35$1165$35$$35$k_$35$$35$1166 () Int)
(declare-fun lq_tmp$36$x$35$$35$1189 () Int)
(declare-fun lq_tmp$36$x$35$$35$797 () Int)
(declare-fun lq_tmp$36$x$35$$35$1321 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$2074 () Int)
(declare-fun lq_tmp$36$x$35$$35$1264 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP () Int)
(declare-fun VV$35$$35$F$35$$35$34 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun PropositionalEquality.bEq () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Map.mapFlipMap () Int)
(declare-fun lq_karg$36$f$35$$35$acjj$35$$35$k_$35$$35$1221 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_karg$36$g$35$$35$acjk$35$$35$k_$35$$35$1166 () Int)
(declare-fun PropositionalEquality.eqSMT () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$1250 () Int)
(declare-fun lit$36$Map () Str)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Language.Haskell.Liquid.ProofCombinators.QED () Int)
(declare-fun lq_karg$36$g$35$$35$acjk$35$$35$k_$35$$35$1221 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lq_tmp$36$x$35$$35$798 () Int)
(declare-fun lq_karg$36$f$35$$35$acjj$35$$35$k_$35$$35$1166 () Int)
(declare-fun PropositionalEquality.EqSMT () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$Map lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct Language.Haskell.Liquid.ProofCombinators.QED Language.Haskell.Liquid.ProofCombinators.Admit))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr) 53))
(assert (= (strLen lit$36$Map) 3))
(push 1)
(push 1)
(assert (and (not GHC.Types.False)))
(assert (and (= GHC.Tuple.$40$$41$ GHC.Tuple.$40$$41$)))
(assert (and (apply$35$$35$1 isAdmit Language.Haskell.Liquid.ProofCombinators.Admit)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and GHC.Types.True))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$) (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (>= (apply$35$$35$0 (as len Int) fix$36$_xs$35$$35$acjo) 0)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$) (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (>= (apply$35$$35$0 (as len Int) fix$36$_xs$35$$35$acjo) 0) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) fix$36$_f$35$$35$acjn) fix$36$_xs$35$$35$acjo) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 fix$36$_f$35$$35$acjn (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) fix$36$_xs$35$$35$acjo))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) fix$36$_f$35$$35$acjn) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) fix$36$_xs$35$$35$acjo))))) (and (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$) (= VV$35$$35$F$35$$35$104 GHC.Tuple.$40$$41$)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) fix$36$_xs$35$$35$acjo) fix$36$_f$35$$35$acjn) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 fix$36$_f$35$$35$acjn (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) fix$36$_xs$35$$35$acjo))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) fix$36$_f$35$$35$acjn) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) fix$36$_xs$35$$35$acjo))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (>= (apply$35$$35$0 (as len Int) fix$36$_xs$35$$35$acjo) 0) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) fix$36$_xs$35$$35$acjo) fix$36$_f$35$$35$acjn) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) fix$36$_f$35$$35$acjn) fix$36$_xs$35$$35$acjo)) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) fix$36$_xs$35$$35$acjo)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjj) g$35$$35$acjk)))
(assert (and (>= (apply$35$$35$0 (as len Int) xs$35$$35$acjm) 0)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (= lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm)) (= lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjj) g$35$$35$acjk) (>= (apply$35$$35$0 (as len Int) xs$35$$35$acjm) 0) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (= lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm)) (= lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(push 1)
(assert (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) mpf$35$$35$acjl)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) g$35$$35$acjk)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) f$35$$35$acjj)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI f$35$$35$acjj)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI g$35$$35$acjk))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) g$35$$35$acjk)) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) f$35$$35$acjj)) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm)))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) mpf$35$$35$acjl)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) g$35$$35$acjk)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) f$35$$35$acjj)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI f$35$$35$acjj)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI g$35$$35$acjk))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) g$35$$35$acjk)) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) f$35$$35$acjj)) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) mpf$35$$35$acjl)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) g$35$$35$acjk)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) f$35$$35$acjj)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI f$35$$35$acjj)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI g$35$$35$acjk))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= lq_anf$36$$35$$35$7205759403792844361$35$$35$ddcJ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjj) g$35$$35$acjk) mpf$35$$35$acjl) lq_anf$36$$35$$35$7205759403792844360$35$$35$ddcI))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) g$35$$35$acjk) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjk (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjm))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjm))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) f$35$$35$acjj) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjj (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjm))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjm))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) f$35$$35$acjj) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) xs$35$$35$acjm)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) g$35$$35$acjk) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) xs$35$$35$acjm)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) g$35$$35$acjk)) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844364$35$$35$ddcM (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) g$35$$35$acjk) xs$35$$35$acjm))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) xs$35$$35$acjm) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjj (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjm))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjm))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) xs$35$$35$acjm) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjk (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjm))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjk) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjm))))) (and (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjj) xs$35$$35$acjm) (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjm) f$35$$35$acjj)) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm))) (= lq_anf$36$$35$$35$7205759403792844362$35$$35$ddcK (apply$35$$35$0 (apply$35$$35$0 (as Map.mapFlipMap Int) f$35$$35$acjj) xs$35$$35$acjm))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjm)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjj) g$35$$35$acjk) (= VV$35$$35$F$35$$35$91 mpf$35$$35$acjl))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjj) g$35$$35$acjk) (= VV$35$$35$F$35$$35$91 mpf$35$$35$acjl)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (= Map.client (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Map.mapEq Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN (as Map.map Int))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjt) g$35$$35$acju)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjt) g$35$$35$acju) (= VV$35$$35$F$35$$35$50 mpf$35$$35$acjv))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$40) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$40) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) VV$35$$35$F$35$$35$40) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) VV$35$$35$F$35$$35$40) mpf$35$$35$acjv)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) VV$35$$35$F$35$$35$40) g$35$$35$acju)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) VV$35$$35$F$35$$35$40) f$35$$35$acjt)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$40) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN f$35$$35$acjt)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN g$35$$35$acju))) (= VV$35$$35$F$35$$35$40 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjt) g$35$$35$acju) mpf$35$$35$acjv) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN))) (= VV$35$$35$F$35$$35$40 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjt) g$35$$35$acju) mpf$35$$35$acjv) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$40) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$40) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) VV$35$$35$F$35$$35$40) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) VV$35$$35$F$35$$35$40) mpf$35$$35$acjv)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) VV$35$$35$F$35$$35$40) g$35$$35$acju)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) VV$35$$35$F$35$$35$40) f$35$$35$acjt)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$40) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN f$35$$35$acjt)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN g$35$$35$acju))) (= VV$35$$35$F$35$$35$40 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjt) g$35$$35$acju) mpf$35$$35$acjv) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN))) (= VV$35$$35$F$35$$35$40 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjt) g$35$$35$acju) mpf$35$$35$acjv) lq_anf$36$$35$$35$7205759403792844365$35$$35$ddcN))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int)) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat)) (= Map.client$39$$39$ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Map.mapEq$39$$39$ Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf)))))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq)) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) 0))))
(assert (and (>= (apply$35$$35$0 (as len Int) xs$35$$35$acjs) 0)))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) 0))))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP) 0))))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) 0))))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) 0))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) 0))))
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjp) g$35$$35$acjq)))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) 0))))
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (and (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs)))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int)) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat)) (= Map.client$39$$39$ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Map.mapEq$39$$39$ Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf))) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq)) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) 0)) (>= (apply$35$$35$0 (as len Int) xs$35$$35$acjs) 0) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) 0)) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP) 0)) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) 0)) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) 0)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) 0)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjp) g$35$$35$acjq) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) 0)) (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (and (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int)) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat)) (= Map.client$39$$39$ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Map.mapEq$39$$39$ Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf))) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq)) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) 0)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (>= (apply$35$$35$0 (as len Int) xs$35$$35$acjs) 0) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) 0)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp)) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (= lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP) 0)) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) 0)) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) 0)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) 0)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjp) g$35$$35$acjq) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs)))))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) 0)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (and (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs)) (= lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) mpf$35$$35$acjr)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) g$35$$35$acjq)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) f$35$$35$acjp)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW f$35$$35$acjp)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW)))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (and (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq)) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) 0))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) (= lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) mpf$35$$35$acjr)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) g$35$$35$acjq)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) f$35$$35$acjp)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW f$35$$35$acjp)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (and (and (and (and (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq)) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs))) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (= lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq))) (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) 0)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) (= lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) (= lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ)))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) (= lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) (= VV$35$$35$F$35$$35$2 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS) lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) (= VV$35$$35$F$35$$35$2 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844366$35$$35$ddcO) lq_anf$36$$35$$35$7205759403792844367$35$$35$ddcP) lq_anf$36$$35$$35$7205759403792844368$35$$35$ddcQ) lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS) lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) (= VV$35$$35$F$35$$35$3 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= VV$35$$35$F$35$$35$3 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= VV$35$$35$F$35$$35$3 lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) (= VV$35$$35$F$35$$35$3 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= VV$35$$35$F$35$$35$3 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PEqProperties.trans Int) lq_anf$36$$35$$35$7205759403792844371$35$$35$ddcT) lq_anf$36$$35$$35$7205759403792844372$35$$35$ddcU) lq_anf$36$$35$$35$7205759403792844373$35$$35$ddcV) lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX) lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))) (= VV$35$$35$F$35$$35$3 lq_anf$36$$35$$35$7205759403792844378$35$$35$ddd0)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) (= VV$35$$35$F$35$$35$4 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= VV$35$$35$F$35$$35$4 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= VV$35$$35$F$35$$35$4 lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR) (= VV$35$$35$F$35$$35$4 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= VV$35$$35$F$35$$35$4 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844369$35$$35$ddcR))) (= VV$35$$35$F$35$$35$4 lq_anf$36$$35$$35$7205759403792844370$35$$35$ddcS)) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) (= VV$35$$35$F$35$$35$5 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= VV$35$$35$F$35$$35$5 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= VV$35$$35$F$35$$35$5 lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY) (= VV$35$$35$F$35$$35$5 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= VV$35$$35$F$35$$35$5 (apply$35$$35$0 (as PEqProperties.refl Int) lq_anf$36$$35$$35$7205759403792844376$35$$35$ddcY))) (= VV$35$$35$F$35$$35$5 lq_anf$36$$35$$35$7205759403792844377$35$$35$ddcZ)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$6) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$6) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) VV$35$$35$F$35$$35$6) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) VV$35$$35$F$35$$35$6) mpf$35$$35$acjr)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) VV$35$$35$F$35$$35$6) g$35$$35$acjq)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) VV$35$$35$F$35$$35$6) f$35$$35$acjp)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$6) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW f$35$$35$acjp)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW g$35$$35$acjq))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$6) false) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$6) false)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 Int) VV$35$$35$F$35$$35$6) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 Int) VV$35$$35$F$35$$35$6) mpf$35$$35$acjr)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 Int) VV$35$$35$F$35$$35$6) g$35$$35$acjq)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 Int) VV$35$$35$F$35$$35$6) f$35$$35$acjp)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$6) true)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW f$35$$35$acjp)) (apply$35$$35$0 lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW g$35$$35$acjq))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqCtx Int) f$35$$35$acjp) g$35$$35$acjq) mpf$35$$35$acjr) lq_anf$36$$35$$35$7205759403792844374$35$$35$ddcW))) (= VV$35$$35$F$35$$35$6 lq_anf$36$$35$$35$7205759403792844375$35$$35$ddcX)) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)))
(assert (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjp) g$35$$35$acjq) (= VV$35$$35$F$35$$35$14 mpf$35$$35$acjr))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 g$35$$35$acjq (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 f$35$$35$acjp (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) xs$35$$35$acjs))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) xs$35$$35$acjs))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) f$35$$35$acjp) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) f$35$$35$acjp) xs$35$$35$acjs)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.flipMap Int) xs$35$$35$acjs) g$35$$35$acjq) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) g$35$$35$acjq) xs$35$$35$acjs)) (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) f$35$$35$acjp) g$35$$35$acjq) (= VV$35$$35$F$35$$35$14 mpf$35$$35$acjr)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) xs$35$$35$acjs)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int)) (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat)) (= VV$35$$35$F$35$$35$33 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Map.mapEq$39$$39$ Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) (= VV$35$$35$F$35$$35$35 RefinedDomains.pf))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (>= (apply$35$$35$0 (as len Int) lq_tmp$36$x$35$$35$1262) 0)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int) lq_tmp$36$x$35$$35$1262)) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat) lq_tmp$36$x$35$$35$1262))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (>= (apply$35$$35$0 (as len Int) lq_tmp$36$x$35$$35$1262) 0) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int) lq_tmp$36$x$35$$35$1262)) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat) lq_tmp$36$x$35$$35$1262)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (>= (apply$35$$35$0 (as len Int) lq_tmp$36$x$35$$35$1262) 0) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int) lq_tmp$36$x$35$$35$1262)) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat) lq_tmp$36$x$35$$35$1262)) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int) lq_tmp$36$x$35$$35$1262) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 RefinedDomains.add1Int (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_tmp$36$x$35$$35$1262))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Int) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_tmp$36$x$35$$35$1262))))) (= (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat) lq_tmp$36$x$35$$35$1262) (ite (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262) (as GHC.Types.$91$$93$ Int) (apply$35$$35$0 (apply$35$$35$0 (as GHC.Types.$58$ Int) (apply$35$$35$0 RefinedDomains.add1Nat (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 Int) lq_tmp$36$x$35$$35$1262))) (apply$35$$35$0 (apply$35$$35$0 (as Map.map Int) RefinedDomains.add1Nat) (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 Int) lq_tmp$36$x$35$$35$1262))))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) lq_tmp$36$x$35$$35$1262)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) (= VV$35$$35$F$35$$35$56 RefinedDomains.pf))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
(pop 1)
