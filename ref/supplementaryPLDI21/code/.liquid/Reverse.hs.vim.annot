1:1-1:1::Reverse.$trModule :: "GHC.Types.Module"
25:1-25:13::Reverse.reverseFunEq :: "forall a .\n(PropositionalEquality.AEq<[]> [a]) =>\n{VV : (PropositionalEquality.EqT [a] -> [a]) | eqT fastReverse slowReverse}"
25:22-25:33::_ :: "{VV : forall a .\n      x1:[a] -> {v : [a] | v == fastReverse x1\n                           && v == fastReverse' [] x1} | VV == fastReverse}"
25:34-25:45::Reverse.slowReverse :: "forall a . x1:[a] -> {VV : [a] | VV == slowReverse x1}"
25:46-25:56::lq_anf$##7205759403792852235 :: "x1:[a] -> {v : (PropositionalEquality.EqT [a]) | eqT (fastReverse x1) (slowReverse x1)}"
30:1-30:17::Reverse.reverseFunSimple :: "forall a .\n(PEqProperties.Reflexivity<[]> [a]) =>\nx2:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (fastReverse x2) (slowReverse x2)}"
30:18-30:20::xs :: "[a]"
30:23-30:44::lq_anf$##7205759403792852227 :: "(PropositionalEquality.EqT [a])"
30:28-30:44::lq_anf$##7205759403792852226 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
30:41-30:43::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
30:47-30:58::lq_anf$##7205759403792852229 :: "()"
30:53-30:55::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
30:56-30:58::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
30:61-30:85::lq_anf$##7205759403792852232 :: "()"
30:69-30:85::lq_anf$##7205759403792852231 :: "{v : [a] | v == slowReverse xs}"
30:82-30:84::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
35:1-35:15::Reverse.reverseFunProp :: "forall a .\n(PEqProperties.Reflexivity<[]> [a], PEqProperties.Transitivity<[]> [a]) =>\nx3:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (fastReverse x3) (slowReverse x3)}"
35:16-35:18::xs :: "[a]"
35:27-35:43::lq_anf$##7205759403792852293 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
35:40-35:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
36:27-36:49::lq_anf$##7205759403792852296 :: "[a]"
36:28-36:42::lq_anf$##7205759403792852294 :: "{v : [a] | v == slowReverse xs}"
36:40-36:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
36:46-36:48::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
37:27-37:43::lq_anf$##7205759403792852297 :: "{v : [a] | v == slowReverse xs}"
37:40-37:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
38:27-38:51::lq_anf$##7205759403792852299 :: "(PropositionalEquality.EqT [a])"
38:45-38:47::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
38:48-38:50::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
39:27-39:54::lq_anf$##7205759403792852301 :: "(PropositionalEquality.EqT [a])"
39:37-39:53::lq_anf$##7205759403792852300 :: "{v : [a] | v == slowReverse xs}"
39:50-39:52::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
43:1-43:17::Reverse.reverseSameLemma :: "forall a .\n(PEqProperties.Reflexivity<[]> [a], PEqProperties.Transitivity<[]> [a]) =>\nx3:[a] -> x4:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (fastReverse' x3 x4) (++ (slowReverse x4) x3)}"
43:18-43:22::rest :: "[a]"
43:28-43:37::$dReflexivity_adx2 :: "{v : (PEqProperties.Reflexivity [a]) | v == $dReflexivity_adx2}"
43:33-43:37::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
45:9-45:35::lq_anf$##7205759403792852280 :: "[a]"
45:23-45:27::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
45:28-45:34::lq_anf$##7205759403792852279 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
45:29-45:30::x :: "{VV : a | VV == x}"
45:31-45:33::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
46:9-46:37::lq_anf$##7205759403792852283 :: "[a]"
46:10-46:24::lq_anf$##7205759403792852281 :: "{v : [a] | v == slowReverse xs}"
46:22-46:24::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
46:28-46:36::lq_anf$##7205759403792852282 :: "{v : [a] | tail v == rest\n           && head v == x\n           && lqdc##$select v == rest\n           && lqdc##$select v == x\n           && len v == 1 + len rest\n           && v == : x rest}"
46:29-46:30::x :: "{VV : a | VV == x}"
46:31-46:35::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
47:9-47:37::lq_anf$##7205759403792852286 :: "[a]"
47:10-47:28::lq_anf$##7205759403792852285 :: "[a]"
47:22-47:28::lq_anf$##7205759403792852284 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
47:23-47:24::x :: "{VV : a | VV == x}"
47:25-47:27::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
47:32-47:36::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
48:5-48:35::lq_anf$##7205759403792852288 :: "(PropositionalEquality.EqT [a])"
48:23-48:31::lq_anf$##7205759403792852287 :: "{v : [a] | tail v == rest\n           && head v == x\n           && lqdc##$select v == rest\n           && lqdc##$select v == x\n           && len v == 1 + len rest\n           && v == : x rest}"
48:24-48:25::x :: "{VV : a | VV == x}"
48:26-48:30::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
48:32-48:34::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
49:5-49:39::lq_anf$##7205759403792852292 :: "(PropositionalEquality.EqT [a])"
49:13-49:29::lq_anf$##7205759403792852289 :: "{v : [a] | v == slowReverse xs}"
49:26-49:28::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
49:30-49:33::lq_anf$##7205759403792852291 :: "{v : [a] | head v == x\n           && lqdc##$select v == x}"
49:31-49:32::x :: "{VV : a | VV == x}"
49:34-49:38::rest :: "{v : [a] | len v >= 0\n           && v == rest}"
54:1-54:9::Reverse.rightIdP :: "forall a .\n(PEqProperties.Reflexivity<[]> [a], PEqProperties.Transitivity<[]> [a]) =>\nx3:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (++ x3 []) x3}"
54:19-54:26::lq_anf$##7205759403792852261 :: "{v : [a] | len v == 0\n           && v == []}"
54:24-54:26::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
55:25-55:39::lq_anf$##7205759403792852264 :: "[a]"
55:26-55:32::lq_anf$##7205759403792852262 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
55:27-55:28::x :: "{VV : a | VV == x}"
55:29-55:31::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
55:36-55:38::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
56:25-56:42::lq_anf$##7205759403792852267 :: "[a]"
56:31-56:32::x :: "{VV : a | VV == x}"
56:33-56:41::lq_anf$##7205759403792852266 :: "[a]"
56:34-56:36::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
56:38-56:40::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
57:25-57:36::lq_anf$##7205759403792852268 :: "{v : [a] | v == : x xs\n           && v == cons x xs}"
57:31-57:32::x :: "{VV : a | VV == x}"
57:33-57:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
58:25-58:45::lq_anf$##7205759403792852272 :: "(PropositionalEquality.EqT [a])"
58:31-58:44::lq_anf$##7205759403792852271 :: "{v : [a] | head v == x\n           && lqdc##$select v == x}"
58:32-58:33::x :: "{VV : a | VV == x}"
58:34-58:43::lq_anf$##7205759403792852270 :: "[a]"
58:35-58:37::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
58:40-58:42::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
59:25-59:73::lq_anf$##7205759403792852277 :: "(PropositionalEquality.EqT [a])"
59:34-59:44::lq_anf$##7205759403792852274 :: "[a]"
59:35-59:37::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
59:41-59:43::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
59:45-59:49::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
59:50-59:63::lq_anf$##7205759403792852275 :: "{v : (PropositionalEquality.EqT [a]) | eqT (++ xs []) xs\n                                       && v == rightIdP xs}"
59:60-59:62::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
59:64-59:72::lq_anf$##7205759403792852276 :: "x1:[a] -> {v : [a] | v == : x x1\n                     && v == cons x x1}"
59:70-59:71::x :: "{VV : a | VV == x}"
65:1-65:7::Reverse.assocP :: "forall a .\n(PEqProperties.Reflexivity<[]> [a], PEqProperties.Transitivity<[]> [a]) =>\nx3:[a] -> x4:[a] -> x5:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (++ x3 (++ x4 x5)) (++ (++ x3 x4) x5)}"
65:15-65:17::ys :: "[a]"
65:18-65:20::zs :: "[a]"
65:23-65:46::$dReflexivity_advY :: "{v : (PEqProperties.Reflexivity [a]) | v == $dReflexivity_advY}"
65:28-65:46::lq_anf$##7205759403792852239 :: "[a]"
65:29-65:31::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
65:35-65:45::lq_anf$##7205759403792852238 :: "{v : [a] | v == ++ ys zs}"
65:36-65:38::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
65:42-65:44::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
66:29-66:51::lq_anf$##7205759403792852242 :: "[a]"
66:30-66:36::lq_anf$##7205759403792852240 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
66:31-66:32::x :: "{VV : a | VV == x}"
66:33-66:35::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
66:40-66:50::lq_anf$##7205759403792852241 :: "{v : [a] | v == ++ ys zs}"
66:41-66:43::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
66:47-66:49::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
67:29-67:56::lq_anf$##7205759403792852245 :: "[a]"
67:35-67:36::x :: "{VV : a | VV == x}"
67:37-67:55::lq_anf$##7205759403792852244 :: "[a]"
67:38-67:40::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
67:44-67:54::lq_anf$##7205759403792852243 :: "{v : [a] | v == ++ ys zs}"
67:45-67:47::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
67:51-67:53::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
68:29-68:57::lq_anf$##7205759403792852248 :: "[a]"
68:35-68:36::x :: "{VV : a | VV == x}"
68:38-68:56::lq_anf$##7205759403792852247 :: "[a]"
68:39-68:49::lq_anf$##7205759403792852246 :: "{v : [a] | v == ++ xs ys}"
68:40-68:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
68:46-68:48::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
68:53-68:55::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
69:29-69:58::lq_anf$##7205759403792852252 :: "(PropositionalEquality.EqT [a])"
69:35-69:57::lq_anf$##7205759403792852251 :: "[a]"
69:36-69:42::lq_anf$##7205759403792852249 :: "{v : [a] | tail v == xs\n           && head v == x\n           && lqdc##$select v == xs\n           && lqdc##$select v == x\n           && len v == 1 + len xs\n           && v == : x xs}"
69:37-69:38::x :: "{VV : a | VV == x}"
69:39-69:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
69:46-69:56::lq_anf$##7205759403792852250 :: "{v : [a] | v == ++ ys zs}"
69:47-69:49::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
69:53-69:55::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
70:29-70:105::lq_anf$##7205759403792852259 :: "(PropositionalEquality.EqT [a])"
70:38-70:58::lq_anf$##7205759403792852254 :: "[a]"
70:40-70:42::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
70:46-70:56::lq_anf$##7205759403792852253 :: "{v : [a] | v == ++ ys zs}"
70:47-70:49::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
70:53-70:55::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
70:59-70:77::lq_anf$##7205759403792852256 :: "[a]"
70:60-70:70::lq_anf$##7205759403792852255 :: "{v : [a] | v == ++ xs ys}"
70:61-70:63::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
70:67-70:69::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
70:74-70:76::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
70:78-70:95::lq_anf$##7205759403792852257 :: "{v : (PropositionalEquality.EqT [a]) | eqT (++ xs (++ ys zs)) (++ (++ xs ys) zs)\n                                       && v == assocP xs ys zs}"
70:86-70:88::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
70:89-70:91::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
70:92-70:94::zs :: "{v : [a] | len v >= 0\n           && v == zs}"
70:96-70:104::lq_anf$##7205759403792852258 :: "x1:[a] -> {v : [a] | v == : x x1\n                     && v == cons x x1}"
70:102-70:103::x :: "{VV : a | VV == x}"
76:1-76:5::Reverse.cons :: "forall a . x1:a -> x2:[a] -> {v : [a] | v == : x1 x2}"
76:6-76:7::x :: "a"
76:8-76:10::xs :: "[a]"
76:13-76:14::x :: "{VV : a | VV == x}"
76:15-76:17::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
80:1-80:6::Reverse.consP :: "forall a . x1:a -> x2:[a] -> {VV : () | cons x1 x2 == : x1 x2}"
80:7-80:8::x :: "a"
80:9-80:11::xs :: "[a]"
80:14-80:23::lq_anf$##7205759403792852175 :: "{v : [a] | v == : x xs\n           && v == cons x xs}"
80:19-80:20::x :: "{VV : a | VV == x}"
80:21-80:23::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
80:28-80:31::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
85:1-85:18::Reverse.reverseOneSwoopEq :: "forall a .\n(PropositionalEquality.AEq<[]> [a]) =>\n{VV : (PropositionalEquality.EqT [a] -> [a]) | eqT fastReverse slowReverse}"
85:21-85:50::lq_anf$##7205759403792852218 :: "x1:([a] -> (PropositionalEquality.EqT [a])) -> {v : (PropositionalEquality.EqT [a] -> [a]) | lqdc##$select v == x1}"
85:27-85:38::_ :: "{VV : forall a .\n      x1:[a] -> {v : [a] | v == fastReverse x1\n                           && v == fastReverse' [] x1} | VV == fastReverse}"
85:39-85:50::Reverse.slowReverse :: "forall a . x1:[a] -> {VV : [a] | VV == slowReverse x1}"
85:54-85:56::xs :: "[a]"
86:9-86:25::lq_anf$##7205759403792852219 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
86:22-86:24::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
86:26-86:42::lq_anf$##7205759403792852220 :: "{v : [a] | v == slowReverse xs}"
86:39-86:41::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
86:43-86:82::lq_anf$##7205759403792852224 :: "()"
86:44-86:56::lq_anf$##7205759403792852221 :: "{v : () | fastReverse xs == slowReverse xs\n          && v == reverseEq xs}"
86:54-86:56::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
86:59-86:81::lq_anf$##7205759403792852223 :: "()"
86:65-86:81::lq_anf$##7205759403792852222 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
86:78-86:80::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
90:1-90:11::Reverse.reverseTEq :: "forall a .\n(PropositionalEquality.AEq<[]> [a]) =>\nx2:[a] -> {VV : (PropositionalEquality.EqT [a]) | eqT (fastReverse x2) (slowReverse x2)}"
90:12-90:14::xs :: "[a]"
90:23-90:39::lq_anf$##7205759403792852210 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
90:36-90:38::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
90:40-90:56::lq_anf$##7205759403792852211 :: "{v : [a] | v == slowReverse xs}"
90:53-90:55::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
90:57-90:96::lq_anf$##7205759403792852215 :: "()"
90:58-90:70::lq_anf$##7205759403792852212 :: "{v : () | fastReverse xs == slowReverse xs\n          && v == reverseEq xs}"
90:68-90:70::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
90:73-90:95::lq_anf$##7205759403792852214 :: "()"
90:79-90:95::lq_anf$##7205759403792852213 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
90:92-90:94::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
94:1-94:10::Reverse.reverseEq :: "forall a . x1:[a] -> {VV : () | fastReverse x1 == slowReverse x1}"
94:11-94:13::xs :: "[a]"
95:9-95:20::lq_anf$##7205759403792852207 :: "()"
95:15-95:17::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
95:18-95:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
96:9-96:33::lq_anf$##7205759403792852209 :: "()"
96:17-96:33::lq_anf$##7205759403792852208 :: "{v : [a] | v == slowReverse xs}"
96:30-96:32::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
100:1-100:12::Reverse.reverseNoEq :: "forall a . x1:[a] -> {VV : () | fastReverse x1 == slowReverse x1}"
100:13-100:15::xs :: "[a]"
101:5-101:19::lq_anf$##7205759403792852194 :: "{v : [a] | v == fastReverse xs\n           && v == fastReverse' [] xs}"
101:17-101:19::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
102:5-102:23::lq_anf$##7205759403792852196 :: "[a]"
102:18-102:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
102:21-102:23::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
103:9-103:20::lq_anf$##7205759403792852199 :: "()"
103:15-103:17::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
103:18-103:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
104:9-104:33::lq_anf$##7205759403792852202 :: "()"
104:17-104:33::lq_anf$##7205759403792852201 :: "{v : [a] | v == slowReverse xs}"
104:30-104:32::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
105:5-105:19::lq_anf$##7205759403792852204 :: "{v : [a] | v == slowReverse xs}"
105:17-105:19::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
106:7-106:10::Language.Haskell.Liquid.ProofCombinators.QED :: "{v : Language.Haskell.Liquid.ProofCombinators.QED | v == QED}"
154:1-154:6::Reverse.lemma :: "forall a .\nx1:[a] -> x2:[a] -> {VV : () | fastReverse' x2 x1 == ++ (slowReverse x1) x2}"
154:15-154:17::GHC.Tuple.() :: "{v : () | v == ()}"
156:5-156:20::lq_anf$##7205759403792852189 :: "()"
156:11-156:13::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
156:14-156:20::lq_anf$##7205759403792852188 :: "{v : [a] | head v == x\n           && lqdc##$select v == x}"
156:15-156:16::x :: "{VV : a | VV == x}"
156:17-156:19::ds_ddzc :: "{v : [a] | len v >= 0}"
157:5-157:34::lq_anf$##7205759403792852193 :: "()"
157:11-157:27::lq_anf$##7205759403792852190 :: "{v : [a] | v == slowReverse xs}"
157:24-157:26::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
157:28-157:31::lq_anf$##7205759403792852192 :: "{v : [a] | head v == x\n           && lqdc##$select v == x}"
157:29-157:30::x :: "{VV : a | VV == x}"
157:32-157:34::ds_ddzc :: "{v : [a] | len v >= 0}"
161:1-161:8::Reverse.rightId :: "forall a . x1:[a] -> {VV : () | ++ x1 [] == x1}"
161:18-161:20::GHC.Tuple.() :: "{v : () | v == ()}"
162:18-162:28::Reverse.rightId :: "forall a . x1:[a] -> {VV : () | ++ x1 [] == x1}"
162:26-162:28::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
167:1-167:6::Reverse.assoc :: "forall a .\nx1:[a] -> x2:[a] -> x3:[a] -> {VV : () | ++ (++ x1 x2) x3 == ++ x1 (++ x2 x3)}"
167:22-167:24::GHC.Tuple.() :: "{v : () | v == ()}"
168:22-168:36::Reverse.assoc :: "forall a .\nx1:[a] -> x2:[a] -> x3:[a] -> {VV : () | ++ (++ x1 x2) x3 == ++ x1 (++ x2 x3)}"
168:28-168:30::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
168:31-168:33::ds_ddyI :: "{v : [a] | len v >= 0}"
168:34-168:36::ds_ddyJ :: "{v : [a] | len v >= 0}"
176:1-176:12::Reverse.fastReverse :: "forall a .\nx1:[a] -> {VV : [a] | VV == fastReverse x1\n                      && VV == fastReverse' [] x1}"
176:13-176:15::xs :: "[a]"
176:31-176:33::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
176:34-176:36::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
180:1-180:13::Reverse.fastReverse' :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | VV == fastReverse' x1 x2}"
180:14-180:17::acc :: "[a]"
180:23-180:26::acc :: "{v : [a] | len v >= 0\n           && v == acc}"
181:27-181:50::Reverse.fastReverse' :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | VV == fastReverse' x1 x2}"
181:40-181:47::lq_anf$##7205759403792852179 :: "{v : [a] | tail v == acc\n           && head v == x\n           && lqdc##$select v == acc\n           && lqdc##$select v == x\n           && len v == 1 + len acc\n           && v == : x acc}"
181:41-181:42::x :: "{VV : a | VV == x}"
181:43-181:46::acc :: "{v : [a] | len v >= 0\n           && v == acc}"
181:48-181:50::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
185:1-185:12::Reverse.slowReverse :: "forall a . x1:[a] -> {VV : [a] | VV == slowReverse x1}"
185:22-185:24::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0\n                                                  && v == []} | VV == []}"
186:22-186:36::lq_anf$##7205759403792852184 :: "{v : [a] | v == slowReverse xs}"
186:34-186:36::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
186:40-186:43::lq_anf$##7205759403792852186 :: "{v : [a] | head v == x\n           && lqdc##$select v == x}"
186:41-186:42::x :: "{VV : a | VV == x}"
190:1-190:11::Reverse.badReverse :: "forall a .\nx1:[a] -> {VV : [a] | VV == badReverse x1\n                      && VV == x1}"
190:12-190:14::xs :: "[a]"
194:8-194:10::Reverse.++ :: "forall a . x1:[a] -> x2:[a] -> {VV : [a] | VV == ++ x1 x2}"
194:11-194:13::ys :: "[a]"
194:16-194:18::ys :: "{v : [a] | len v >= 0\n           && v == ys}"
195:16-195:17::x :: "{VV : a | VV == x}"
195:18-195:28::lq_anf$##7205759403792852182 :: "{v : [a] | v == ++ xs ys}"
195:19-195:21::xs :: "{v : [a] | len v >= 0\n           && v == xs}"
195:25-195:27::ys :: "{v : [a] | len v >= 0\n           && v == ys}"