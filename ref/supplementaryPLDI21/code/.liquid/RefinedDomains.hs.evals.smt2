(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$VV$35$$35$856$35$$35$k_$35$$35$857 () Int)
(declare-fun VV$35$$35$F$35$$35$31 () Int)
(declare-fun lq_karg$36$VV$35$$35$786$35$$35$k_$35$$35$787 () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun addrLen () Int)
(declare-fun bbEq () Int)
(declare-fun lq_karg$36$VV$35$$35$890$35$$35$k_$35$$35$891 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$3 () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D () Int)
(declare-fun x$35$$35$afun () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun VV$35$$35$F$35$$35$1 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$35$$35$k_$35$$35$908 () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$790 () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun VV$35$$35$F$35$$35$45 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_tmp$36$x$35$$35$778 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$784 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$993 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C () Int)
(declare-fun GHC.List.span () Int)
(declare-fun VV$35$$35$F$35$$35$51 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A$35$$35$k_$35$$35$753 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun VV$35$$35$F$35$$35$48 () Int)
(declare-fun VV$35$$35$F$35$$35$37 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$913 () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun RefinedDomains.$36$trModule () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H$35$$35$k_$35$$35$857 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_karg$36$VV$35$$35$907$35$$35$k_$35$$35$908 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855627$35$$35$dg8r () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$2 () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun x$35$$35$afuo () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$35$$35$k_$35$$35$913 () Int)
(declare-fun PropositionalEquality.symmP () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M$35$$35$k_$35$$35$993 () Int)
(declare-fun VV$35$$35$F$35$$35$30 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$35$$35$k_$35$$35$993 () Int)
(declare-fun VV$35$$35$F$35$$35$42 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D$35$$35$k_$35$$35$753 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun autolen () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$908 () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$791 () Int)
(declare-fun lq_karg$36$x$35$$35$aful$35$$35$k_$35$$35$913 () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$857 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$1 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun VV$35$$35$F$35$$35$49 () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G () Int)
(declare-fun RefinedDomains.pf$39$ () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lq_karg$36$lq_tmp$36$x$35$$35$791$35$$35$k_$35$$35$790 () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun RefinedDomains.pf0$39$ () Int)
(declare-fun VV$35$$35$F$35$$35$50 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun x$35$$35$aful () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun VV$35$$35$F$35$$35$55 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$4 () Int)
(declare-fun lq_tmp$36$x$35$$35$988 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$33 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun PropositionalEquality.$36$fAEqInteger () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqSMT$35$$35$1 () Int)
(declare-fun PropositionalEquality.EqFun () Int)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$888 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J () Int)
(declare-fun lit$36$RefinedDomains () Str)
(declare-fun RefinedDomains.add1Nat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$891 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun RefinedDomains.add1Int () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun VV$35$$35$F$35$$35$43 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$db$35$$35$11 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun lq_karg$36$VV$35$$35$752$35$$35$k_$35$$35$753 () Int)
(declare-fun lq_karg$36$VV$35$$35$912$35$$35$k_$35$$35$913 () Int)
(declare-fun RefinedDomains.pf0$39$$39$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G$35$$35$k_$35$$35$857 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B () Int)
(declare-fun VV$35$$35$F$35$$35$20 () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855630$35$$35$dg8u () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun RefinedDomains.pf$39$$39$ () Int)
(declare-fun VV$35$$35$F$35$$35$46 () Int)
(declare-fun VV$35$$35$F$35$$35$39 () Int)
(declare-fun PropositionalEquality.EqCtx () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E$35$$35$k_$35$$35$857 () Int)
(declare-fun lq_karg$36$VV$35$$35$992$35$$35$k_$35$$35$993 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$883 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun is$36$PropositionalEquality.EqSMT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun PropositionalEquality.$36$WEqCtx () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun x$35$$35$afum () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$35$$35$k_$35$$35$908 () Int)
(declare-fun lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr () Str)
(declare-fun VV$35$$35$F$35$$35$32 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 () Int)
(declare-fun is$36$PropositionalEquality.EqCtx () Int)
(declare-fun PropositionalEquality.reflP () Int)
(declare-fun lq_karg$36$VV$35$$35$887$35$$35$k_$35$$35$888 () Int)
(declare-fun x$35$$35$afup () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$913 () Int)
(declare-fun PropositionalEquality.eqRTCtx () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$993 () Int)
(declare-fun VV$35$$35$F$35$$35$40 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun PropositionalEquality.deqFun () Int)
(declare-fun lq_karg$36$VV$35$$35$783$35$$35$k_$35$$35$784 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lq_karg$36$VV$35$$35$597$35$$35$k_$35$$35$598 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855629$35$$35$dg8t () Str)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$35$$35$k_$35$$35$993 () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Int)
(declare-fun lq_karg$36$VV$35$$35$789$35$$35$k_$35$$35$790 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$35$$35$k_$35$$35$913 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$47 () Int)
(declare-fun VV$35$$35$F$35$$35$38 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun PropositionalEquality.transP () Int)
(declare-fun lq_tmp$36$x$35$$35$882 () Int)
(declare-fun GHC.List.take () Int)
(declare-fun PropositionalEquality.$36$WEqFun () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun VV$35$$35$F$35$$35$3 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun lq_karg$36$x$35$$35$afun$35$$35$k_$35$$35$753 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun x () Int)
(declare-fun lq_karg$36$x$35$$35$afum$35$$35$k_$35$$35$857 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$2 () Int)
(declare-fun GHC.Num.$36$fNumInteger () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$F$35$$35$35 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B$35$$35$k_$35$$35$753 () Int)
(declare-fun is$36$PropositionalEquality.EqFun () Int)
(declare-fun eqT () Int)
(declare-fun lq_tmp$36$x$35$$35$777 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_karg$36$RefinedDomains.pf$39$$39$$35$$35$k_$35$$35$908 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun VV$35$$35$F$35$$35$5 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855628$35$$35$dg8s () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$857 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun VV$35$$35$F$35$$35$41 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun PropositionalEquality.C$58$AEq () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_tmp$36$x$35$$35$881 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$35$$35$k_$35$$35$888 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lq_tmp$36$x$35$$35$779 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C$35$$35$k_$35$$35$753 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$35$$35$k_$35$$35$891 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun VV$35$$35$F$35$$35$19 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F$35$$35$k_$35$$35$857 () Int)
(declare-fun VV$35$$35$F$35$$35$22 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A () Int)
(declare-fun VV$35$$35$F$35$$35$44 () Int)
(declare-fun VV$35$$35$F$35$$35$34 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun PropositionalEquality.bEq () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$888 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$891 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_karg$36$RefinedDomains.pf0$39$$39$$35$$35$k_$35$$35$787 () Int)
(declare-fun PropositionalEquality.eqSMT () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun GHC.Integer.Type.$36$fOrdInteger () Int)
(declare-fun VV$35$$35$F$35$$35$52 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun y () Int)
(declare-fun PropositionalEquality.EqSMT () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqCtx$35$$35$3 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)



(assert (distinct lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr lit$36$RefinedDomains))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$RefinedDomains) 14))
(assert (= (strLen lit$36$propositional$45$equality$45$0.1.0.0$45$I3b76TrI2Jz4ErVGS6x2Zr) 53))
(push 1)
(push 1)
(assert (and (not GHC.Types.False)))
(assert (and (= GHC.Types.True GHC.Types.True)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (= GHC.Types.False GHC.Types.False)))
(assert (and GHC.Types.True))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (= GHC.Num.$36$fNumInteger GHC.Num.$36$fNumInteger)))
(assert (and (= PropositionalEquality.$36$fAEqInteger PropositionalEquality.$36$fAEqInteger)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (<= 0 x$35$$35$afun)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (+ x$35$$35$afun 1))) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (+ x$35$$35$afun 1))) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0))) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) (= lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C))) (= lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (<= 0 x$35$$35$afun) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (+ x$35$$35$afun 1))) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (+ x$35$$35$afun 1))) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun)) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0))) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun))) (= lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) (= lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C))) (= lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$afun 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not true))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$afun 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not true))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (= (>= x$35$$35$afun 0) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0) (+ x$35$$35$afun 1)))
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (= (>= x$35$$35$afun 0) true))
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C) (= VV$35$$35$F$35$$35$50 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C))) (= VV$35$$35$F$35$$35$50 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855638$35$$35$dg8C))) (= VV$35$$35$F$35$$35$50 lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0) (+ x$35$$35$afun 1)))
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (+ x$35$$35$afun 1)))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A) lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B) (= VV$35$$35$F$35$$35$47 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.eqSMT Int) lq_anf$36$$35$$35$7205759403792855636$35$$35$dg8A) lq_anf$36$$35$$35$7205759403792855637$35$$35$dg8B) lq_anf$36$$35$$35$7205759403792855639$35$$35$dg8D)))))
(assert (= (>= x$35$$35$afun 0) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afun) (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (ite (>= x$35$$35$afun 0) (+ x$35$$35$afun 1) 0) (+ x$35$$35$afun 1)))
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) (= RefinedDomains.pf$39$$39$ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.deqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$$39$)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) (= lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G))) (= lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0))) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (+ x$35$$35$afum 1))) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (+ x$35$$35$afum 1))) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (<= 0 x$35$$35$afum)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) (= lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G))) (= lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0))) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (+ x$35$$35$afum 1))) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum)) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (+ x$35$$35$afum 1))) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (<= 0 x$35$$35$afum) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$afum 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not true))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$afum 0))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not true))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (= (>= x$35$$35$afum 0) true))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E) lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F) (= VV$35$$35$F$35$$35$28 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.eqSMT Int) lq_anf$36$$35$$35$7205759403792855640$35$$35$dg8E) lq_anf$36$$35$$35$7205759403792855641$35$$35$dg8F) lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H)))))
(assert (= (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0) (+ x$35$$35$afum 1)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum) (+ x$35$$35$afum 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (+ x$35$$35$afum 1)))
(pop 1)
(push 1)
(assert (= (>= x$35$$35$afum 0) true))
(assert (= (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0) (+ x$35$$35$afum 1)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum) (+ x$35$$35$afum 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (+ x$35$$35$afum 1)))
(pop 1)
(push 1)
(assert (= (>= x$35$$35$afum 0) true))
(assert (= (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0) (+ x$35$$35$afum 1)))
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G) (= VV$35$$35$F$35$$35$31 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G))) (= VV$35$$35$F$35$$35$31 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855642$35$$35$dg8G))) (= VV$35$$35$F$35$$35$31 lq_anf$36$$35$$35$7205759403792855643$35$$35$dg8H))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$afum) (+ x$35$$35$afum 1)))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (ite (>= x$35$$35$afum 0) (+ x$35$$35$afum 1) 0)))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$afum) (+ x$35$$35$afum 1)))
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) (= RefinedDomains.pf$39$ (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)))))
(assert (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L))))
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (ite (>= x$35$$35$aful 0) (+ x$35$$35$aful 1) 0))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful)))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L)) (and (and (and (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (ite (>= x$35$$35$aful 0) (+ x$35$$35$aful 1) 0))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855644$35$$35$dg8I (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (and (and (and (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (+ x$35$$35$aful 1))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful))) (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= (apply$35$$35$0 RefinedDomains.add1Int x$35$$35$aful) (+ x$35$$35$aful 1)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (and (and (and (apply$35$$35$1 (apply$35$$35$0 (as bbEq Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 (apply$35$$35$0 (as PropositionalEquality.reflP Int) lq_anf$36$$35$$35$7205759403792855646$35$$35$dg8K))) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792855647$35$$35$dg8L)) (= (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful) (ite (>= x$35$$35$aful 0) (+ x$35$$35$aful 1) 0)) (and (and (and (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful)) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (ite (>= x$35$$35$aful 0) (+ x$35$$35$aful 1) 0))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful))) (= lq_anf$36$$35$$35$7205759403792855645$35$$35$dg8J (apply$35$$35$0 RefinedDomains.add1Nat x$35$$35$aful))) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= x$35$$35$aful 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= x$35$$35$aful 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M (smt_lambda$35$$35$0 lam_arg$35$$35$1$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.eqSMT Int) (apply$35$$35$0 RefinedDomains.add1Int lam_arg$35$$35$1$35$$35$0)) (apply$35$$35$0 RefinedDomains.add1Nat lam_arg$35$$35$1$35$$35$0)) (apply$35$$35$0 (as PropositionalEquality.reflP Int) (apply$35$$35$0 RefinedDomains.add1Int lam_arg$35$$35$1$35$$35$0)))))))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$988 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$988 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$988 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$988 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$988) (+ lq_tmp$36$x$35$$35$988 1)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$988) (ite (>= lq_tmp$36$x$35$$35$988 0) (+ lq_tmp$36$x$35$$35$988 1) 0)) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$988 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$988 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$988 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$988 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$1) false) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 Int) VV$35$$35$F$35$$35$1) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 Int) VV$35$$35$F$35$$35$1) RefinedDomains.add1Nat)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 Int) VV$35$$35$F$35$$35$1) RefinedDomains.add1Int)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$1) true)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$1) false)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat)) (= VV$35$$35$F$35$$35$1 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M))) (= VV$35$$35$F$35$$35$1 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$1) false) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 Int) VV$35$$35$F$35$$35$1) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 Int) VV$35$$35$F$35$$35$1) RefinedDomains.add1Nat)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 Int) VV$35$$35$F$35$$35$1) RefinedDomains.add1Int)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$1) true)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$1) false)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat)) (= VV$35$$35$F$35$$35$1 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M))) (= VV$35$$35$F$35$$35$1 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) lq_anf$36$$35$$35$7205759403792855648$35$$35$dg8M))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (<= 0 x)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$883)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$883))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$883)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$883)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$883 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$883 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$883 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$883 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$883)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$883)) (= (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$883) (+ lq_tmp$36$x$35$$35$883 1)) (= (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$883) (ite (>= lq_tmp$36$x$35$$35$883 0) (+ lq_tmp$36$x$35$$35$883 1) 0)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$883 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$883 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$883 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$883 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(push 1)
(assert (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$17) false) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 Int) VV$35$$35$F$35$$35$17) RefinedDomains.pf0$39$)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 Int) VV$35$$35$F$35$$35$17) RefinedDomains.add1Nat)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 Int) VV$35$$35$F$35$$35$17) RefinedDomains.add1Int)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$17) true)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$17) false)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat)) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$))) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (and (and (and (and (and (and (and (and (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqSMT Int) VV$35$$35$F$35$$35$17) false) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$3 Int) VV$35$$35$F$35$$35$17) RefinedDomains.pf0$39$)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$2 Int) VV$35$$35$F$35$$35$17) RefinedDomains.add1Nat)) (= (apply$35$$35$0 (as lqdc$35$$35$$36$select$35$$35$PropositionalEquality.EqFun$35$$35$1 Int) VV$35$$35$F$35$$35$17) RefinedDomains.add1Int)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqFun Int) VV$35$$35$F$35$$35$17) true)) (= (apply$35$$35$1 (as is$36$PropositionalEquality.EqCtx Int) VV$35$$35$F$35$$35$17) false)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat)) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$))) (= VV$35$$35$F$35$$35$17 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.$36$WEqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$))) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (and (<= 0 x)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$779)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$779))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(push 1)
(assert (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$779)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$779)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$779 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$779 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$779 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$779 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$779) (ite (>= lq_tmp$36$x$35$$35$779 0) (+ lq_tmp$36$x$35$$35$779 1) 0)) (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$779)) (apply$35$$35$0 RefinedDomains.add1Nat lq_tmp$36$x$35$$35$779)) (= (apply$35$$35$0 RefinedDomains.add1Int lq_tmp$36$x$35$$35$779) (+ lq_tmp$36$x$35$$35$779 1)) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0)))
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$779 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$779 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (>= lq_tmp$36$x$35$$35$779 0))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not false)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and (not (not (>= lq_tmp$36$x$35$$35$779 0)))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(push 1)
(assert (and (and (apply$35$$35$1 (apply$35$$35$0 (as eqT Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) (= VV$35$$35$F$35$$35$34 (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as PropositionalEquality.deqFun Int) RefinedDomains.add1Int) RefinedDomains.add1Nat) RefinedDomains.pf0$39$$39$)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(push 1)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(pop 1)
(pop 1)
(pop 1)
